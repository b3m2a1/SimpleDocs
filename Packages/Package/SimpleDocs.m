(* ::Package:: *)

(* Autogenerated Package *)

(* ::Section:: *)
(*SimpleDocs*)



(* ::Text:: *)
(*
	This implements the code behind the SimpleDocs stylesheet and palette, if I ever make a palette
*)



(* ::Subsubsection::Closed:: *)
(*Core Stuff*)



$NotebookTemplates::usage="";


(* ::Subsubsection::Closed:: *)
(*Notebooks*)



SetNotebookPaclet::usage="";
SaveNotebookToPaclet::usage="";
SaveNotebookMarkdown::usage="";
SaveNotebookToPacletProject::usage=""


CreateTemplateNotebook::usage="";
SampleTemplateNotebook::usage="";


(* ::Subsubsection::Closed:: *)
(*GUI Elements*)



$InsertionMenu::usage="";
$HamburgerMenu::usage="";
$MetadataEditor::usage="";
$DockedCell::usage="";


(* ::Subsubsection::Closed:: *)
(*Docs*)



InitializeDocsSite::usage="";
BuildDocsSite::usage="";
BuildNotebookDocsSite::usage="";
OpenDocsSiteConfig::usage="";


(* ::Subsubsection::Closed:: *)
(*Paclets*)



SetPacletInfo::usage="";


Begin["`Private`"];


PackageExposeDependencies[
  {
    "Ems`",
    "BTools`Developer`",
    "BTools`Web`",
    "BTools`Web`Markdown`",
    "BTools`Paclets`",
    "BTools`Paclets`DocGen`",
    "BTools`External`"
    },
  True (* attaches these to the standard context path *)
  ]


(* ::Subsection:: *)
(*Site*)



(* ::Subsubsection::Closed:: *)
(*docsSiteLoc*)



docsSiteLoc//Clear
docsSiteLoc[loc_String?(StringQ[#]&&StringLength[#]>0&&DirectoryQ[#]&)]:=
  FileNameJoin@{loc, "project", "docs"};
docsSiteLoc[p_PacletManager`Paclet]:=
  docsSiteLoc[p["Location"]];
docsSiteLoc[s_String]:=
  Replace[PacletManager`PacletFind[s], {p_, ___}:>docsSiteLoc[p]];


(* ::Subsubsection::Closed:: *)
(*InitializeDocsSite*)



InitializeDocsSite[loc_]:=
  With[{l=docsSiteLoc[loc]},
    If[StringQ@l&&!DirectoryQ@l,
      With[{s=Ems["New", l, "docs"]},
        DeleteFile/@FileNames["*", FileNameJoin@{s, "content", "ref"}];
        DeleteFile/@FileNames["*", FileNameJoin@{s, "content", "guide"}];
        s
        ],
      $Failed
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*BuildDocsSite*)



BuildDocsSite[loc_]:=
  Ems["Build", docsSiteLoc[loc]];


(* ::Subsubsection::Closed:: *)
(*BuildNotebookDocsSite*)



(* ::Subsubsubsection::Closed:: *)
(*BuildNotebookDocsSite*)



BuildNotebookDocsSite[nb_, ploc_:Automatic]:=
  With[{pac=getNotebookPaclet[nb, ploc]},
    If[pac=!=None,
      buildNotebookDocsSite[pac]
      ]
    ]


(* ::Subsubsubsection::Closed:: *)
(*overrideMonitor*)



overrideMonitor//Clear


overrideMonitor[expr_, sym_]:=
  Block[{Monitor},
    SetAttributes[Monitor, HoldAllComplete];
    Monitor[a_, b_, ___]:=
      (
        sym=b;
        a
        );
    expr;
    ];
overrideMonitor~SetAttributes~HoldAll;


(* ::Subsubsubsection::Closed:: *)
(*buildNotebookDocsSite*)



$protector=False;


buildNotebookDocsSite[loc_]:=
  With[{l=docsSiteLoc[loc]},
    Block[{blech},
      If[DirectoryQ@l,
        Module[{nb},
          nb=
            MessageDialog[
              Column@{
                StringForm[
                  "Creating site @ ``", l
                  ],
                Panel[
                  Dynamic[
                    If[MatchQ[blech, _Symbol], "", blech],
                    TrackedSymbols:>{blech}
                    ],
                  ImageSize->{350, 100}
                  ]
                },
              WindowTitle->"Building Site",
              WindowFloating->True
              ];
          overrideMonitor[
            PySimpleServerOpen@Ems["Build", l],
            blech
            ];
          NotebookClose@nb;
          ],
        $Failed
        ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*OpenDocsSiteConfig*)



OpenDocsSiteConfig[nb_, ploc_:Automatic]:=
  SystemOpen@
    FileNameJoin@{docsSiteLoc@getNotebookPaclet[nb, ploc], "SiteConfig.wl"}


(* ::Subsection:: *)
(*Misc*)



(* ::Subsubsection::Closed:: *)
(*$MetadataMap*)



$MetadataMap=
  <|
    "Basics"->
      {
        "Context","Language","Paclet",
        "Type","Label","URI",
        "Summary","Status",
        "Title","Title Modifier","Window Title"
        },
    "Location"->
      {"Keywords","Synonyms","Index"},
    "History"->{"Built","History"},
    "Advanced"->{"Table Tags","Tutorial Collection Links","Special Keywords"}
    |>;


(* ::Subsubsection::Closed:: *)
(*$NotebookTemplates*)



(* ::Subsubsubsection::Closed:: *)
(*$miscTemplates*)



$miscTemplates=
  <|
    "TitleBar"->Cell["<Context>", "TitleBar"],
    "Divider"->Cell["", "PageBreak", PageBreakBelow->False, PageBreakAbove->False],
    "Footer"->Cell["Made with SimpleDocs", "Text", "Footer"]
    |>;


(* ::Subsubsubsection::Closed:: *)
(*$baseTemplates*)



$baseTemplates=
  <|
    "Usage"->
      Cell@
        CellGroupData[
          {
            Cell[BoxData@RowBox[{"<FunctionName>","[",RowBox[{"arg1", ",",  "arg2", ",",  "..."}],"]"}], "Code", "UsageInput"],
            Cell["description", "Text", "UsageText"]
            }
          ],
    "Guide Line"->
      Cell[
        TextData@{
          ButtonBox["Function1", BaseStyle->"Link",ButtonData->"paclet:Pkg/ref/Function1"], 
          " - ", 
          "description"
          }, "Text"],
    "Details"->
      Cell@
        CellGroupData[
          {
            Cell["Details item", "Item", "DetailsItem"],
            Cell["Details subitem", "Subitem", "DetailsSubitem"]
            }
          ],
    "Example"->
      Cell@
        CellGroupData[
          {
            Cell["Description", "Text"],
            Cell[BoxData@RowBox[{"FunctionName","[",RowBox[{"arg1",",", "arg2", ",", "..."}],"]"}], "Code"],
            Cell[BoxData[RowBox[{"result"}]], "Output", GeneratedCell->True]
            }
          ],
    "Related Functions"->
      Cell@
        CellGroupData[
          {
            Cell["See Also", "Subsection", "SeeAlso"],
            Cell[
              TextData@
                {
                  ButtonBox["Function1",
                    BaseStyle->{"Link", "Input"},ButtonData->"paclet:Pkg/ref/Function1"]," | ",
                  ButtonBox["Function2",
                    BaseStyle->{"Link", "Input"},ButtonData->"paclet:Pkg/ref/Function2"]
                  },
               "Text"
              ]
            }
          ],
    "Related Guides"->
      Cell@
        CellGroupData[
          {
            Cell["Related Guides", "Subsection", "Related"],
            Cell[
              TextData@ButtonBox["Guide 1",BaseStyle->"Link",ButtonData->"paclet:Pkg/guide/Guide1"],
              "Item"
              ],
            Cell[
              TextData@ButtonBox["Guide 2",BaseStyle->"Link",ButtonData->"paclet:Pkg/guide/Guide2"],
              "Item"
              ]
            }
          ],
    "Related Links"->
      Cell@
        CellGroupData[
          {
            Cell["Related Links", "Subsection", "RelatedLinks"],
            Cell[
              TextData@
                ButtonBox[
                  "Link 1",
                  BaseStyle->"Hyperlink",
                  ButtonData->{URL["https://google.com"],
                      None},
                  ButtonNote->"Link 1"
                  ],
              "Item"
              ],
            Cell[
              TextData@
                ButtonBox[
                  "Link 2",
                  BaseStyle->"Hyperlink",
                  ButtonData->{URL["https://paclets.github.io/PacletServer"],
                      None},
                  ButtonNote->"Link 2"
                  ],
              "Item"
              ]
            }
          ]
    |>;


(* ::Subsubsubsection::Closed:: *)
(*$sectionTemplates*)



$sectionTemplates=
  <|
    "Usage Section":>
      Cell@
        CellGroupData[
          {
            Cell["", "Subsection", "UsageSection"],
            $baseTemplates["Usage"],
            Cell["", "UsageSectionFooter"]
            }
          ],
    "Details Section":>
      Cell@
        CellGroupData[
          {
            Cell["Details", "Subsection", "DetailsSection"],
            $baseTemplates["Details"]
            },
          Closed
          ],
    "Examples Section":>
      Cell@
        CellGroupData[
          {
            Cell["Examples", "Subsection", "ExamplesSection"],
            Cell@
              CellGroupData[{
                  Cell["Basic Examples", "Subsubsection", "ExamplesSubsection"],
                  $baseTemplates["Example"]
                  }]
            }
          ],
    "Related Section":>
      Cell@
        CellGroupData[
          {
            $baseTemplates["Related Functions"],
            $baseTemplates["Related Guides"],
            $baseTemplates["Related Links"]
            }
          ],
    "Guide Section":>
      Cell@
        CellGroupData[
          {
            $miscTemplates["Divider"],
            Cell["Description", "Text"],
            $baseTemplates["Guide Line"],
            $baseTemplates["Guide Line"]
            }
          ]
    |>;


(* ::Subsubsubsection::Closed:: *)
(*$metaCell*)



$metaCell=
  Cell[
    BoxData[
      RowBox[{
          RowBox[{"(*"," ",
              RowBox[{"Markdown"," ","metadata"}]," ","*)"}],"\[IndentingNewLine]",
          RowBox[{"<|","\[IndentingNewLine]",
              RowBox[{
                  RowBox[{"\"Date\"","\[RuleDelayed]","Now"}],",","\[IndentingNewLine]",
                  RowBox[{"\"ExportOptions\"","\[Rule]",
                      RowBox[{"{","\[IndentingNewLine]",
                          RowBox[{"(*",
                              RowBox[{"\"UseImageInput\"","\[Rule]","True"}],"*)"}],"\[IndentingNewLine]","}"
                          }]
                      }]
                  }],"\[IndentingNewLine]",
              "|>"
              }]
          }]
      ],
    "Metadata"];


(* ::Subsubsubsection::Closed:: *)
(*$primaryTemplates*)



$primaryTemplates=
  <|
    "Symbol"->
      Cell@
        CellGroupData[
          {
            $metaCell,
            $miscTemplates["TitleBar"],
            Cell["FunctionName", "Section"],
            $sectionTemplates["Usage Section"],
            $sectionTemplates["Details Section"],
            $sectionTemplates["Examples Section"],
            $sectionTemplates["Related Section"],
            $miscTemplates["Footer"]
            }
          ],
    "Guide"->
      Cell@
        CellGroupData[
          {
            $metaCell,
            $miscTemplates["TitleBar"],
            Cell["Guide Name", "Section"],
            Cell["guide descriptions", "Text"],
            $sectionTemplates["Guide Section"],
            $miscTemplates["Divider"],
            $baseTemplates["Related Guides"],
            $baseTemplates["Related Links"],
            $miscTemplates["Footer"]
            }
          ],
    "Tutorial"->
      Cell@
        CellGroupData[
          {
            $metaCell,
            $miscTemplates["TitleBar"],
            Cell["Tutorial Name", "Section"],
            $miscTemplates["Footer"]
            }
          ]
    |>;


(* ::Subsubsubsection::Closed:: *)
(*$NotebookTemplates*)



$NotebookTemplates=
  Join[
    $primaryTemplates,
    $sectionTemplates,
    $baseTemplates,
    $miscTemplates
    ]


(* ::Subsection:: *)
(*Notebook*)



(* ::Subsubsection::Closed:: *)
(*getMeta*)



getMeta[nb_, k_]:=
  CurrentValue[nb, {TaggingRules, "Metadata", ToLowerCase@k}];


(* ::Subsubsection::Closed:: *)
(*setMeta*)



getMeta[nb_, k_, v_]:=
  CurrentValue[nb, {TaggingRules, "Metadata", ToLowerCase@k}]=v;


(* ::Subsubsection::Closed:: *)
(*getPacletDialog*)



getPacletDialog[]:=
  DialogInput[
    {pacletName=""},
    Pane[
      Panel[
        Column[
          {
            EventHandler[
              InputField[Dynamic@pacletName,
                String,
                BoxID->"pname",
                FieldHint->"paclet name"
                ],
              "ReturnKeyDown":>DialogReturn@pacletName
              ]
            }
          ],
        "Specify paclet:",
        ImageSize->{Automatic, 60},
        Alignment->Center
        ],
      ImageSize->{250, 100},
      Alignment->Center
      ],
    WindowFloating->True,
    NotebookDynamicExpression:>
      Refresh[
        FrontEndExecute@FrontEnd`MoveCursorToInputField[EvaluationNotebook[], "pname"], 
        None
        ],
"CellInsertionPointCell"->Automatic
    ];


(* ::Subsubsection::Closed:: *)
(*SetNotebookPaclet*)



SetNotebookPaclet[nb_]:=
  Module[
    {pacletLoc=getPacletDialog[]},
    If[StringLength@pacletLoc>0,
      CurrentValue[nb, {TaggingRules, "Paclet"}]=pacletLoc,
      pacletLoc=None
      ];
    pacletLoc
    ]


(* ::Subsubsection::Closed:: *)
(*getPacletSaveLocation*)



getPacletSaveLocation[loc_String, lang_, type_]:=
  FileNameJoin@{
    loc, 
    "Documentation", 
    lang, 
    Lookup[
      <|
        "symbol"->FileNameJoin@{"ReferencePages", "Symbols"}, 
        "Symbol"->FileNameJoin@{"ReferencePages", "Symbols"}
        |>, 
      type,
      If[StringQ@type,
        Replace[
          (ToUpperCase[StringTake[#, {1}]]<>ToLowerCase@StringDrop[#, 1])&@ type<>"s", 
          s:Except["Guides"|"Tutorials"]:>
            FileNameJoin@{"ReferencePages", s}
          ],
        FileNameJoin@{"ReferencePages", "Symbols"}
        ]
      ]
    };
getPacletSaveLocation[pac_PacletManager`Paclet, lang_, type_]:=
  getPacletSaveLocation[pac["Location"], lang, type];


(* ::Subsubsection::Closed:: *)
(*getPacletSaveFileName*)



getPacletSaveFileName[pac_, nb_]:=
  Module[
    {
      cont,
      lang,
      type,
      baseDir,
      title,
      pi
      },
    cont=getMeta[nb, "context"];
    lang=getMeta[nb, "language"];
    If[cont===Automatic,
      pi=PacletManager`PacletInformation[pac];
      setMeta[nb, "context", 
        First["Context"/.Append[pi, "Context"->{Lookup[pi, "Name"]<>"`"}]]
        ]
      ];
    type=getMeta[nb, "type"];
    lang=Lookup[<|"en"->"English"|>, lang, $Language];
    baseDir=getPacletSaveLocation[pac, lang, type];
    Quiet@CreateDirectory[baseDir, CreateIntermediateDirectories->True];
    title=CurrentValue[nb, {TaggingRules, "Metadata", "label"}];
    If[!StringQ@title, title="Symbol"];
    FileNameJoin@{baseDir,StringTrim[title, ".nb"]<>".nb" }
    ];


(* ::Subsubsection::Closed:: *)
(*getSiteSaveLocation*)



getSiteSaveLocation[loc_, type_]:=
  FileNameJoin@{
    docsSiteLoc@loc, 
    "content",  
    StringTrim[
      Lookup[<|"symbol"->"ref", "Symbol"->"ref"|>, type,
        If[StringQ@type,
          (ToUpperCase[StringTake[#, {1}]]<>StringDrop[#, 1])&@ type, 
          "ref"
          ]
        ],
      "s"~~EndOfString
      ]
    };


(* ::Subsubsection::Closed:: *)
(*getSiteSaveFileName*)



getSiteSaveFileName[pac_, nb_]:=
  Module[
    {
      cont,
      lang,
      type,
      baseDir,
      title,
      pi
      },
    cont=getMeta[nb, "context"];
    lang=getMeta[nb, "language"];
    If[cont===Automatic,
      pi=PacletManager`PacletInformation[pac];
      setMeta[nb, "context",
        First["Context"/.Append[pi, "Context"->{Lookup[pi, "Name"]<>"`"}]]
        ]
      ];
    type=getMeta[nb, "type"];
    InitializeDocsSite[pac];
    baseDir=getSiteSaveLocation[pac, type];
    title=CurrentValue[nb, {TaggingRules, "Metadata", "label"}];
    If[!StringQ@title, title="Symbol"];
    Quiet@CreateDirectory[baseDir, CreateIntermediateDirectories->True];
    FileNameJoin@{baseDir,StringTrim[title, ".nb"]<>".nb" }
    ];


(* ::Subsubsection::Closed:: *)
(*getNotebookPaclet*)



getNotebookPaclet[nb_, ploc_:Automatic]:=
  Module[
    {
      pacletLoc=ploc,
      pac
      },
    If[!StringQ@pacletLoc, 
      pacletLoc=CurrentValue[nb, {TaggingRules, "Paclet"}]
      ];
    If[!StringQ[pacletLoc], 
      pacletLoc=SetNotebookPaclet[nb];
      ];
    If[StringQ@pacletLoc,
      pac=PacletManager`PacletFind[pacletLoc];
      If[Length@pac>0, pac=First@pac, pac=None],
      pac=None
      ];
    pac
    ]


(* ::Subsubsection::Closed:: *)
(*SaveNotebookToPaclet*)



SaveNotebookToPaclet//Clear;
SaveNotebookToPaclet[nb_, ploc_:Automatic]:=
  Module[
    {
      pacletLoc=ploc,
      pac,
      fname
      },
    If[!StringQ@pacletLoc, 
      pacletLoc=CurrentValue[nb, {TaggingRules, "Paclet"}]
      ];
    If[!StringQ[pacletLoc], 
      pacletLoc=SetNotebookPaclet[nb];
      ];
    If[StringQ@pacletLoc,
      pac=PacletManager`PacletFind[pacletLoc];
      If[Length@pac>0, pac=First@pac, pac=None];
      If[pac=!=None,
        fname=getPacletSaveFileName[pac, nb];
        Export[
          fname,
          Notebook[#[[1]],
            FilterRules[
              Flatten@{List@@#[[2;;]], ScreenStyleEnvironment->"Working"},
               Except[ScreenStyleEnvironment]
              ]
            ]&@NotebookGet[nb] 
          ]
        ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*SaveNotebookToPacletProject*)



SaveNotebookToPacletProject//Clear
SaveNotebookToPacletProject[nb_, ploc_:Automatic]:=
  Module[
    {
      pacletLoc=ploc,
      pac,
      fname
      },
    If[!StringQ@pacletLoc, 
      pacletLoc=CurrentValue[nb, {TaggingRules, "Paclet"}]
      ];
    If[!StringQ[pacletLoc], 
      pacletLoc=SetNotebookPaclet[nb];
      ];
    If[StringQ@pacletLoc,
      pac=PacletManager`PacletFind[pacletLoc];
      If[Length@pac>0, pac=First@pac, pac=None];
      If[pac=!=None,
        fname=getSiteSaveFileName[pac, nb];
        NotebookSave[nb, fname]
        ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*SaveNotebookMarkdown*)



(* ::Subsubsubsection::Closed:: *)
(*customMDExporter*)



customMDExporter//Clear
customMDExporter[pi_, c:Cell[_, "Text", "Footer", ___]]:=
  {
    Cell["", "PageBreak"],
    c
    };
customMDExporter[pi_, e_]:=e


(* ::Subsubsubsection::Closed:: *)
(*mergeCellStyles*)



mergeCellStyles[md_]:=
  Module[
    {
      sub=
        Lookup[Select[Lookup[md, "ExportOptions", {}], OptionQ], "CellStyles", {}],
      autof
      },
    autof=Lookup[sub, Automatic, None];
    {ParentList, 
      "Input", 
      Automatic->
        If[autof===None, 
          customMDExporter,
          customMDExporter[#, autof[##]]&
          ]
      }
    ]


(* ::Subsubsubsection::Closed:: *)
(*SaveNotebookMarkdown*)



SaveNotebookMarkdown[nb_]:=
  Module[
    {
      md=MarkdownNotebookMetadata@nb 
      (* for some reason this isn't getting linked in properly... *)
      },
    md=
      Merge[
        {
          Replace[md,
            ("CellStyles"->_)->Nothing,
            4
            ],
          "ExportOptions"->
            {
              "PacletLinkResolutionFunction"->
                Function[l, 
                  "../"<>
                  URLBuild[
                    Join@@
                      SplitBy[
                        URLParse[l, "Path"],
                        #=="ref"||#=="guide"||#=="tutorial"&
                        ][[-2;;]]
                    ]<>".html"
                  ],
              "CellStyles"->mergeCellStyles[md],
              "ContentPathExtension"->".."
              },
          "Title"->getMeta[nb, "title"],
          "Date"->
            Replace[getMeta[nb, "built"], 
              {
                s_String:>DateObject@ToExpression[s],
                l_List:>DateObject[l]
                }
              ],
          Flatten@{
              Replace[
                CurrentValue[nb, {TaggingRules, "Metadata"}],
                Except[_?OptionQ]:>{}
                ]
              }
          },
        Which[
          AllTrue[#, OptionQ], 
            Normal@Merge[#, First],
          AllTrue[#, ListQ],
            Join@@#,
          Length@#==1,
            First@#,
          ListQ@#[[2]],
            Prepend[#[[2]], #[[1]]],
          True,
            First@#
          ]&
        ];
  NotebookMarkdownSave[nb, Sequence@@Normal@md]
  ]


(* ::Subsubsection::Closed:: *)
(*PopulateNotebookMetadata*)



capitalize=ToUpperCase[StringTake[#, {1}]]<>StringDrop[#, 1]&


PopulateNotebookMetadata[nb_]:=
  Module[{md=DocMetadata[nb]},
    CurrentValue[nb, {TaggingRules, "Metadata"}]=md;
    CurrentValue[nb, {TaggingRules, "ColorType"}]=
      capitalize[Lookup[md, "type", "message"]]<>"Color"
    ]


(* ::Subsubsection::Closed:: *)
(*ClearNotebookMetadata*)



ClearNotebookMetadata[nb_]:=
  CurrentValue[nb, {TaggingRules, "Metadata"}]=
      Thread[Map[ToLowerCase, Flatten@Values@$MetadataMap]->Automatic];


(* ::Subsection:: *)
(*Templates*)



(* ::Subsubsection::Closed:: *)
(*CreateTemplateNotebook*)



$ctnMap=
  <|
    "Symbol"->SymbolNotebookTemplate,
    "Guide"->GuideNotebookTemplate,
    "Tutorial"->TutorialNotebookTemplate
    |>;


CreateTemplateNotebook//ClearAll


CreateTemplateNotebook[type:(Alternatives@@Keys[$ctnMap]), thing_]:=
  CreateDocument@Lookup[$ctnMap, type][thing];
CreateTemplateNotebook[thing_Symbol]:=
  CreateTemplateNotebook["Symbol", thing];
CreateTemplateNotebook[thing_String]:=
  If[NameQ[thing],
    ToExpression[thing, StandardForm,
      Function[Null, CreateTemplateNotebook["Symbol", #], HoldAllComplete]
      ],
    CreateTemplateNotebook["Guide", thing]
    ];
CreateTemplateNotebook[e_]:=
  CreateTemplateNotebook[Evaluate@e]/;
    MatchQ[e, _String|_Symbol];
CreateTemplateNotebook[type_, thing_]:=
  CreateTemplateNotebook[Evaluate@type, thing]/;
    KeyExistsQ[$ctnMap, type];
CreateTemplateNotebook~SetAttributes~HoldAll;


PackageAddAutocompletions[
  CreateTemplateNotebook,
  {Keys@$ctnMap}
  ]


(* ::Subsubsection::Closed:: *)
(*SymbolNotebookTemplate*)



(* ::Subsubsubsection::Closed:: *)
(*formatUsageSection*)



formatUsageSection[u_]:=
  Cell@
    CellGroupData[Flatten@{
      Cell["", "UsageSection"],
      Replace[u,
        {a_, b_}:>
          {
            Cell[
              BoxData@FrontEndExecute@FrontEnd`ReparseBoxStructurePacket[a], 
              "Code", 
              "UsageInput"
              ],
            Cell[
              b, 
              "Text", 
              "UsageText"
              ]
              },
        1
        ],
      Cell["", "UsageSectionFooter"]
      }]


(* ::Subsubsubsection::Closed:: *)
(*formatDetailsSection*)



formatDetailsSection[deets_]:=
  Cell@
    CellGroupData[
      Prepend[Cell["Details", "Subsection", "DetailsSection"]]@
        Replace[
          deets,
          {
            grid:{__List}:>
              Sequence@@Replace[grid,
                {
                  {a_}:>Cell[a, "Subitem", "DetailsItem"],
                  {a_, b_}:>
                    Sequence@@{
                      Cell[a, "Subitem", "DetailsItem"],
                      Cell[b, "Subsubitem", "DetailsItem"]
                      }
                  },
                1
                ],
            line_:>Cell[StringRiffle[line], "Item", "DetailsItem"]
            },
          1
          ],
      Closed
      ]


(* ::Subsubsubsection::Closed:: *)
(*formatExamplesSection*)



formatExamplesSection[ex_, d_:0]:=
  Module[{dooooop=True},
    If[d==0,
      Cell@
        CellGroupData[
          Prepend[Cell["Examples", "Subsection", "ExamplesSection"]]@
          #
          ]&,
      Identity
      ]@Replace[
          ex,
          {
            (a_->b_List):>
              Cell@
                CellGroupData[
                  Prepend[
                    Cell[a, "S"<>StringRepeat["ubs", d+2]<>"ection", "ExamplesSection"]
                    ]@formatExamplesSection[b, d+1],
                  If[dooooop, dooooop=False;Open, Closed]
                  ],
            (a_->b_):>
              Cell@
                CellGroupData[{
                  Cell[a, "Text", "ExamplesText"],
                  Cell[
                    BoxData@FrontEndExecute@
                      FrontEnd`ReparseBoxStructurePacket@b, "Code", "ExamplesInput"]
                  }]
            },
          1
          ]
    ]


(* ::Subsubsubsection::Closed:: *)
(*formatRelatedSection*)



formatRelatedSection[names_]:=
  Cell@CellGroupData[
    {
      Cell@
        CellGroupData[
          {
            Cell["See Also", "Subsection", "SeeAlso"],
            Cell[
              TextData@
                Riffle[
                  ButtonBox[#,
                    BaseStyle->{"Link", "Input"},ButtonData->"paclet:ref/"<>#
                    ]&/@names,
                  " | "
                  ],
               "Text"
              ]
            }
          ],
      $baseTemplates["Related Guides"],
      $baseTemplates["Related Links"]
      }
    ]


(* ::Subsubsubsection::Closed:: *)
(*SymbolNotebookTemplate*)



SymbolNotebookTemplate[s_Symbol]:=
  Module[
    {
      bits,
      use,
      deets,
      exams,
      similar,
      keys,
      meta,
      nb
      },
    keys={"UsageMessages", "Details", "Examples", "RelatedFunctions"};
    bits=GenerateFunctionInfo[s, "Keys"->keys];
    {use, deets, exams, similar}=Lookup[bits, keys];
    use=
      StringSplit[use, 
        k:((StartOfLine|StartOfString)~~a:Except["["]..~~"["~~b__~~"]")/;
          StringCount[b, "["]==StringCount["b", "]"]:>
          k
        ];
    meta=AssociationThread[ToLowerCase@Flatten@Values@$MetadataMap, Automatic];
    meta["label"]=SymbolName[s];
    meta["context"]=Context[s];
    meta["type"]="Symbol";
    nb=
      Notebook[
        {
          $metaCell,
          $miscTemplates["TitleBar"]/.
            "<Context>"->StringDelete[meta["context"], "`"]<>" Symbol",
          Cell[meta["label"], "Section", "SymbolName"],
          formatUsageSection[use],
          formatDetailsSection[deets],
          formatExamplesSection[exams],
          formatRelatedSection[similar],
          $NotebookTemplates["Footer"]
          },
        {
          StyleDefinitions->FrontEnd`FileName[{"SimpleDocs"}, "SimpleDocs.nb"],
          TaggingRules->{
            "Metadata"->DocMetadata@Normal@meta,
            "ColorType"->"SymbolColor"
            },
          ScreenStyleEnvironment->"Editing"
          }
        ]
    ]


(* ::Subsubsection::Closed:: *)
(*GuideNotebookTemplate*)



GuideNotebookTemplate[name_String]:=
  Module[
    {
      cleanName,
      meta,
      nb
      },
    meta=AssociationThread[ToLowerCase@Flatten@Values@$MetadataMap, Automatic];
    cleanName=StringDelete[name, Except[WordCharacter]|"$"];
    meta["label"]=cleanName;
    meta["type"]="Guide";
    nb=
      Notebook[
        {
          $metaCell,
          $miscTemplates["TitleBar"]/.
            "<Context>"->"Guide",
          Cell[name, "Section", "GuideName"],
          Cell["guide descriptions", "Text"],
          $sectionTemplates["Guide Section"],
          $miscTemplates["Divider"],
          $NotebookTemplates["Related Guides"],
          $NotebookTemplates["Related Links"],
          $NotebookTemplates["Footer"]
          },
        {
          StyleDefinitions->FrontEnd`FileName[{"SimpleDocs"}, "SimpleDocs.nb"],
          TaggingRules->{
            "Metadata"->DocMetadata@Normal@meta,
            "ColorType"->"GuideColor"
            },
          ScreenStyleEnvironment->"Editing"
          }
        ]
    ]


(* ::Subsubsection::Closed:: *)
(*TutorialNotebookTemplate*)



TutorialNotebookTemplate[name_String]:=
  Module[
    {
      cleanName,
      meta,
      nb
      },
    meta=AssociationThread[ToLowerCase@Flatten@Values@$MetadataMap, Automatic];
    cleanName=StringDelete[name, Except[WordCharacter]|"$"];
    meta["label"]=cleanName;
    meta["type"]="Tutorial";
    nb=
      Notebook[
        {
          $metaCell,
          $miscTemplates["TitleBar"]/.
            "<Context>"->"Tutorial",
          Cell[name, "Section", "TutorialName"],
          Cell["Tutorial text...", "Text"],
          $miscTemplates["Divider"],
          $NotebookTemplates["Related Guides"],
          $NotebookTemplates["Related Links"],
          $NotebookTemplates["Footer"]
          },
        {
          StyleDefinitions->FrontEnd`FileName[{"SimpleDocs"}, "SimpleDocs.nb"],
          TaggingRules->{
            "Metadata"->DocMetadata@Normal@meta,
            "ColorType"->"TutorialColor"
            },
          ScreenStyleEnvironment->"Editing"
          }
        ]
    ]


(* ::Subsubsection::Closed:: *)
(*SampleTemplateNotebook*)



(* ::Subsubsubsection::Closed:: *)
(*Symbol*)



SampleTemplateNotebook["Symbol"]:=
  Block[{SamplePaclet`Sym, SamplePaclet`Sym1, SamplePaclet`Sym2},
    SamplePaclet`Sym::usage="sample function";
    SamplePaclet`Sym::msg="sample message";
    SamplePaclet`Sym[arg_]:=Null;
    SamplePaclet`Sym~SetAttributes~Temporary;
    SamplePaclet`Sym1=1;
    SamplePaclet`Sym2=2;
    CreateTemplateNotebook["Symbol", SamplePaclet`Sym]
    ]


(* ::Subsubsubsection::Closed:: *)
(*Guide*)



SampleTemplateNotebook["Guide"]:=
  CreateTemplateNotebook["Guide", "Sample Guide"];


(* ::Subsubsubsection::Closed:: *)
(*Tutorial*)



SampleTemplateNotebook["Tutorial"]:=
  CreateTemplateNotebook["Tutorial", "Sample Tutorial"];


(* ::Subsection:: *)
(*GUI*)



(* ::Subsubsection::Closed:: *)
(*$MetadataEditor*)



(* ::Subsubsubsection::Closed:: *)
(*boxGrid*)



boxGrid=
Column[
KeyValueMap[
OpenerView[
{#, 
Grid[
Map[
{#,
With[{tag=ToLowerCase@StringDelete[#, " "]},
InputField[
Dynamic@CurrentValue[EvaluationNotebook[], {TaggingRules,"Metadata", tag}, Automatic]
]
]
}&,
#2
],
Alignment->Left
]
}
]&,
$MetadataMap
]
];


(* ::Subsubsubsection::Closed:: *)
(*showButton*)



hideButton[Hold[var_]]:=
  Button["",
    var=False, 
    ImageSize->{7, 7},
    FrameMargins->0,
    ImageMargins->0,
    Appearance->
      {
        "Default"->
          Image[ToExpression[FrontEndResource["FEBitmaps", "SquareMinusIconSmall"]]]
        }
    ]


showButton[Hold[var_]]:=
  Button["",
    var=True, 
    ImageSize->{7, 7},
    FrameMargins->0,
    ImageMargins->0,
    Appearance->
      {
        "Default"->
          Image[ToExpression[FrontEndResource["FEBitmaps", "SquarePlusIconSmall"]]]
        }
    ]


(* ::Subsubsubsection::Closed:: *)
(*$MetadataEditor*)



$MetadataEditor=
  DynamicModule[{show},
    With[
      {
        bg=boxGrid, 
        hb=hideButton[Hold@show], sb=showButton[Hold@show]
        },
      Dynamic@
        Grid[{
            {
              If[TrueQ@show, hb, sb], "Metadata",
              ButtonBar[
                {
                  "Populate":>
                    (
                      Needs["SimpleDocs`"];
                      PopulateNotebookMetadata[EvaluationNotebook[]]
                      ),
                  "Clear":>
                    (
                      Needs["SimpleDocs`"];
                      ClearNotebookMetadata[EvaluationNotebook[]]
                      )
                  },
                ImageSize->{100, Automatic}
                ]},
            {Null, If[TrueQ@show, bg], SpanFromLeft}
            },
          Alignment->Left
          ]
      ]
    ];


(* ::Subsubsection::Closed:: *)
(*$InsertionMenu*)



(* ::Subsubsubsection::Closed:: *)
(*$insertTemplate*)



$insertionMenuTemplates=
  Join@@
    Replace[
      Riffle[
        KeyValueMap[
          #:>NotebookWrite[InputNotebook[], #2]&,
          #
          ]&/@{
          $primaryTemplates,
          $sectionTemplates,
          $baseTemplates,
          $miscTemplates
          },
        Delimiter
        ],
      Delimiter->{Delimiter},
      1
      ]


(* ::Subsubsubsection::Closed:: *)
(*$InsertionMenu*)



$InsertionMenu=
ActionMenu[
Framed[
Grid[{{Item["Insert", ItemSize->{Scaled[.5], Automatic}, Alignment->{Left, Center}], Item[Style["\[DownPointer]", GrayLevel[.5]], ItemSize->{Scaled[.5], Scaled[.2]}, Alignment->{Right, Bottom}]}}],
ImageSize->{150, 50},
 RoundingRadius->5, FrameStyle->GrayLevel[.8],Background->White],
$insertionMenuTemplates,
ImageSize->{150, 50},
Appearance->None
];


(* ::Subsubsection::Closed:: *)
(*$HamburgerMenu*)



$HamburgerMenu=
  ActionMenu[
    Button["\[Congruent]",None,Appearance->None, ImageSize->{50, 35}],
    {
      "Save Documentation":>
        (
          Needs["SimpleDocs`"];
          NotebookOpen@SaveNotebookToPaclet[EvaluationNotebook[]]
          ),
      "Save To Project":>
        (
          Needs["SimpleDocs`"];
          SaveNotebookToPacletProject[EvaluationNotebook[]]
          ),
      "Save Markdown":>
        (
          Needs["SimpleDocs`"];
          NotebookOpen@SaveNotebookMarkdown[EvaluationNotebook[]]
          ),
      Delimiter,
      "Set Paclet":>
        (
          Needs["SimpleDocs`"];
          SetNotebookPaclet[EvaluationNotebook[]]
          ),
      "Update PacletInfo":>
        (
          Needs["SimpleDocs`"];
          Replace[SetPacletInfo[EvaluationNotebook[]],
            s_String:>NotebookOpen@s
            ]
          ),
      Delimiter,
      "New Symbol":>
        (
          Needs["SimpleDocs`"];
          SampleTemplateNotebook["Symbol"]
          ),
      "New Guide":>
        (
          Needs["SimpleDocs`"];
          SampleTemplateNotebook["Guide"]
          ),
      "New Tutorial":>
        (
          Needs["SimpleDocs`"];
          SampleTemplateNotebook["Tutorial"]
          ),
      Delimiter,
      "Open SiteConfig":>
        (
          Needs["SimpleDocs`"];
          OpenDocsSiteConfig[EvaluationNotebook[]]
          ),
      "Build Site":>
        (
          Needs["SimpleDocs`"];
          BuildNotebookDocsSite[EvaluationNotebook[]]
          )
      },
    Appearance->None,
    Method->"Queued"
    ];


(* ::Subsubsection::Closed:: *)
(*$DockedCell*)



$DockedCell=
  Grid[
    {
      {
        Item[
          Framed[$MetadataEditor, 
            ImageSize->{Scaled[1], {50, 1000}},
            RoundingRadius->5,Background->White,FrameStyle->GrayLevel[.8]
            ], 
          ItemSize->{Scaled[.7], Automatic}
          ], 
        Item[
          $InsertionMenu, 
          ItemSize->Scaled[.27],
          Alignment->{Left, Top}
          ],
        Item[$HamburgerMenu, ItemSize->Scaled[.03],Alignment->Right]
        }
      }, 
    Alignment->{Left, Top}, 
    BaseStyle->{FontFamily->"Helvetica", FontSize->14}
    ];


(* ::Subsection:: *)
(*Paclets*)



SetPacletInfo//Clear
SetPacletInfo[pac:_String|_PacletManager`Paclet]:=
  Module[{pi=PacletManager`PacletInformation@pac},
    PacletExecute["GeneratePacletInfo", Lookup[pi, "Location"],
      "Version"->Lookup[pi, "Version"]
      ]
    ];
SetPacletInfo[nb_NotebookObject, ploc_:Automatic]:=
  Module[{pac=getNotebookPaclet[nb, ploc]},
    SetPacletInfo[pac]
    ];


End[];



