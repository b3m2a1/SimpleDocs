(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Text:: *)
(*A package for using python in its many guises*)



$PyVenv::usage="";
PyVenvNew::usage="";
PyVenvRun::usage="";
PyVenvStart::usage="";
PyVenvKill::usage="";


$PySimpleServer::usage=
	"The current simple server instance";
PySimpleServerStart::usage=
	"Starts a new SimpleHTTPServer in a specific directory and opens it";
PySimpleServerOpen::usage=
	"Opens a file using a SimpleHTTPServer or opens the server itself";
PySimpleServerRunning::usage=
	"Specifies whether there's current server running";
PySimpleServerKill::usage=
	"Kills the current server";


Begin["`Private`"];


$PyVenvRoot=
	If[DirectoryQ@"~/Documents/Python/config",
		"~/Documents/Python/config",
		FileNameJoin@{$HomeDirectory,"virtualenvs"}
		];


Options[PyVenvNew]=
	{
		"Version"->None
		};
PyVenvNew[
	name_String?(DirectoryQ@*DirectoryName),
	ops:OptionsPattern[]
	]:=
	(
		SetDirectory[name];
		(ResetDirectory[];#)&@
			RunProcess[{
				"virtualenv",
				FileBaseName@name
				}]
		)


PyVenvNew[name_String?(StringMatchQ[Except[$PathnameSeparator]..])]:=
	(
		If[!DirectoryQ[$PyVenvRoot],
			CreateDirectory[$PyVenvRoot]
			];
		PyVenvNew[FileNameJoin@{$PyVenvRoot,name}]
		)


$PyVenv:=If[PyVenvActive[],$pyVenv,None]


PyVenvActive[]:=
	MatchQ[$pyVenv["Process"],_ProcessObject?(ProcessStatus[#,"Running"]&)];


$PyVenvRoot=
	If[DirectoryQ@"~/Documents/Python/config",
		"~/Documents/Python/config",
		"~/virtualenvs"
		];


PyVenvKill[]:=
	KillProcess@$pyVenv["Process"];


pyVenvDirQ[dir_String?DirectoryQ]:=
	FileExistsQ[FileNameJoin@{dir,"bin","activate"}];
pyVenvDirQ[_]:=False;


PyVenvStart[dir_String?pyVenvDirQ,startDir:_String?DirectoryQ|Automatic:Automatic]:=
	(
		PyVenvKill[];
		$pyVenv=
			With[{d=Replace[startDir,Automatic:>Directory[]]},
				SetDirectory[dir];
				(ResetDirectory[];#)&@
					<|
						"Process"->
							With[{
								po=StartProcess[$SystemShell]
								},
								WriteLine[po,"source bin/activate"];
								WriteLine[po, "cd \""<>d<>"\""];
								po
								],
						"Venv"->dir
						|>
				]
		);
PyVenvStart[name_String]:=
	If[pyVenvDirQ@FileNameJoin@{$PyVenvRoot,name},
		PyVenvStart@FileNameJoin@{$PyVenvRoot,name},
		$Failed
		]


PyVenvWrite[s_String]:=
	If[PyVenvActive[],
		WriteLine[$pyVenv["Process"],s],
		$Failed
		];
PyVenvWrite[l_List]:=
	PyVenvWrite[PyVenvWriteEscape[l]]


Clear[PyVenvWriteEscape];
PyVenvWriteEscape[s_String]:=
	s;
PyVenvWriteEscape[File[f_String]]:=
	"\""<>ExpandFileName[f]<>"\"";
PyVenvWriteEscape[URL[u_String]]:=
	"\""<>u<>"\"";
PyVenvWriteEscape[l_List]:=
	StringRiffle@Map[PyVenvWriteEscape,l]
PyVenvWriteEscape[r_Rule]:=
	PyVenvWriteEscape[First[r]]<>"--="<>PyVenvWriteEscape[Last[r]];
PyVenvWriteEscape[Break]:=
	"\n";
PyVenvWriteEscape[e_]:=ToString[e];


PyVenvRead[]:=
	If[PyVenvActive[],
		AssociationMap[
			ReadString[ProcessConnection[$pyVenv["Process"],#],EndOfBuffer]&,
			{
				"StandardOutput",
				"StandardError"
				}
			],
		$Failed
		];


$PyVenvRunDelay=.1;
$PyVenvReadIterations=1;
Options[PyVenvRun]=
	{
		TimeConstraint->1,
		"PollTime"->.01
		};
PyVenvRun[s:_String|_List,ops:OptionsPattern[]]:=
	Catch@
	If[PyVenvActive[],
		Block[{
			poll=Replace[OptionValue["PollTime"],Except[_?NumericQ]->.01],
			reads,
			startflag=CreateUUID["process-start-"],
			doneflag=CreateUUID["process-"]
			},
			PyVenvWrite["echo \""<>startflag<>"\""];
			PyVenvWrite[">&2 echo \""<>startflag<>"\""];
			PyVenvWrite[s];
			PyVenvWrite[">&2 echo \""<>doneflag<>"\""];
			PyVenvWrite["echo \""<>doneflag<>"\""];
			Pause[poll];
			reads=Replace[PyVenvRead[],$Failed:>Throw[$Failed]];
			TimeConstrained[
				While[!StringContainsQ[reads["StandardOutput"],doneflag],
					reads=Merge[{reads,Replace[PyVenvRead[],$Failed:>Throw[$Failed]]},StringJoin]
					],
				Replace[OptionValue[TimeConstraint],
					Except[_?NumericQ]->1
					],
				reads=Merge[{reads,Replace[PyVenvRead[],$Failed:>Throw[$Failed]]},StringJoin]
				];
			StringTrim[
				StringTrim[
					Last@StringSplit[#,startflag,2],
					"\n"|("\n"<>doneflag)
					],
				("\n"~~EndOfString)|
					startflag|
					doneflag
				]&/@reads
			],
		$Failed
		];
PyVenvRun[
	dir_String?pyVenvDirQ,
	cmd:_String|_List,
	ops:OptionsPattern[]
	]:=
	With[{active1=PyVenvActive[]},
		If[!PyVenvActive[]||$PyVenv["Directory"]=!=dir,
			PyVenvStart[dir]
			];
		(If[!active1,PyVenvKill[]];#)&@PyVenvRun[cmd,ops]
		];
PyVenvRun[
	s_String,
	cmd:_String|_List,
	ops:OptionsPattern[]
	]:=
	If[pyVenvDirQ[FileNameJoin@{$PyVenvRoot,s}],
		PyVenvRun[FileNameJoin@{$PyVenvRoot,s},cmd,ops]
		];


$PySimpleServer::unsupported=
	"$OperatingSystem isn't supported by SimpleHTTPServer";


$PySimpleServer:=
	If[PySimpleServerRunning[],$pySimpleServer,None];


PySimpleServerRunning[]:=
	MatchQ[$pySimpleServer["Process"],_ProcessObject?(ProcessStatus[#,"Running"]&)];


PySimpleServerKill[]:=
	If[PySimpleServerRunning[],
		KillProcess@$pySimpleServer["Process"]
		]


Options[PySimpleServerStart]=
	{
		"Port"->Automatic,
		"Path"->None
		};
PySimpleServerStart[
	root:(_String|_File)?DirectoryQ|Automatic:Automatic,
	ops:OptionsPattern[]
	]:=
	With[{
		port=
			Replace[OptionValue["Port"],{
				Automatic->"7001",
				e_:>ToString[e]
				}],
		path=
			Replace[OptionValue["Path"],{
				Automatic->{},
				s_String?FileExistsQ:>
					FileNameSplit[s],
				p_String:>
					URLParse[p,"Path"]
				}],
		dir=Replace[root,Automatic:>Directory[]]
		},
		If[$OperatingSystem=!="Windows",
			PySimpleServerKill[];
			$pySimpleServer=
				<|
					"Process"->
						(
							SetDirectory[dir];
							(ResetDirectory[];#)&@
								StartProcess[
									{"python","-m","SimpleHTTPServer",port}
									]
							),
					"Root"->dir,
					"Port"->port
					|>;
			If[path=!=None,
				SystemOpen@
					URLBuild@<|
						"Scheme"->"http",
						"Domain"->"localhost",
						"Port"->port,
						"Path"->path
						|>
				];
			$pySimpleServer,
			Message[PySimpleServer::unsupported];
			$Failed
			]
	];


Options[PySimpleServerOpen]=
	Options[PySimpleServerStart];
PySimpleServerOpen[
	path:_String?FileExistsQ|Automatic:Automatic,
	ops:OptionsPattern[]
	]:=
	With[{
		p=
			Replace[path,
				Automatic:>If[PySimpleServerRunning[],$pySimpleServer["Root"],Directory[]]
				]
		},
		If[PySimpleServerRunning[]&&
			StringStartsQ[
				ExpandFileName[p],
				ExpandFileName[$pySimpleServer["Root"]]
				],
			SystemOpen@
				URLBuild@
					<|
						"Scheme"->"http",
						"Domain"->"localhost",
						"Port"->$pySimpleServer["Port"],
						"Path"->
							FileNameSplit@
								FileNameDrop[
									ExpandFileName[p],
									FileNameDepth@ExpandFileName[$pySimpleServer["Root"]]
									]
						|>,
			PySimpleServerStart[
				If[DirectoryQ@p,p,DirectoryName[p]],
				"Path"->
					If[DirectoryQ@p,Automatic,FileNameTake@p],
				ops
				]
			]
		]


End[];



