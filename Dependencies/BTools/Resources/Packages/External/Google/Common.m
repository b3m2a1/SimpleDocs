(* ::Package:: *)

(* Autogenerated Package *)

$GoogleAPIUsername::usage=
  "The username for current Google API access";
$GAClientID::usage=
  "The client ID for current Google API access";
$GAClientSecret::usage=
  "The client ID for current Google API access";
GoogleAPIClearAuth::usage=
  "Clears authentication data for the current user";


$GAVersion::usage="";
$GAParameters::usage="";


GAOAuthenticate::usage="";
GAOAuthTokenData::usage="";
$GAOAuthToken::usage="";
GAOAuthCodeURL::usage="";
GAOAuthRefreshRequest::usage="";


$GAParamMap::usage="";
GAPrepParams::usage="";
GARequest::usage="";
GACall::usage="";
$GAApplyRequests::usage="";


$GAActiveHead::usage="";
GAParse::usage="";
GAErrorString::usage="";
$GALastError::usage="";


Begin["`Private`"];


(* ::Subsection:: *)
(*Settings*)



$GASettings=
  Replace[
    Do[
      With[{f=PackageFilePath["Private", "Config", d]},
        If[FileExistsQ@f,
          Return[
            Replace[Quiet@Import@f,
              { 
                o_?OptionQ:>Association@o,
                _-><||>
                }
              ]
            ];
          Break[]
          ]
        ],
      {d,
        {
          "GoogleConfig.m",
          "GoogleConfig.wl"
          }
        }
      ],
    Null-><||>
    ];


(* ::Subsection:: *)
(*Parameters*)



(* ::Subsubsection::Closed:: *)
(*Keys*)



$GoogleAPIUsernameName="GoogleAPIUsername";
$GAClientIDName="GoogleAPIClientID";
$GAClientSecretName="GoogleAPIClientSecret";


If[FreeQ[Attributes[$GACache], ReadProtected],
  SetAttributes[$GACache, ReadProtected]
  ];
If[FreeQ[Attributes[$GACache], Locked],
  SetAttributes[$GACache, Locked]
  ];


$GACacheSym:=
  If[TrueQ@$GASettings["UseKeychain"], $Keychain, $GACache]


GALoadParameter[key_]:=
  With[{s=$GACacheSym},
    Replace[
      s[key],
      Except[_String?(StringLength@#>0&)]:>
        (
        s[key]=
          Replace[
            SelectFirst[
              PackageFilePath["Private",#]&/@
                {
                key<>".wl",
                key<>".m"
                },
              FileExistsQ,
              None
              ],{
            f_String:>
              Import[f]
            }]
          )
      ]
    ];
GALoadParameter[key1_, key2_]:=
  Replace[
    $Keychain[{key1, key2}],
    Except[_String?(StringLength@#>0&)]:>
      (
      $Keychain[{key1, key2}]=
        Replace[
          Replace[
            SelectFirst[
              PackageFilePath["Private",#]&/@
                {
                key1<>".wl",
                key1<>".m"
                },
              FileExistsQ,
              None
              ],
          {
            f_String:>
              Import[f]
            }
          ],
        Except[_String?(StringLength@#>0&)]:>
          Replace[$Keychain[key1],
            Except[_String?(StringLength@#>0&)]->None
            ]
        ]
        )
    ];


If[!MatchQ[OwnValues[$GoogleAPIUsername],{_:>(_String?(StringLength@#>0&))}],
  $GoogleAPIUsername:=
    $GoogleAPIUsername=
      GALoadParameter[$GoogleAPIUsernameName]
  ];


GAGetClientID[userName_]:=
  GALoadParameter[$GAClientIDName, userName]


If[!MatchQ[OwnValues[$GAClientID],{_:>(_String?(StringLength@#>0&))}],
  $GAClientID:=GAGetClientID[$GoogleAPIUsername]
  ];


GAGetClientSecret[clientID_]:=
  GALoadParameter[$GAClientSecretName, clientID]


If[!MatchQ[OwnValues[$GAClientSecret],{_:>(_String?(StringLength@#>0&))}],
  $GAClientSecret:=GAGetClientSecret[$GAClientID]
  ];


(* ::Subsubsection::Closed:: *)
(*Token*)



If[!MatchQ[OwnValues[$GAOAuthToken],{_:>(_String?(StringLength@#>0&))}],
  $GAOAuthToken:=
    GAOAuthenticate[$GoogleAPIUsername]
  ];


(* ::Subsubsection::Closed:: *)
(*Parameters*)



$GAVersion=3;


$GAParameters=
  <|
    "Root"->
      <|
        "Scheme"->"https",
        "Domain"->"www.googleapis.com",
        "Path"->{}
        |>,
    "OAuthCode"->
      <|
        "Domain"->"accounts.google.com",
        "Path"->
          {"o","oauth2","v2","auth"},
        "Query"->
          {
            "response_type"->"code",
            "redirect_uri"->"http://localhost/oauth2callback"
            }
        |>,
    "OAuthToken"->
      <|
        "Path"->{"oauth2","v4","token"}
        |>,
    "Drive"->
      <|
        "Path":>
          {"drive","v"<>StringTrim[ToString@$GAVersion,"v"]},
        "Query"->{}
        |>,
    "AnalyticsReporting"->
      <|
        "Domain"->
          "analyticsreporting.googleapis.com",
        "Path":>
          {"v"<>StringTrim[ToString@$GAVersion,"v"]},
        "Query"->{}
        |>,
    "UploadFile"->
      <|
        "Path":>
          {"upload","drive",
            "v"<>StringTrim[ToString@$GAVersion,"v"],
            "files"},
        "Query"->{}
        |>,
    "RequestData"->
      <|
        "Headers"->{
          "Authorization":>
            "Bearer "<>$GAOAuthToken
          }
        |>
    |>;


(* ::Subsubsection::Closed:: *)
(*URLAssoc*)



GAURLAssoc[
  Optional[None,None],
  params___?OptionQ
  ]:=
  ReplacePart[#,
    {(*
			"Path"\[Rule]#["Path"],*)
      "Domain"->Replace[#["Domain"],{___,d_}:>d]
      }
    ]&@
  Merge[
    Flatten@{
      $GAParameters["Root"],
      Cases[Flatten@Map[Normal]@{params},
        r:(Rule|RuleDelayed)[k_,_]:>
          If[MatchQ[k,
              "Scheme"|"Domain"|"Query"|"Path"|"Username"|"Password"|"Port"
              ],
            r,
            "Query"->r
            ]
        ]
      },
    Replace[{l_}:>l]@*Flatten
    ];
GAURLAssoc[s:_String|{__String},o___?OptionQ]:=
  GAURLAssoc[
    Lookup[$GAParameters,Flatten@{s}],
    o
    ];


(* ::Subsection:: *)
(*Auth*)



(* ::Subsubsection::Closed:: *)
(*Clear*)



GoogleAPIClearAuth[
  user:(_String|Automatic):Automatic,
  clientID:_String|Automatic:Automatic,
  scope:_String?GAOAuthScopeQ:"drive"
  ]:=
  With[{
    u=
      StringTrim[
        Replace[user, Automatic:>$GoogleAPIUsername],
        "@gmail.com"
        ],
    cid=
      Replace[clientID, Automatic:>$GAClientID],
    kc=$GACacheSym
      },
    kc[{u,cid,scope,"token"}]=.;
    kc[{u,cid,scope,"code"}]=.;
    ];


(* ::Subsubsection::Closed:: *)
(*Scopes*)



$GAOAuthScopes=
  <|
    "drive"->
      {
        "file",
        "appdata",
        "metadata",
        "metadata.readonly",
        "photos.readonly",
        "readonly",
        "scripts"
        }
    |>;


GAOAuthScopeQ[s_]:=
  (KeyMemberQ[$GAOAuthScopes,ToLowerCase@s]||
    With[{sp=StringSplit[ToLowerCase@s,".",2]},
      MemberQ[
        $GAOAuthScopes[First@sp],
        Last@sp
        ]
      ]
    );


(* ::Subsubsection::Closed:: *)
(*Requests*)



GAOAuthCodeURL[
  clientID_,
  scope_
  ]:=
  With[{
    cid=
      Replace[clientID,
        Automatic:>
          $GAClientID
        ],
    s=URLBuild@{"https://www.googleapis.com/auth",scope}
    },
    URLBuild@
      GAURLAssoc["OAuthCode",
        "client_id"->cid,
        "scope"->s
        ]
    ];


GAOAuthTokenRequest[code_]:=
  HTTPRequest[
    URLBuild@GAURLAssoc["OAuthToken"],
    <|
      "Method"->"Post",
      "Body"->{
        "code"->code,
        "client_id"->$GAClientID,
        "client_secret"->$GAClientSecret,
        "grant_type"->"authorization_code",
        "redirect_uri"->"http://localhost/oauth2callback"
        }
      |>
    ];
GAOAuthRefreshRequest[token_]:=
  HTTPRequest[
    URLBuild@GAURLAssoc["OAuthToken"],
    <|
      "Method"->"Post",
      "Body"->{
        "refresh_token"->token,
        "client_id"->$GAClientID,
        "client_secret"->$GAClientSecret,
        "grant_type"->"refresh_token"
        }
      |>
    ];


(* ::Subsubsection::Closed:: *)
(*Auth*)



GAOAuthenticate[
  user:(_String|Automatic):Automatic,
  clientID:_String|Automatic:Automatic,
  scope:_String?GAOAuthScopeQ:"drive"
  ]:=
  With[{
    u=
      StringTrim[
        Replace[user, Automatic:>$GoogleAPIUsername],
        "@gmail.com"
        ],
    cid=
      Replace[clientID, Automatic:>$GAClientID]
      },
    With[{a=GAOAuthTokenData[u, cid, scope]},
      Block[{
        $GAOAuthTokenDataTmp=a,
        $GAOAuthTokenCalls=
          If[!IntegerQ@$GAOAuthTokenCalls, 0, $GAOAuthTokenCalls]
        },
        If[$GAOAuthTokenCalls<4&&AssociationQ@a,
          $GAOAuthTokenCalls++;
          If[
            Quantity[ToExpression@#,"Seconds"]>(Now-#2)&@@
              Lookup[a,{"expires_in","LastUpdated"}, 3600],
            Lookup[a,"access_token"],
            If[KeyMemberQ[a,"refresh_token"],
              Replace[Import[GAOAuthRefreshRequest@a["refresh_token"],"RawJSON"],{
                r_Association:>
                  With[{kc=$GACacheSym},
                    kc[{u,cid,scope,"token"}]=
                      Append[r,"LastUpdated"->Now];
                    GAOAuthenticate[u,cid,scope]
                    ],
                _->$Failed
                }],
              If[$GAOAuthTokenCalls>1&&KeyMemberQ[a,"access_token"],
                a["access_token"],
                GoogleAPIClearAuth[u,cid,scope];
                GAOAuthenticate[u,cid,scope]
                ]
              ],
            $Failed
            ],
          $Failed
          ]
        ]
      ]
    ];


(* ::Subsubsection::Closed:: *)
(*OAuthTokenData*)



$GAKeyExample=
  Import@
    PackageFilePath["Resources", "Images", "GoogleOAuthExample.png"];


GAOAuthTokenData[
  user:_String|Automatic:Automatic,
  clientID:_String|Automatic:Automatic,
  scope:_String?GAOAuthScopeQ:"drive"
  ]:=
  Replace[$GAOAuthTokenDataTmp,
    Except[_String]:>
      With[
        {
          u=
            StringTrim[
              Replace[user,Automatic:>$GoogleAPIUsername],
              "@gmail.com"
              ],
          cid=
            Replace[clientID,Automatic:>$GAClientID],
          kc=$GACacheSym
          },
        Replace[kc[{u,cid,scope,"token"}],
          Except[_Association?(KeyMemberQ["access_token"])]:>
            Replace[
              Replace[kc[{u,clientID,scope,"code"}],
                Except[_String?(StringLength@#>0&)]:>
                  Replace[
                    OAuthDialog[
                      "Google OAuth Authorization",
                      {
                        {"Google OAuth",GAOAuthCodeURL[cid,scope]},
                        $GAKeyExample
                        },
                      $GAParameters["Root","Domain"]
                      ],
                    s_String?(StringLength@#>0&):>
                      (kc[{u,cid,scope,"code"}]=s)
                    ]
                ],{
              code_String?(StringLength@#>0&):>
                Replace[Import[GAOAuthTokenRequest[code],"RawJSON"],
                  r_Association?(KeyMemberQ["access_token"]):>
                    (
                      kc[{u,cid,scope,"token"}]=
                        Append[r,"LastUpdated"->Now]
                      )
                  ]
              }]
          ]
        ]
    ];


(* ::Subsection:: *)
(*Requests*)



(* ::Subsubsection::Closed:: *)
(*PrepParams*)



$GAParamMap=<||>;


GAPrepType//Clear
GAPrepType[n_?NumericQ]:=
  ToString[n];
GAPrepType[n_?DateObjectQ]:=
  DateString[n, "ISODate"];
GAPrepType[q_Quantity]:=
  ToString@
    QuantityMagnitude@
      If[CompatibleUnitQ[q, "Seconds"], 
        UnitConvert[q, "Seconds"],
        q
        ];
GAPrepType[l_List]:=
  GAPrepType/@l;
GAPrepType[(Rule|RuleDelayed)[k_, v_]]:=
  k->GAPrepType[v];
GAPrepType[e_]:=e;


GAPrepParamVals[ops_]:=
  Replace[
    ops,
    {
      (h:Rule|RuleDelayed)[s_String, o_]:>
        s->GAPrepType[o]
      },
    1
    ];
GAPrepParams[ops_]:=
  DeleteCases[
    GAPrepParamVals@Flatten@Normal@{ops},
    _->Automatic
    ];
GAPrepParams[ops_, fn_, key_]:=
  GAPrepParams@
    FilterRules[{ops, Options[fn]}, Lookup[$GAParamMap, key, Options[fn]]]; 
GAPrepParams[ops_, fn_]:=
  GAPrepParams[ops, fn, None]


(* ::Subsubsection::Closed:: *)
(*GARequest*)



GARequest[
  root:_String|None:None,
  passoc_Association,
  assoc:_Association:<||>
  ]:=
  HTTPRequest[
    With[
      {
        urla=
          GAURLAssoc[
            root,
            Sequence@@Norm[passoc]
            ]
        },
      URLBuild[KeyDrop[urla, "Port"]]<>
        Replace[urla["Port"],
          {
            s_String:>":"<>s,
            i_Integer:>":"<>ToString[i],
            _->""
            }
          ]
      ],
    Merge[{
      $GAParameters["RequestData"]/.
        HoldPattern[$GAOAuthToken]:>$GAOAuthToken,
      assoc
      },
      Replace[{
        {f_}:>
          f,
        o:{__?OptionQ}:>
          Merge[o,Last]
        }]@*Flatten
      ]
    ];


GARequest[
  root:_String|None:None,
  path:_String|{__String}|Nothing,
  query:_Rule|{___Rule}:{},
  assoc:_Association:<||>
  ]:=
  HTTPRequest[
    GAURLAssoc[
      root,
      "Path"->path,
      "Query"->query
      ],
    Merge[{
      $GAParameters["RequestData"]/.
        HoldPattern[$GAOAuthToken]:>$GAOAuthToken,
      assoc
      },
      Replace[{
        {f_}:>
          f,
        o:{__?OptionQ}:>
          Merge[o,Last]
        }]@*Flatten
      ]
    ];


(* ::Subsubsection::Closed:: *)
(*GACall*)



GACall[
  h_HTTPRequest,
  read:"Body"|"BodyBytes"|"BodyByteArray"|Automatic:Automatic
  ]:=
  If[read===Automatic,
    GAParse@URLRead@h,
    URLRead[h, {"StatusCode",read}]
    ];


GACall[
  root:_String|None:None,
  path:_String|{__String}|Nothing:Nothing,
  query:_Rule|{___Rule}:{},
  assoc:_Association:<||>,
  read:"Body"|"BodyBytes"|"BodyByteArray"|Automatic:Automatic
  ]:=
  GACall[
    GARequest[root,path,query,assoc,read],
    read
    ];


(* ::Subsubsection::Closed:: *)
(*GAParse*)



GAErrorString[h_HTTPResponse]:=
  TemplateApply[
    "(`code`) `message`",
    Lookup[
      Import[h,"RawJSON"],
      "error",
      <|
        "code"->"N/A",
        "message"->"Unknown error format"
        |>
      ]
    ]


GAParse[a_Association]:=
  Association@
    KeyValueMap[
      StringReplace[
        StringJoin[
          Replace[
            HoldPattern[Capitalize[s_String]]:>
              (ToUpperCase@StringTake[s,1]<>StringDrop[s,1])
            ]@*Capitalize/@StringSplit[#,"_"]
          ],{
        "Id"~~EndOfString->"ID",
        "Url"->"URL",
        "Html"->"HTML"
        }]->
        Which[
          StringEndsQ[#,"_at"],
            DateObject@#2,
          StringEndsQ[#,"url"],
            URL[#2],
          True,
            GAParse@#2
          ]&,
    a
    ];
GAParse[h_HTTPResponse]:=
  <|
    "StatusCode"->
      h["StatusCode"],
    "Content"->
      If[MatchQ[h["StatusCode"],0|(_?(Between@{200,299}))],
        Switch[
          h["ContentType"],
            _?(StringContainsQ@"text/x-objcsrc"),
              h["BodyByteArray"],
            _?(StringContainsQ@"text/"),
              Import[h,"Text"],
            _,
              GAParse@
                Replace[
                  Quiet@Import[h,"RawJSON"],
                  Except[_String|_Association|_List]:>
                    Import[h,"Text"]
                  ]
          ],
        With[
          {
            head=
              If[$GAActiveHead===Unevaluated[$GAActiveHead], 
                GoogleDrive, 
                $GAActiveHead
                ],
            errStr=GAErrorString@h
            },
          $GALastError=errStr;
          Message[head::err, errStr]
          ];
        $Failed
        ]
    |>;
GAParse[s_String]:=
  If[StringLength@StringTrim@s>0,
    Which[
      Quiet[
        AllTrue[
          URLParse[s,{"Scheme","Domain"}],
          StringQ
          ],
        URLParse::nvldval
        ],
        URL[s],
      StringContainsQ[s,Verbatim["@"]]&&
      Not@FailureQ@
        Interpreter["EmailAddress"][s],
          Interpretation[
            Hyperlink[s,"mailto:"<>s],
            s
            ],
      True,
        s
      ],
    s
    ];
GAParse[l_List]:=
  GAParse/@l;
GAParse[e_]:=
  e;


End[];



