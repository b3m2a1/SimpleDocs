(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



KeychainConnect::usage="Uses the keychain to cloud connect";


KeychainAdd::usage=
	"Adds auth data to the Keychain";
KeychainRemove::usage=
	"Removes auth data from the Keychain";
KeychainGet::usage=
	"Gets auth data from the Keychain";


$Keychain::usage=
	"An interface object to a password keychain";
$KeychainSettings::usage=
	"An interface object for the options of the keychain";
$KeychainPassword::usage=
	"An interface object for the password of the keychain";
$KeychainDirectory::usage=
	"A settable directory to change where the $Keychain loads from";


$KeychainCloudAccounts::usage=
	"A collection of known accounts for KeychainConnect";


(*KeychainGenerateWord::usage="Futurized password-management function for building secure passwords"*)


Begin["`Private`"];


(* ::Subsection:: *)
(*Keychain*)



If[!ValueQ@$KeychainKey,
	$KeychainKey:=
		(
			$KeychainDirectory=Automatic;
			$KeychainKey="Keychain"
			)
	];
If[!ValueQ@$KeychainDirectory,
	$KeychainDirectory:=
		(
			$KeychainKey="Keychain";
			$KeychainDirectory=Automatic
			)
	];


(* ::Subsubsection::Closed:: *)
(*$Keychain*)



HoldPattern[$Keychain[k__]]:=
	EncodedCache[$KeychainKey][k];
$Keychain/:
	Set[$Keychain[k__],v_]:=
		Set[EncodedCache[$KeychainKey][k],v];
$Keychain/:
	SetDelayed[$Keychain[k__],v_]:=
		SetDelayed[EncodedCache[$KeychainKey][k],v];
$Keychain/:
	Unset[$Keychain[k__]]:=
		Unset[EncodedCache[$KeychainKey][k]];


$Keychain/:
	File@$Keychain:=
		EncodedCacheFile[$KeychainKey];
$Keychain/:
	DeleteFile[$Keychain]:=
		DeleteFile@File@$Keychain;


$Keychain/:
	Set[$Keychain,a_Association]:=
		Set[EncodedCache[$KeychainKey],a];
$Keychain/:
	Unset[$Keychain]:=
		Unset[EncodedCache[$KeychainKey]];


(* ::Subsubsection::Closed:: *)
(*$KeychainSettings*)



$KeychainSettings[k__]:=
	EncodedCache[$KeychainKey,"Options"][k];
$KeychainSettings/:
	Set[$KeychainSettings[k__],v_]:=
		Set[EncodedCache[$KeychainKey,"Options"][k],v];
$KeychainSettings/:
	Unset[$KeychainSettings[k__]]:=
		Unset[EncodedCache[$KeychainKey,"Options"][k]];


$KeychainSettings/:
	File@$KeychainSettings:=
		EncodedCacheOptionsFile[$KeychainKey];
$KeychainSettings/:
	DeleteFile@$KeychainSettings:=
		DeleteFile@File@$KeychainSettings;


(* ::Subsubsection::Closed:: *)
(*$KeychainPassword*)



$KeychainPassword[]:=
	EncodedCache[$KeychainKey,"Password"];
$KeychainPassword/:
	Set[$KeychainPassword[],v_]:=
		Set[
			EncodedCache[$KeychainKey,"Password"],
			v
			];
$KeychainPassword/:
	Unset[$KeychainPassword[]]:=
		Unset[EncodedCache[$KeychainKey,"Password"]];


$KeychainPassword/:
	File@$KeychainPassword:=
		EncodedCachePasswordFile[$KeychainKey];
$KeychainPassword/:
	DeleteFile@$KeychainPassword:=
		DeleteFile@File@$KeychainPassword;


(* ::Subsubsection::Closed:: *)
(*$KeychainDirectory*)



$KeychainDirectory/:
	Set[$KeychainDirectory,dir_]/;(!TrueQ@$inEncodedCacheDirectoryOverload):=
		Block[{$inEncodedCacheDirectoryOverload=True},
			If[dir=!=$KeychainDirectory,
				Replace[dir,{
					Automatic:>
						(
							$KeychainKey="Keychain";
							EncodedCacheOptionsLoad[$KeychainKey];
							EncodedCacheLoad[$KeychainKey];
							$KeychainDirectory=Automatic
							),
					f:FileName[{p___,n_}]:>
						(
							EncodedCacheLoad[FileNameJoin[{p,n}]];
							$KeychainKey=FileBaseName@n;
							$KeychainDirectory=f;
							),
					d:(_String|_File)?DirectoryQ:>
						Replace[EncodedCacheLoad[d],
							a_Association:>
								(
									EncodedCacheLoad[d];
									$KeychainKey=FileBaseName@d;
									$KeychainDirectory=d;
									)
							]
					}],
				dir
				]
			];


(* ::Subsubsection::Closed:: *)
(*KeychainAdd*)



$keyChainFailureForms=""|$Failed|$Canceled|_Missing;


KeychainAdd[site_->{username:Except[None],password:Except[$keyChainFailureForms]}]:=
	$Keychain[{site,username}]=password;
KeychainAdd[{site_->{username:Except[None],password:Except[$keyChainFailureForms]}}]:=
	$Keychain[{site,username}]=password;
KeychainAdd[sites:{(_->{Except[None],_}),(_->{Except[None],_})..}]:=
	With[{
		saveOps=$KeychainSettings["SaveOptionsToDisk"],
		saveDisk=$KeychainSettings["SaveToDisk"],
		storeLocal=$KeychainSettings["StoreInMemory"]
		},
		$KeychainSettings["SaveOptionsToDisk"]=False;
		If[storeLocal,
			$KeychainSettings["SaveToDisk"]=False
			];
		With[{s=KeychainAdd/@Most@sites},
			If[storeLocal,
				$KeychainSettings["SaveToDisk"]=saveDisk
				];
			$KeychainSettings["SaveOptionsToDisk"]=saveOps;
			Append[s,
				KeychainAdd@Last@sites
				]
			]
		];
KeychainAdd[
	sites:(
		_String|(_String->_String)|
			{(_String|(_String->_String))..}
		)
	]:=
	(Clear@$keyChainAuth;Replace[#,_KeychainAdd->$Failed])&@
		KeychainAdd@
			Normal@
				AuthDialog[
					Dynamic@$keyChainAuth,
					"",
					None,
					Sequence@@
						Replace[Flatten@{sites},
							(s_->u_):>
								{{s,Automatic},u},
							1
							]
					];
KeychainAdd[
	site_->{None,s_String}
	]:=
	(Clear@$keyChainAuth;Replace[#,_KeychainAdd->$Failed])&@
		KeychainAdd[
			site->
				{
					s,
					PasswordDialog[
						Dynamic@$keyChainAuth,
						s,
						s,
						"PromptString"->
							"Enter ``:",
						WindowTitle->s,
						FieldMasked->False
						]
					}
			];


(* ::Subsubsection::Closed:: *)
(*KeychainRemove*)



KeychainRemove[site_->username:Except[None]]:=
	$Keychain[{site,username}]=.;


(* ::Subsubsection::Closed:: *)
(*KeychainGet*)



$KeychainGetAccountKeys=
	{"AccountData", "WolframCloud"};


KeychainGet[site_String,lookup:True|False:False]:=
	If[lookup,
		FirstCase[#,_String?(StringLength@#>0&),
			KeychainAdd[site]
			],
		FirstCase[#,_String?(StringLength@#>0&)]
		]&@
		$Keychain[{site,Key@{site,""}}];
iKeychainGet[
	{
		site_String, 
		username_String,
		subparts___String
		},
	lookup:True|False:False
	]:=
	If[lookup,
		FirstCase[#,Except[$keyChainFailureForms],
			KeychainAdd[site->StringJoin[username, subparts]]
			],
		FirstCase[#,Except[$keyChainFailureForms]]
		]&@$Keychain[{Key@{site,StringJoin[username, subparts]}}];
KeychainGet[
	{
		site:Except[Alternatives@@Append[$KeychainGetAccountKeys, ""], _String], 
		username_String,
		subparts___String
		},
	lookup:True|False:False
	]:=
	iKeychainGet[{site, username, subparts}, lookup];
KeychainGet[
	site_->{None, username_String, subparts___String},
	lookup:True|False:False
	]:=
	With[{key=StringJoin[username, subparts]},
		Replace[
			iKeychainGet[{site,key}],
			e:$keyChainFailureForms:>
				If[lookup, KeychainAdd[site->{None,key}], e]
			]
		];
KeychainGet[
	{
		site:Alternatives@@$KeychainGetAccountKeys, 
		username_String,
		subparts___String
		},
	lookup:True|False:False
	]:=
	KeychainGet[
		site->{None, username, subparts},
		lookup
		]


PackageAddAutocompletions[
	"KeychainGet",
	{
		Map[
			ToString[{"\""<>#<>"\"", "accountName"}]&,
			$KeychainGetAccountKeys
			]
		}
	]


(* ::Subsubsection::Closed:: *)
(*KeychainConnect*)



$KeychainCloudAccounts=
	"TestingAccount"|"DeploymentsAccount"|
		"PacletsAccount"|"DatasetsAccount"|
		"ServiceConnectionsAccount"|"DocumentationAccount"|
		"PaidAccount"|"FreeAccount"|"PacletServer";


PackageAddAutocompletions[
	"KeychainConnect",
	{List@@$KeychainCloudAccounts}
	]


Options[KeychainConnect]=
	Options[CloudConnect];
KeychainConnect[
	acc:$KeychainCloudAccounts,
	ops:OptionsPattern[]
	]:=
	KeychainConnect[Key[acc],ops];
KeychainConnect[
	acct:_String|Key[_String]:Key["TestingAccount"],
	ops:OptionsPattern[]
	]:=
	With[
		{
			user=
				Replace[acct,Key[a_]:>KeychainGet[{"WolframCloud", a},True]],
			base=
				Replace[OptionValue[CloudBase],Automatic:>$CloudBase]
			},
		If[$WolframID=!=user||$CloudBase=!=base,
			CloudConnect[user,
				KeychainGet[{base,user},True],
				ops
				],
			$WolframID	
			]
		];
KeychainConnect[
	acct:_String|Key[_String],
	pass_String,
	ops:OptionsPattern[]
	]:=
	With[{
		user=
			Replace[acct,Key[a_]:>KeychainGet[{"WolframCloud", a}, True]],
		base=Replace[OptionValue[CloudBase],Automatic:>$CloudBase]
		},
		If[$WolframID=!=user||$CloudBase=!=base,
			CloudConnect[user,
				pass,
				ops
				]
			]
		];


End[];



