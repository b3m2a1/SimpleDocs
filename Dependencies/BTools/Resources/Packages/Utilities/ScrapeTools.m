(* ::Package:: *)

(* Autogenerated Package *)

FileGrep::usage=
  "A top-level grep function";
FileSystemGrep::usage=
  "Combines FileSystemMap and FileGrep";


GrepDirectory::usage=
  "Greps a directory for a pattern (can be applied to a list of files or directories)";


GrepSelect::usage=
  "Selects from a set of files (ignores directories) which contain a pattern";


SystemExpressionsSearch::usage=
  "Scrapes data from internal files";
SystemHeadSearch::usage=
  "Scrapes for usage of a head";
SystemArgSearch::usage=
   "Scrapes for the thing as an argument";
SystemContextSearch::usage=
  "Scrapes for usage of a context";
SystemFunctionSearch::usage=
  "Scrapes for usage of a function";


SpelunkDefinitions::usage="Works with GeneralUtilities to spelunk definitions";
SpelunkObject::usage=
  "Object returned after spelunking definitions";
SpelunkCallsCases::usage=
  "Finds spelunked symbols matching a pattern";
SpelunkGraph::usage=
  "Returns the graph of a SpelunkObject";


(*SpelunkTrace::usage=
	"Merges trace with spelunk";*)


SpelunkValues::usage=
  "Plumbs the entire *Values structure of a symbol";
SpelunkValuesContains::usage=
  "Selects symbols whose *Values contain a pattern";
SpelunkValuesCases::usage=
  "Cases on the *Values";


WithOverrideDefs::usage=
  "Uses definition overrides for spelunking";


Begin["`Private`"];


filePattern=(_String?FileExistsQ|_File);


fileGrepSingleLine[file_,pat_,containsQ_]:=
  Block[{
    fileGrepOpened=OpenRead[file],fileGrepChunkSize=100000,
    fileGrepChunk,fileGrepFlag},
    fileGrepChunk=
      ReadList[fileGrepOpened,String,fileGrepChunkSize];
    fileGrepFlag:=
      Length@fileGrepChunk>0;
    Reap[
      While[fileGrepFlag,
        If[containsQ,
          If[Or@@StringContainsQ[fileGrepChunk,pat],
            Sow@True;
            fileGrepFlag=False
            ],
          Sow@
            StringCases[fileGrepChunk,pat]
          ];
        fileGrepChunk=
          ReadList[fileGrepOpened,String,fileGrepChunkSize,
            NullRecords->True];
        ];
        Close@fileGrepOpened;
      ]//If[containsQ,
          Replace[{
            {_,{}}->False,
            _->True
            }],
          Replace[{
            {_,{r_}}:>
              Association@DeleteCases[
                MapIndexed[First@#2->#&,Join@@r],
                _->{}
                ],
            {_,{}}:>
              <||>
            }]
          ]
    ];


fastTextImport[file_]:=
  With[{text=
    StringJoin@Riffle[ReadList[file,Record,NullRecords->True],"\n"]
    },
    Close@file;
    text
    ];


fileGrepMultiLine[file_,pat_,containsQ_]:=
  With[{text=fastTextImport@file},
    If[containsQ,
      StringContainsQ[text,pat],
      Association@
        Table[
          With[{chunks=
            StringTake[text,{
              {1,First@sp},
              sp
              }]},
            With[{splits=StringSplit[#,"\n"]&/@chunks},
              {
                {Length@First@splits,StringLength@First@Last@splits},
                {Length@First@splits+
                  (Length@Last@splits)-1,
                    If[Length@Length@Last@splits>1,
                      0,
                      StringLength@First@Last@splits
                      ]+
                      StringLength@Last@Last@splits}
                }->
                  Last@chunks
              ]
            ],
          {sp,StringPosition[text,pat,Overlaps->False]}
          ]
      ]
    ];


Options[FileGrep]={
  "ContainsQ"->False,
  "IncludeLine"->False,
  "IncludeLineNumbers"->True,
  "MultilineMatch"->False
  };
FileGrep[file:filePattern?(Not@*DirectoryQ),pat_,ops:OptionsPattern[]]:=
  With[{function=
    If[OptionValue["MultilineMatch"]//TrueQ,
      fileGrepMultiLine,
      fileGrepSingleLine
      ]},
    If[OptionValue["ContainsQ"]//TrueQ,
      function[file,pat,True],
      function[file,
        If[OptionValue@"IncludeLine"//TrueQ,
          (Except["\n"]...)~~pat~~(Except["\n"]...),
          pat
          ],
        False]//
          If[OptionValue@"IncludeLineNumbers"//Not@*TrueQ,
            Values,
            Identity
            ]
      ]
    ];
FileGrep[files:{filePattern..},pat_,ops:OptionsPattern[]]:=
  AssociationMap[FileGrep[#,pat,ops]&,files]
FileGrep[dir:filePattern?DirectoryQ,pat_,ops:OptionsPattern[]]:=
  FileGrep[FileNames["*",dir],pat,ops]


Options[FileSystemGrep]=
  Join[
    Options[FileSystemMap],
    Options[FileGrep]
    ];
FileSystemGrep[pat_,fsMap:Except[_Rule]..,ops:OptionsPattern[]]:=
  With[{
    grargs=FilterRules[{ops},Options@FileGrep],
    margs=FilterRules[{ops},Options@FileSystemMap]
    },
    FileSystemMap[
      FileGrep[#,pat,grargs]&,
      fsMap,
      margs
      ]
    ];


Options[GrepDirectory]={
  "GrepRecursive"->True,
  "GrepMatch"->False
  };
GrepDirectory[dir_String?DirectoryQ,pat_String,ops:OptionsPattern[]]:=
  If[!TrueQ@OptionValue@"GrepMatch",
    Identity,
    First@#->StringJoin@Rest@#&/@StringSplit[#,":"<>pat->pat,2]&
    ]@
  StringReplace[
    StringSplit[
      RunProcess[
      {"grep",
        Replace[OptionValue@"GrepRecursive",{
          True->"-r",
          _->Nothing
          }],
        Replace[OptionValue@"GrepMatch",{
          False->"-l",
          _->Nothing
          }],
          pat,"."},
      "StandardOutput",
      ProcessDirectory->
        ExpandFileName@dir
      ],
      "\n"],
    "./"->
      StringJoin@{StringTrim[dir,$PathnameSeparator~~EndOfString],$PathnameSeparator}
    ];
GrepDirectory[dirs:{__String?DirectoryQ},pat_String,ops:OptionsPattern[]]:=
  GrepDirectory[#,pat,ops]&/@
    DeleteDuplicates@dirs//Flatten; 
GrepDirectory[files:{__String?(FileExistsQ)},pat_String,ops:OptionsPattern[]]:=
  GrepDirectory[DirectoryName/@files,pat,ops];


GrepSelect[files:{__String?(FileExistsQ)},pattern_String]:=
  Intersection[
    GrepDirectory[DirectoryName/@Select[files,Not@*DirectoryQ],pattern,
      "GrepRecursive"->True,
      "GrepFileNames"->True],
    ExpandFileName/@files
    ];


SystemExpressionsSearch//Clear


trFileExpressions[f_]:=
  With[{strings=
    DeleteCases[
      Import[f,"Text"]~StringSplit~"\n",
      _?(StringMatchQ[#,"\\@*"]&)]
      },
    Table[
      Replace[Quiet@ToHeldExpression[s],$Failed:>s],
      {s,strings}
      ]
    ];


Options[SystemExpressionsSearch]=
  Flatten@{
    Monitor->True,
    Options@Cases
    };
SystemExpressionsSearch[
  pat_,
  files:(
    Except[
      "All"|"Notebooks"|"Packages"|"TextResources",
      _?StringPattern`StringPatternQ
      ]|_List
    )..,
  function:InternalFiles|FrontEndFiles|InternalSystemFiles:InternalFiles,
  ops:OptionsPattern[]
  ]:=
  CompoundExpression[
    Begin["SystemSearchDump`"],
    SetDirectory@$TemporaryDirectory;
    (ResetDirectory[];Quiet@End[];
      Select[#,Length@#>0&]
      )&@
      Module[{
        fileListing=
          Replace[
            Flatten[{files}, 1],
            {
              {_String?FileExistsQ, ___String}:>files,
              _List:>function[Alternatives@@files],
              Except@_String?FileExistsQ:>function[files]
              }
            ],
        filesNew
        },
        filesNew=
          AssociationMap[Missing["UnProcessed"]&,fileListing];
        DeleteMissing@
        CheckAbort[
          If[OptionValue@Monitor//TrueQ,
            Monitor[
              Table[
                filesNew[fileListing[[i]]]=
                  Quiet@
                    Cases[
                      Switch[FileExtension@fileListing[[i]],
                        "m"|"wl",
                          Import[fileListing[[i]],"HeldExpressions"],
                        "tr",
                          trFileExpressions[fileListing[[i]]],
                        _,
                          Get[fileListing[[i]]]
                        ],
                      pat,
                      \[Infinity],
                      Heads->OptionValue@Heads
                      ],
                  {i,Length@fileListing}
                  ],
              Internal`LoadingPanel@
                Row@{"Scanning file ",i," of ",Length@fileListing}
              ],  
            Table[
              filesNew[f]=
                Quiet@
                  Cases[
                    Switch[FileExtension@f,
                      "m"|"wl",
                        Import[f,"HeldExpressions"],
                      "tr",
                        trFileExpressions[f],
                      _,
                        Import[f]
                      ],
                    pat,
                    \[Infinity],
                    Heads->OptionValue@Heads
                    ],
                  {f,fileListing}
                  ]
            ];
          filesNew,
          End[];
          filesNew
          ]
      ]
    ];


SystemExpressionsSearch[
  pat_,
  Optional["All", "All"],
  function:InternalFiles|FrontEndFiles|InternalSystemFiles:InternalFiles,
  ops:OptionsPattern[]]:=
    SystemExpressionsSearch[pat,
      "*.tr"|"*.m"|"*.nb",
      function,
      ops
      ];
SystemExpressionsSearch[
  pat_,
  "Notebooks",
  function:InternalFiles|FrontEndFiles|InternalSystemFiles:InternalFiles,
  ops:OptionsPattern[]]:=
    SystemExpressionsSearch[pat,
      "*.nb",
      function,
      ops
      ];
SystemExpressionsSearch[
  pat_,
  "Packages",
  function:InternalFiles|FrontEndFiles|InternalSystemFiles:InternalFiles,
  ops:OptionsPattern[]]:=
    SystemExpressionsSearch[pat,
      "*.m"|"*.wl",
      function,
      ops
      ];
SystemExpressionsSearch[
  pat_,
  "TextResources",
  function:InternalFiles|FrontEndFiles|InternalSystemFiles:InternalFiles,
  ops:OptionsPattern[]]:=
    SystemExpressionsSearch[pat,
      "*.tr",
      function,
      ops
      ];


SystemHeadSearch[
  pat_,
  e___
  ]:=
  SystemExpressionsSearch[
    p:HoldPattern@pat[a___]:>HoldComplete[p],
    e
    ];


SystemArgSearch[
  pat_,
  e___
  ]:=
  SystemExpressionsSearch[
    p:HoldPattern[_[___,pat,___]]:>HoldComplete[p],
    e
    ];


SystemContextSearch[
  context:_?StringPattern`StringPatternQ,
  e___]:=
  SystemHeadSearch[
    _Symbol?(
      Function[Null,
        StringMatchQ[Quiet[Context[#]],context],
        HoldAllComplete]
        ),
    e
    ];
SystemContextSearch[s_Symbol,
  e___
  ]:=
  SystemContextSearch[
    Quiet[Context@s],
    e
    ]


SystemFunctionSearch[
  functionName:_?StringPattern`StringPatternQ,
  e___]:=
  SystemHeadSearch[
    _Symbol?(
      Function[Null,
        StringMatchQ[SymbolName[Unevaluated@#],functionName],
        HoldAllComplete]
        ),
    e
    ];
SystemFunctionSearch[s_Symbol,
  e___
  ]:=
  SystemFunctionSearch[
    SymbolName@s,
    e
    ]


PackageAddAutocompletions[
  Map[
    SymbolName[#]->
      {
        None,
        {
          "All", "Notebooks", "Packages", "TextResources"(*,
					"{\"*.m\",\"*.wl\",\"*.tr\"}",
					"{\"*.nb\",\"*.tr\"}"*)
          }
        }&,
    {
      SystemExpressionsSearch,
      SystemHeadSearch,
      SystemArgSearch,
      SystemContextSearch,
      SystemFunctionSearch
      }
    ]
  ]


spelunkSymValues[sym_Symbol|Verbatim[HoldPattern][sym_Symbol]]:=
  Quiet@
    Check[
      Join[
        OwnValues[sym],
        DownValues[sym],
        UpValues[sym],
        SubValues[sym]
        ],
      {}
      ];
spelunkSymValues[expr_]:=
  Join@@
    Cases[expr,
      s_Symbol:>spelunkSymValues[HoldPattern[s]],
      \[Infinity],
      Heads->True
      ];
spelunkDependsOn[sym_,selectPattern_]:=
  With[{funcs=Extract[#,-1,HoldComplete]&/@spelunkSymValues[sym]},
    DeleteDuplicates[Cases[funcs,selectPattern,\[Infinity],Heads->True]]
    ];


spelunkNonSystemQ[s_Symbol]:=
  !StringMatchQ[Quiet@Context[s],"System`*"];
spelunkHasCVs[s_Symbol]:=
  Quiet@Length@Join[DownValues[s],SubValues[s]]>0;
spelunkHasUVs[s_Symbol]:=
  Quiet@Length@UpValues[s]>0;
spelunkHasOVs[s_Symbol]:=
  Quiet@Length@OwnValues[s]>0;
{
  spelunkNonSystemQ,spelunkHasCVs,
  spelunkHasUVs,spelunkHasOVs
  }~SetAttributes~HoldFirst;


$spelunkSymPatternNonSys=
  (((s_Symbol?spelunkNonSystemQ)?spelunkHasOVs)|
    (((s_Symbol?spelunkNonSystemQ)?spelunkHasCVs)[___])|
    (_[___,(s_Symbol?spelunkNonSystemQ)?spelunkHasUVs,___])
    ):>HoldPattern[s];
$spelunkSymPatternAll=
  (((s_Symbol)?spelunkHasOVs)|
    (((s_Symbol)?spelunkHasCVs)[___])|
    (_[___,(s_Symbol)?spelunkHasUVs,___])
    ):>HoldPattern[s];


spelunkDefs[
  sym_,
  pat_
  ]:=
  If[!KeyMemberQ[spelunkingMap,sym],
      With[{dependsOn=spelunkDependsOn[sym,pat]},
        spelunkingMap[sym]=dependsOn;
        Do[spelunkDefs[dep,pat],{dep,dependsOn}]
        ];
    ];


$spelunkPatternConversions=
  {
    FreeQ[p2_]:>
      FreeQ[p2],
    Not@*FreeQ[p2_]:>
      Not@*FreeQ[p2],
    MemberQ[p2_]:>
      MemberQ[HoldComplete[p2]],
    l_List:>
      MatchQ[Thread@HoldComplete[l]],
    e_:>
      MatchQ[{HoldComplete[e]..}]
    };


spelunkPatternConvert[selectPattern_]:=
  Replace[selectPattern,{
    Automatic->
      $spelunkSymPatternNonSys,
    All->
      $spelunkSymPatternAll,
    (vs:(OwnValues|DownValues|UpValues|SubValues)->pat_):>
      With[{p=Replace[pat,$spelunkPatternConversions]},
        (s_Symbol?(
          Function[Null,
            p@Thread@Extract[vs[#],{All,2},HoldComplete]&,
            HoldFirst]):>
          HoldPattern[s])
        ]
    }];


SpelunkDefinitions[
  sym_Symbol,
  selectPattern_:Automatic
  ]:=
  CompoundExpression[
    Begin["SpelunkDump`"],
    (Quiet@End[];Replace[#,_String:>$Aborted])&@
    CheckAbort[
      With[{pat=spelunkPatternConvert[selectPattern]},
        Block[{
          spelunkingMap=<||>},
          spelunkDefs[sym,pat];
          SpelunkObject@
            <|
              "Root"->sym,
              "CallsOn"->spelunkingMap,
              "CalledBy"->(
                (Last/@#)&/@
                  GroupBy[
                    Join@@
                      Thread/@
                        Thread[Values[spelunkingMap]->Keys[spelunkingMap]],
                    First]
                  )
              |>
          ]
        ],
      End[]
      ]
    ];


SpelunkDefinitions[
  sym_String,
  selectPattern_:Automatic
  ]:=
  Replace[Names[sym],{
    {sym}:>
      Replace[ToExpression[sym],
        s_Symbol:>
          SpelunkDefinitions[
            s,
            selectPattern
            ]
        ],
    s:{__}:>
      (
        SpelunkDefinitions[#,selectPattern]&/@
          Cases[ToExpression[s],_Symbol]
        ),
    {}->None    
    }];
SpelunkDefinitions[s:{__String},selectPattern_:Automatic]:=
  SpelunkDefinitions[#,selectPattern]&/@s;


SpelunkCallsCases[splob:SpelunkObject[a_?AssociationQ],
  selectPattern_,
  key:"CallsOn"|"CalledBy"|{("CalledBy"|"CallsOn")..}:"CallsOn",
  ops:OptionsPattern[]
  ]:=
  With[{
    syms=DeleteDuplicates[Keys/@Lookup[a,Flatten@{key}]],
    pat=spelunkPatternConvert[selectPattern]
    },
    Cases[syms,pat]
    ];
SpelunkCallsCases[sym_,selectPattern_,
  key:"CallsOn"|"CalledBy"|{("CalledBy"|"CallsOn")..}:"CallsOn"]:=
  SpelunkCallsCases[#,selectPattern,key]&/@
    Flatten@{SpelunkDefinitions[sym]};


SpelunkGraph[splob_Association,a___]:=
  SpelunkGraph[SpelunkObject[splob],a];
Options[SpelunkGraph]=
  Options[Graph];
SpelunkGraph[
  splob_SpelunkObject,
  direction:"CallsOn"|"CalledBy"|All:All,
  clickFunction:
    Automatic|_Symbol|_Function:Automatic,
  highlight_:None,
  ops:OptionsPattern[]
  ]:=
  With[{key=Replace[direction,All->{"CallsOn","CalledBy"}]},
    With[{
      edges=
        DeleteDuplicatesBy[Sort]@Flatten@
          Table[
            Thread[c/.Rule->If[direction===All,UndirectedEdge,DirectedEdge]],
            {c,
              Flatten@Map[Normal]@Lookup[First[splob],Flatten@{key}]
              }],
      stdColor=
        Switch[key,
          "CalledBy",
            {Hue[.3,.5,.3],Hue[.3,.4,.8]},
          "CallsOn"|_,
            {Hue[.6,.5,.3],Hue[.6,.4,.8]}
          ],
      edgeColor=
        Switch[key,
          "CalledBy",
            Hue[.3,.7,.5],
          "CallsOn"|_,
            Hue[.6,.7,.5]
          ],
      privateColor=
        Switch[key,
          "CalledBy",
            {Hue[0,.4,.5],Hue[0,.4,.8]},
          "CallsOn"|_,
            {Hue[0,.4,.5],Hue[0,.4,.8]}
          ],
      systemColor=
        Switch[key,
          "CalledBy",
            {Hue[.1,.5,.7],Hue[.15,.5,1]},
          "CallsOn"|_,
            {Hue[.1,.5,.7],Hue[.15,.5,1]}
          ],
      guColor=
        Switch[key,
          "CalledBy",
            {Hue[.4,.5,.5],Hue[.4,.5,.7]},
          "CallsOn"|_,
            {Hue[.4,.5,.5],Hue[.4,.5,.7]}
          ],
      globColor=
        Switch[key,
          "CalledBy",
            {Hue[.8,.5,.7],Hue[.8,.5,1]},
          "CallsOn"|_,
            {Hue[.8,.5,.7],Hue[.8,.5,1]}
          ],
      highlightColor=
        Switch[key,
          "CallsOn",
            {Hue[.15,.7,.6],Hue[.15,1,1]},
          "CalledBy"|_,
            {Hue[.15,.7,.6],Hue[.15,1,1]}
          ],
      event=
        Replace[clickFunction,
          Automatic->
            Function[n,
              Replace[
                FormattedUsage[n,Full],
                c:Except[Column[{},___]|Style[Column[{},___],___]]:>Print@c
                ]
              ]
          ]
      },
      With[{nodes=VertexList@edges},
        Graph[
          edges,
          ops,
          VertexShape->
            Table[
              With[{n=n},
                With[{pat=
                  Replace[n,
                    Verbatim[HoldPattern][s_]:>
                      Verbatim[HoldPattern][HoldPattern[s]]]},
                  pat->
                    Graphics[{
                      Replace[n,{
                        highlight:>
                          Sequence@@{
                            EdgeForm[First@highlightColor],
                            Last@highlightColor},
                        s_?(
                          Function[Null,
                            StringMatchQ[Quiet@Context[#],"*`*Private`*"],
                            HoldFirst
                            ]):>
                          Sequence@@{
                            EdgeForm[First@privateColor],
                            Last@privateColor
                            },
                        s_?(
                          Function[Null,
                            StringMatchQ[Quiet@Context[#],"GeneralUtilities`"],
                            HoldFirst
                            ]):>
                          Sequence@@{
                            EdgeForm[First@guColor],
                            Last@guColor
                            },
                        s_?(
                          Function[Null,
                            StringMatchQ[Quiet@Context[#],"Global`"],
                            HoldFirst
                            ]):>
                          Sequence@@{
                            EdgeForm[First@globColor],
                            Last@globColor
                            },
                        s_?(
                          Function[Null,
                            StringMatchQ[Quiet@Context[#],"System`"],
                            HoldFirst
                            ]):>
                          Sequence@@{
                            EdgeForm[First@systemColor],
                            Last@systemColor
                            },
                        _:>
                          (Sequence@@{
                            EdgeForm[First@stdColor],
                            Last@stdColor
                            })
                        }],
                        EventHandler[
                          Tooltip[
                              Disk[],
                                Replace[n,
                                    Verbatim[HoldPattern][s_Symbol]:>
                                      HoldForm[s]
                                  ]
                              ],
                            "MouseClicked":>
                              Function[arg,Replace[arg,_->event[arg]]][n]
                          ]
                        },
                      ImageSize->Large
                      ]
                    ]
                  ],
              {n,nodes}],(*
						VertexSize\[Rule].5,*)
            EdgeStyle->
              Table[
                e->edgeColor,
                {e,edges}]
            ]
          ]
        ]
  ];


SpelunkViewer[spelunkMap_]:=
  DynamicModule[
    {
      current=spelunkMap["Root"],
      map=spelunkMap,
      graphVisible=False,
      defsVisible=False},
    Panel[
    Dynamic@
      Column[{
        Replace[current,
          s_Symbol|Verbatim[HoldPattern][s_]:>
            Block[{s},
              RawBoxes@ToBoxes[GeneralUtilities`CodeForm[s]]
              ]
          ],
        TemplateApply["Calls on: (``)",Length@map["CallsOn"][current]],
        Grid[{
          Button[
            Mouseover[
              Style[
                Replace[#,{
                  Verbatim[HoldPattern][s_Symbol]|s_Symbol:>
                    Tooltip[SymbolName@Unevaluated@s,
                      Style[HoldForm[s],"Input"]]
                  }],
                "Hyperlink"],
              Style[
                Replace[#,{
                  Verbatim[HoldPattern][s_Symbol]|s_Symbol:>
                    Tooltip[SymbolName@Unevaluated@s,
                      Style[HoldForm[s],"Input"]]
                  }],
                  "HyperlinkActive"]
              ],
            current=#,
            Appearance->"Frameless"]&/@map["CallsOn"][current]
          },
          Dividers->Center,
          ItemSize->Full
          ](*//Pane[#,ImageSize\[Rule]{{Scaled[1],Automatic},Automatic}]&*),
        TemplateApply["Called by: (``)",
          Length@Replace[map["CalledBy"][current],_Missing->{}]],
        Grid[{
          Button[
            Mouseover[
              Style[
                Replace[#,{
                  Verbatim[HoldPattern][s_Symbol]|s_Symbol:>
                    Tooltip[
                      SymbolName@Unevaluated@s,
                      Style[HoldForm[s],
                        FontColor -> RGBColor[0, 0, 0],
                        FontFamily -> "Courier", 
                        FontWeight -> Bold
                        ],
                      TooltipDelay -> 0.4
                      ]
                  }],"Hyperlink"],
              Style[
                Replace[#,{
                  Verbatim[HoldPattern][s_Symbol]|s_Symbol:>
                    Tooltip[
                      SymbolName@Unevaluated@s,
                      Style[HoldForm[s],
                        FontColor -> RGBColor[0, 0, 0],
                        FontFamily -> "Courier", 
                        FontWeight -> Bold
                        ],
                      TooltipDelay -> 0.4
                      ]
                  }],"Hyperlink"]
              ],
            current=#,
            Appearance->"Frameless"]&/@
              Replace[map["CalledBy"][current],_Missing->{}]
          },
          Dividers->Center],
        Dynamic@
          If[defsVisible,
            Column@{
              Row@{Opener[Dynamic@defsVisible],
                TemplateApply["Definitions: (``)",
                  Length@GetUsage[current,Full]
                  ]},
              With[{
                c=current,
                h=Alternatives@@Replace[(*Keys@*)map["CallsOn"][current],_Missing->{}]
                },
                Block[{
          GeneralUtilities`Debugging`PackagePrivate`$DefinitionSymbolTemplateBoxOptions=
                    {
                      Editable -> False,
                      DisplayFunction -> 
                        Function[
                          TagBox[
                            TagBox[
                              TooltipBox[#2,
                                StyleBox[#,
                                  FontColor -> RGBColor[0, 0, 0],
                                  FontFamily -> "Courier", 
                                  FontWeight -> Bold
                                  ],
                                TooltipDelay -> 0.4
                                ],
                              EventHandlerTag[{
                                "MouseClicked" :> 
                                  Replace[ToExpression[#,StandardForm,Hold],
                                    s:Hold[h]:>
                                      Replace[s,{
                                        Verbatim[HoldPattern][sym_]:>
                                          (current=HoldPattern[sym]),
                                        Hold[sym_]:>(current=HoldPattern[sym]),
                                        _:>(current=s)
                                        }]
                                    ]
                                  }]
                            ],
                            MouseAppearanceTag @ "LinkHand"
                          ]
                        ],
                        InterpretationFunction -> (#&)
                      }
                },
                  Framed[
                    RawBoxes@ToBoxes@
                      FormattedUsage[c,Full,
                        Format->GeneralUtilities`CodeForm
                        ],
                    Background->White,
                    FrameStyle->
                      GrayLevel[.7,.5],
                    ImageSize->Full
                    ]
                  ]
                ]
              },
            Row@{Opener[Dynamic@defsVisible],
              TemplateApply["Definitions: (``)",
                Length@GetUsage[current,Full]
                ]}],
        Dynamic@
          If[graphVisible,
            Column@{
              Row@{Opener[Dynamic@graphVisible],
                TemplateApply["Graph: (`` nodes)",
                  Length@
                    DeleteDuplicates[
                      Flatten[Keys/@Lookup[map,{"CalledBy","CallsOn"}]]
                      ]
                  ]},
              SpelunkGraph[map,
                Function[o,current=o],
                Replace[current,
                  Verbatim[HoldPattern][n_]:>
                    Verbatim[HoldPattern][HoldPattern[n]]
                  ],
                ImageSize->Scaled[1]
                ]
              },
            Row@{Opener[Dynamic@graphVisible],
              TemplateApply["Graph: (`` nodes)",
                Length@
                  DeleteDuplicates[
                    Flatten[Keys/@Lookup[map,{"CalledBy","CallsOn"}]]
                    ]
                ]
              }]
        },Dividers->All]
      ]
    ];


SpelunkObject/:
  HoldPattern[SpelunkObject[a_?AssociationQ][k__]]:=
    a[k];


$SpelunkObjectCompactFormatting=False;
(Format[SpelunkObject[spelunkMap_]/;Not@TrueQ@$SpelunkObjectCompactFormatting]):=
  Interpretation[Deploy@SpelunkViewer[spelunkMap],SpelunkObject@spelunkMap];
(Format[SpelunkObject[spelunkMap_]/;TrueQ@$SpelunkObjectCompactFormatting]):=
  RawBoxes@BoxForm`ArrangeSummaryBox[
    "SpelunkObject",
    SpelunkObject[spelunkMap],
    None,
    {
      BoxForm`MakeSummaryItem[
        {"Root: ",spelunkMap["Root"]},
        StandardForm],
      BoxForm`MakeSummaryItem[
        {"Symbols: ",
          Short[Flatten[Keys/@Lookup[spelunkMap,{"CalledBy","CallsOn"}]]],
          TemplateApply["(``)",
            Length@Flatten[Keys/@Lookup[spelunkMap,{"CalledBy","CallsOn"}]]
            ]
          },
        StandardForm
        ],
      BoxForm`MakeSummaryItem[
        {"Calls on: ",
          Short[HoldForm@@@Keys@spelunkMap["CallsOn"]],
          TemplateApply["(``)",
            Length@Flatten[Keys@Lookup[spelunkMap,"CallsOn"]]
            ],
          Length@spelunkMap["CallsOn"][spelunkMap["Root"]]
          },
        StandardForm]
      },
    {
      
      },
    StandardForm
    ];


spelunkValuesQuiet[s_,vals_List]:=
  Quiet[
    AssociationMap[
      Replace[#@s,$Failed->{}]&,
      vals
      ],
    General::readp
    ];
spelunkValuesQuiet~SetAttributes~HoldFirst;


$SpelunkValuesCallLimit=100;


SpelunkValues[{},__]:=<||>;


Options[SpelunkValues]=
  {
    "ExcludeSystem"->True
    }
SpelunkValues[s:{__Symbol},
  vals:
    {
      (DownValues|UpValues|SubValues)..
      }:
    {
      DownValues
      },
  ops:OptionsPattern[]
  ]:=
  Block[{
    DVCache=<||>,
    DVCacheOld=<||>,
    n=1,
    excludeSys=TrueQ@OptionValue["ExcludeSystem"]
    },
    Map[
      Function[
        DVCache[Hold[#]]=spelunkValuesQuiet[#,vals]
        ],
      s
      ];
    While[n++<$SpelunkValuesCallLimit&&Keys@DVCacheOld=!=Keys@DVCache,
      Cases[
        Values@DVCache,
        sym_Symbol?(
          Function[Null,
            (
              !excludeSys||
              Quiet[
                Context[#]=!="System`",
                Context::notfound
                ]
              )&&
            Not@KeyMemberQ[DVCache,Hold[#]],
            HoldAllComplete
            ]
          ):>
          (DVCache[Hold[sym]]=spelunkValuesQuiet[sym,vals]),
      \[Infinity],
      Heads->True
      ];
      DVCacheOld=DVCache;
      ];
    Select[
      DVCache,
      Total@Map[Length,#]>0&
      ]
    ];
SpelunkValues[s_Symbol,
  vals:
    {
      (DownValues|UpValues|SubValues)..
      }:
    {
      DownValues
      },
  ops:OptionsPattern[]
  ]:=
  SpelunkValues[{s},vals,ops];
SpelunkValues[s_String,
  vals:
    {
      (DownValues|UpValues|SubValues)..
      }:
    {
      DownValues
      },
  ops:OptionsPattern[]
  ]:=
  SpelunkValues[
    ToExpression[Names[s],
      StandardForm,
      Function[Null,
        If[Length@spelunkValuesQuiet[#,{OwnValues}][[1]]>0,
          Nothing,
          #
          ],
        HoldFirst
        ]
      ],
    vals,
    ops
    ];
Options[SpelunkValuesContains]=Options@SpelunkValues;
SpelunkValuesContains[
  s:_Symbol|_String|{__Symbol},
  vals:
    {
      (DownValues|UpValues|SubValues)..
      }:
    {
      DownValues
      },
  pat_,
  ops:OptionsPattern[]
  ]:=
  DeleteCases[
    DeleteCases[
      Map[
        Select[
          #,
          Not@*FreeQ[pat]
          ]&,
        #],
      {}
      ]&/@SpelunkValues[s,vals],
    <||>];
Options[SpelunkValuesCases]=
  Join[
    Options@Cases,
    Options@SpelunkValues
    ];
SpelunkValuesCases[
  s:_Symbol|_String|{__Symbol},
  vals:
    {
      (DownValues|UpValues|SubValues)..
      }:
    {
      DownValues
      },
  pat_,
  levelSpec:
    _Integer?Positive|Infinity|
    {_Integer?Positive,_Integer?Positive|Infinity}:Infinity,
  ops:OptionsPattern[]
  ]:=
  Map[
    Cases[#,pat,levelSpec,
      FilterRules[{ops},Options@Cases]
      ]&
    ]/@SpelunkValues[s,vals,FilterRules[{ops},Options@SpelunkValues]]//
    Select[Total@Map[Length,#]>0&];


WithOverrideDefs[{blocks___Rule},e_]:=
  With[{
      drorder=Lookup[SystemOptions["DefinitionsReordering"],"DefinitionsReordering"],
      blockSyms=
          Thread[
              Extract[
                HoldComplete[blocks],
                Map[{#,1}&,Range@Length[HoldComplete[blocks]]],
                HoldComplete
                ]//Apply[List],
            HoldComplete
            ]},
    Replace[blockSyms,
      HoldComplete[s_]:>
      Internal`InheritedBlock[s,
        SetSystemOptions["DefinitionsReordering"->None];
        Replace[
          HoldComplete[blocks],
          (blockSym_->blockFunction_):>
            (
              Unprotect[blockSym];
              If[Length@OwnValues[blockSym]>0||System`Private`HasOwnCodeQ[blockSym],
                With[{ov=OwnValues[blockSym]},
                  blockSym=
                    Function[Null,
                      OwnValues[blockSym]=
                        ov;
                      blockFunction[##];
                      blockSym[##],
                      HoldAllComplete
                      ];
                  ],
                blockSym[args___]/;!TrueQ[$WithOverrideDefs[HoldComplete@blockSym]]:=
                  CheckAbort[
                    $WithOverrideDefs[HoldComplete@blockSym]=True;
                    blockFunction[args];
                    ($WithOverrideDefs[HoldComplete@blockSym]=False;#)&@
                      blockSym[args],
                    $WithOverrideDefs[HoldComplete@blockSym]=False
                    ];
                DownValues[blockSym]=
                  SortBy[DownValues[blockSym], 
                    FreeQ[$WithOverrideDefs[HoldComplete@blockSym]]
                    ];
                ]
              ),
          1
          ]//Apply[List];
        SetSystemOptions["DefinitionsReordering"->drorder];
        e
        ]
      ]
    ];
WithOverrideDefs[{blocks:(_Symbol|_Rule)...},e_]:=
  Replace[
    Replace[HoldComplete[blocks],
      s_Symbol:>
      (s->Print@*List),
      1
      ],
    HoldComplete[l___]:>
      WithOverrideDefs[{l},e]
    ];
WithOverrideDefs[s:(_Symbol|_Rule),e_]:=
  WithOverrideDefs[{s},e];
WithOverrideDefs~SetAttributes~HoldAllComplete;


End[];



