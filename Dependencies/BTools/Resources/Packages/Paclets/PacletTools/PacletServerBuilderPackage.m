(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Text:: *)
(*A bunch of lower level junk used in the top-level interface*)



LocalPacletServerPattern::usage=
	"The patterns that a local server can take";
(*CloudPacletServerPattern::usage=
	"The patterns that a cloud server can take";*)


PacletServer::usage="";
LoadPacletServers::usage="";
$DefaultPacletServer::usage=
	"The key of the default paclet server";


PacletServerURL::usage=
	"";
PacletServerDeploymentURL::usage=
	"";
PacletServerBundleSite::usage=
	"Bundles the site dataset for the server";
PacletServerFile::usage=
	"Finds a file on a paclet server";
PacletServerDirectory::usage=
	"";
PacletServerDataset::usage=
	"";
PacletServerExposedPaclets::usage=
	"";
PacletServerInitialize::usage="";
PacletServerDelete::usage=
	"Deletes a paclet server";


Begin["`Private`"];


(* ::Subsubsection::Closed:: *)
(*patternHack*)



pacletUploadPat=((_String|_URL|_File|{_String,_String}|_Paclet)|
	(_String|_Paclet->_String|_URL|_File|{_String,_String}|_Paclet))|
	{((_String|_URL|_File|{_String,_String}|_Paclet)|
			(_String|_Paclet->_String|_URL|_File|{_String,_String}|_Paclet))..};


(* ::Subsubsection::Closed:: *)
(*File*)



$PacletServersFile=
	FileNameJoin@{
		$UserBaseDirectory, 
		"ApplicationData",
		"PacletServers",
		"PacletServers.m"
		};


(* ::Subsubsection::Closed:: *)
(*Load*)



$PacletServersDefault=
		<|
			"Default"->
				$PacletExecuteSettings["ServerDefaults"],
			"Shared"->
				<|
					"ServerBase"->
						Replace[
							(* This serves my local purposes only... *)
							FileNameJoin@
								{
									$UserDocumentsDirectory, 
									"GitHub", 
									"MathematicaPacletServer"
									},
							Except[_?DirectoryQ]:>
								"https://www.wolframcloud.com/objects/PacletServer"
							],
					"ServerExtension"->
						Nothing,
					"ServerName"->
						Nothing,
					Permissions->
						"Public",
					CloudConnect->
						"PacletServer"
					|>
			|>;


LoadPacletServers[]:=
	If[!AssociationQ@$PacletServers,
		$PacletServers=
			Merge[
				{
					If[FileExistsQ@$PacletServersFile,
						Import[$PacletServersFile],
						<||>
						],
					$PacletServersDefault
					},
				First
				]
		]


(* ::Subsubsection::Closed:: *)
(*Merge*)



ImportPacletServers[d_Association]:=
	Merge[
		{
			Select[$PacletServers],
			d,
			Select[$PacletServers,
				DirectoryQ@*Key["ServerBase"]
				]
			},
		Merge[Last]
		];
ImportPacletServers[f_String]/;FileExistsQ[f]&&!DirectoryQ[f]:=
	ImportPacletServers@Import[f];
ImportPacletServers[f_String]:=
	Replace[Quiet@CloudObject[f],
		{
			co_CloudObject:>ImportPacletServers@co,
			_:>ImportPacletServers@Import[f]
			}
		];
ImportPacletServers[c_CloudObject]:=
	ImportPacletServers@CloudImport[c];
ImportPacletServers[_]:=
	$Failed


(* ::Subsubsection::Closed:: *)
(*Index*)



If[Length@OwnValues[$PacletServersIndexes]==0,
	$PacletServersIndexes:=
		$PacletServersIndexes=
			<|
				"b3m2a1"->CloudObject["user:b3m2a1.paclets/PacletIndex.m"]
				|>
	];


(* ::Subsubsection::Closed:: *)
(*Setup*)



If[!AssociationQ@$PacletServers,
	LoadPacletServers[]
	]


$DefaultPacletServer=
	"Default";


PacletServer[s_]:=
	Normal@$PacletServers[s]


$PacletServer:=
	PacletServer[$DefaultPacletServer]


LocalPacletServerPattern=
	KeyValuePattern[{
		"ServerBase"->
			(
				_String?DirectoryQ|
				_String?(MatchQ[URLParse[#, "Scheme"], "file"|"http"]&)
				),
		"ServerName"->_
		}];
localPacletServerPatOrDir=
	LocalPacletServerPattern|_String?DirectoryQ;
localPacletServer=
	MatchQ[LocalPacletServerPattern]


(* ::Subsubsection::Closed:: *)
(*PacletServerURL*)



PacletServerURL//Clear


PacletServerURL[serv:LocalPacletServerPattern]:=
	PacletSiteURL@
		FilterRules[serv,
			Options[PacletSiteURL]
			];
PacletServerURL[serv_String?DirectoryQ]:=
	URLBuild[<|"Scheme"->"file", "Path"->FileNameSplit[serv]|>];
PacletServerURL[s_String?(KeyMemberQ[$PacletServers, #]&)]:=
	PacletSiteURL@$PacletServers[s];
PacletServerURL[]:=
	With[{res=
		If[Length@$PacletServers>0,
			Replace[PacletServerURL["Default"],
				_PacletServerURL:>PacletServerURL@First@$PacletServers
				]
			]
		},
		res/;StringQ@res
		]


$PacletServerURL:=
	PacletServerURL@$PacletServer


(* ::Subsubsection::Closed:: *)
(*PacletServerDeploymentURL*)



PacletServerDeploymentURL//Clear


PacletServerDeploymentURL[server:LocalPacletServerPattern]:=
	PacletSiteURL@
		FilterRules[
			Flatten@{
				"ServerBase"->
					If[URLParse[PacletServerURL[server], "Scheme"]==="file", 
						CloudObject, 
						Lookup[server, "ServerBase"]
						],
				Normal@server
				},
			Options[PacletSiteURL]
			];
PacletServerDeploymentURL[s_String?DirectoryQ]:=
	Lookup[
		Import[PacletServerFile[s, "SiteConfig.wl"]],
		"SiteURL",
		$Failed
		];
PacletServerDeploymentURL[s_String?(KeyMemberQ[$PacletServers, #]&)]:=
	PacletServerDeploymentURL@$PacletServers[s];
PacletServerDeploymentURL[]:=
	With[{res=
		If[Length@$PacletServers>0,
			Replace[PacletServerDeploymentURL["Default"],
				_PacletServerDeploymentURL:>PacletServerDeploymentURL@First@$PacletServers
				]
			]
		},
		res/;StringQ@res
		]


(* ::Subsubsection::Closed:: *)
(*PacletServerFile*)



PacletServerFile[
	server:LocalPacletServerPattern,
	fileName:_String|{__String}|Nothing
	]:=
	With[{u=URLBuild@Flatten@{PacletServerURL[server],fileName}},
		If[URLParse[u,"Scheme"]==="file",
			FileNameJoin@URLParse[u,"Path"],
			u
			]
		];
PacletServerFile[
	server:_String?DirectoryQ,
	fileName:_String|{__String}|Nothing
	]:=
	FileNameJoin@Flatten@{server, fileName}
PacletServerDirectory[
	server:LocalPacletServerPattern|_String?DirectoryQ
	]:=
	PacletServerFile[server, Nothing]


$PacletServerDirectory:=
	PacletServerDirectory@$PacletServer;


(* ::Subsubsection::Closed:: *)
(*PacletServerDataset*)



Options[PacletServerDataset]=
	{
		"DeployedServer"->
			True
		};
PacletServerDataset[
	server:LocalPacletServerPattern,
	ops:OptionsPattern[]
	]:=
	PacletSiteInfoDataset@
		FilterRules[
			If[TrueQ@OptionValue["DeployedServer"],
				Prepend["ServerBase"->Automatic],
				Identity
				]@
				Normal@server,
			Options[PacletSiteInfoDataset]
			];


(* ::Subsubsection::Closed:: *)
(*PacletServerExposedPaclets*)



PacletServerExposedPaclets//Clear


PacletServerExposedPaclets[
	pacletSpecs:{___Association}
	]:=
	Map[Normal,
		Select[
			SortBy[
				DeleteDuplicatesBy[
					Reverse@SortBy[ToExpression@StringSplit[#Version,"."]&]@
						Flatten@{pacletSpecs},
					#Name&
					],
				#Name&
				],
			!StringEndsQ[#Name,("_Part"~~NumberString)|"_Index"]&
			]
		];
PacletServerExposedPaclets[d_Dataset]:=
	PacletServerExposedPaclets@Normal@d;
PacletServerExposedPaclets[server:localPacletServerPatOrDir]:=
	PacletServerExposedPaclets@
		PacletSiteInfoDataset[
			PacletServerFile[server, "PacletSite.mz"]
			]


$PacletServerExposedPaclets:=
	PacletServerExposedPaclets@$PacletServer


(* ::Subsubsection::Closed:: *)
(*PacletServerBundleSite*)



PacletServerBundleSite[
	server:localPacletServerPatOrDir
	]:=
	With[{ps=PacletExecute["BundleSite", PacletServerDirectory[server]]},
		CopyFile[
			ps,
			PacletServerFile[server, "PacletSite.mz"],
			OverwriteTarget->True
			]
		]


End[];



