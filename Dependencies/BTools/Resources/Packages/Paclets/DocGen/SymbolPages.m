(* ::Package:: *)



AutoGenerateUsage::usage=
  "Automatically provides usage info for a function based on usage messages and *Values";
AutoGenerateExamples::usage=
  "Automatically provides examples for a function based on *Values";
AutoGenerateDetails::usage=
  "Automatically provides details for a function";
SymbolPageNotebook::usage=
  "Creates a documentation notebook";


DocGenGenerateSymbolPages::usage=
  "Opens a documentation notebook";
DocGenSaveSymbolPages::usage=
  "Saves the documentation pages to a directory";


DocGenRefLink::usage=
  "Generates RefLink boxes to a symbol";
SymbolPageTemplate::usage=
  "Makes a template cell group to fill out from";
SymbolPageContextTemplate::usage=
  "Makes a template notebook for a context";


Begin["`Private`"];


$DocGenDirectory (* To invoke the autoloader *)


(* ::Subsubsection::Closed:: *)
(*SymbolPageSeeAlsoRefLink*)



SymbolPageSeeAlsoRefLink[_[s_String,l_String],cell:True|False:True]:=
  Cell[BoxData@
      TemplateBox[
        {
          Cell[TextData[Last@StringSplit[s,"`"]]],
          pacletLinkBuild[l]
          },
        "RefLink",
        BaseStyle->
          Dynamic[
            If[$VersionNumber<11.1,
              {"InlineFormula",FontFamily->"Verdana"},
              {"InlineFormula"}
              ],
            UpdateInterval->Infinity
            ]
        ],
    "InlineFormula"
    ];


(* ::Subsubsection::Closed:: *)
(*SymbolPageGuideRefLink*)



SymbolPageGuideRefLink[_[s_String,g_String],cell:True|False:True]:=
  Cell[BoxData@
    With[{link=pacletLinkBuild[g,"guide"],text=s},
      DynamicBox[
        If[$VersionNumber<11.1,
          TemplateBox[{
            Cell[TextData@text],
              link},
            "RefLink",
            BaseStyle->{"InlineFormula",FontFamily->"Verdana"}
            ],
          TemplateBox[{
            Cell[TextData@text],
              link},
            "RefLinkPlain",
            BaseStyle->{"InlineFormula"}
            ]
          ],
        UpdateInterval->Infinity
        ]
      ],
  "MoreAbout"
  ]


(* ::Subsubsection::Closed:: *)
(*AnchorBar*)



iGenerateAnchorBar[sym_,seeAlso_,relatedGuides_]:=
  anchorBarCell[
    {
      StringTrim[
        ToUpperCase@docSymType@sym,
        " SYMBOL"
        ]<>" SYMBOL",
      docTypeColor[docSymType@sym]
      },
      Replace[generateSymRefs[seeAlso],{
        l:{__}:>
          {"See Also",l,"SeeAlso"},
        _:>Sequence@@{}
        }],
      Replace[generateGuideRefs[relatedGuides],{
        l:{__}:>
          {
            "Related Guides",
            l,
            "MoreAbout"
            },
        _:>Sequence@@{}
        }],
      Replace[generateUrlRefs[sym],{
        l:{__}:>
          { "URL",l,"URLMenu"},
        _:>Sequence@@{}
        }]
    ];
iGenerateAnchorBar~SetAttributes~HoldAll


(* ::Subsubsection::Closed:: *)
(*TitleCell*)



iGenerateTitleCell[sym_]:=
  Cell[
    docSymbolNameToString[sym],
    "ObjectName"
    ];
iGenerateTitleCell~SetAttributes~HoldFirst;


(* ::Subsubsection::Closed:: *)
(*Usage*)



generateUsageCell[symbol_String,(def:Except[_Rule])|(None->def_)]:=
  Cell[
    TextData[{
      DocGenRefLink[symbol],
      "\[LineSeparator]",
      Replace[def,{
        RawBoxes[b_]:>b,
        Except[_String]:>ToBoxes@def,
        s_String:>
          Cell[RawBoxes@s,"","InlineFormula"]
        }]
      }]
    ];
generateUsageCell[symbol_String,pattern_->def_]:=
  Cell[
    TextData[{
      Cell[
        BoxData@
          ReplaceAll[
            holdPatternStrippedBoxes[pattern],{
            s_String?makeRefTest:>
              DocGenRefLink[s,False],
            s_String?docSymStringPat:>(
              StyleBox[Last@StringSplit[s,"`"],"TI"]
              ),
            StyleBox[s_String?docItalStringPat,o___]:>(
              StyleBox[s,"TI",o]
              )
            }],
        "InlineFormula",
        FormatType->TraditionalForm
        ],
            "\[LineSeparator]",
      Replace[def,{
        RawBoxes[b_]:>b,
        Except[_String]:>ToBoxes@def,
        s_String:>
          Cell[RawBoxes@s,"","InlineFormula"]
        }]/.{
          s_String?(StringMatchQ["\"*\""]):>
              StyleBox[s,ShowAutoStyles->True],
          StyleBox[s_String?docItalStringPat,o___]:>(
              StyleBox[s,"TI",o]
              )
          }
      }]
    ];
generateUsageCell[symbol_Symbol,e_]:=
  generateUsageCell[Evaluate@docSymbolNameToString[symbol],e];
generateUsageCell~SetAttributes~HoldFirst;
iGenerateUsage[symbol_,usages_List]:=
  Cell[BoxData@
    GridBox[{"",generateUsageCell[symbol,#]}&/@usages],"Usage"];
iGenerateUsage[symbol_,None]:=
  Nothing;
iGenerateUsage~SetAttributes~HoldFirst;


(* ::Subsubsection::Closed:: *)
(*Details*)



(*Line/@Join[
	{{{0,6},{RandomChoice@Range[4.5,5,.1],6}}},{
	{#,
		ReplacePart[#,
			1\[Rule]RandomChoice@Range[4.5,5,.1]]}&/@
		Map[{1,6-#}&,Range[5]],
	{#,
		ReplacePart[#,
			1\[Rule]RandomChoice@Range[4.5,5,.1]]}&/@
		Map[{.5,6.5-#}&,Range[5]]
	}];*)


detailsOpenerImage=
  Dynamic@
    Overlay[{
      Overlay[{
        Graphics[{},
          Background->
            If[CurrentValue["MouseOver"],
              RGBColor[0.942,0.978,0.992],
              None
              ],
          ImageSize->{720,70},
          AspectRatio->Full
          ],
        Graphics[{
            If[CurrentValue["MouseOver"],
              RGBColor[0.528,0.585,0.614],
              Black
              ],
            Thin,
            {
              Line[{{0,6},{4.6`,6}}],
              Line[{
                {{1,5},{4.8`,5}},
                {{1,4},{4.8`,4}},
                {{1,3},{4.7`,3}},
                {{1,2},{4.6`,2}},
                {{1,1},{4.9`,1}}
                }],
              Line[{
                {{0.5`,5.5`},{4.9`,5.5`}},
                {{0.5`,4.5`},{4.5`,4.5`}},
                {{0.5`,3.5`},{4.7`,3.5`}},
                {{0.5`,2.5`},{4.6`,2.5`}},
                {{0.5`,1.5`},{4.8`,1.5`}}
                }]
              }
            },
          ImageSize->{170,70},
          AspectRatio->Full]
        },
        Alignment->Left
        ],
      If[CurrentValue["MouseOver"],Image[CompressedData["
1:eJzdmc9vE0cUxyNAosfeckGIXnujJy6tVKk9VOLStFVz4AIlRD00VQMSouXQ
/hEIIfXAta0qFTggkBqpCA40CSUJtKX8ik1i4ti7XjuJfyQkw/uud52345nx
7I+A1cM3tuPdnfeZN+/HjN869vXQiV0DAwMn36A/Q0dPvz8+fvTMJ2/Sh8/G
Tn45OjZy/KOxUyOjI+OHju2mf74TaA9JCPG/kdfaTKr9pCOkC6TbpBJJBNoi
FUk3SedIw6TBFGMplZJjnPQ7szmOrpNGXzPHWdLdhPbLukUae8UcB1PMfy9d
JR14BRznTXaU1tbFvLMq/lmqirsLrpjMlcWf8yVf0/R+ZtEV/xZrIl+pC6ex
oXtOjfQp3TMQV5YcP+rsX/AaYrZQ6dhsoykSeIsrLR3P+R3gUDIsrbbE7GI8
+1X6u1gV5brSP7FYenAo19ITdy21/Vx38mWxWG2oWIYy4DioYniwXMuUgStH
8yON55L2peToyks7yRAKeUAa90oKjrNJ1hLi9z7FL+a1QDFcWtsQy6vrtGaa
4rFbt84HhVpTZjmekCNS4xDTvcZ+sLxC8fpCVFpbEXmBws9LxHXvuWd81vQz
R7iNF5zjRgKOb2RfmPLSFMVoe/7IzuZmx94Zdg/e+98F3+Pap7R+TCz/lVZk
nwzH5IjEBeqDiQHz68nzTvZ2cYScgXBt3sAymSvJ+fhyDI79Xb4wrOlCrRXM
72Ysf4QceP/Y0cfdw/Kq7JO9lhxH+H3oNcx+34qul/VtFq0/ePz4n6O+47qT
d2SODy05LvD70C/p8pIf02y9VyQmFUd43fZr+/oFyme6+ZJ6lx8sOW5zDvRA
qmcjt8p283Wvio9O/ATXyPGEuVeNNe9E6sklSw6+j/P7VtWzc24jErN8vXuG
+JBjiAu9sGos1F5m0z1Ljsh65L13JL59X7dt1YnfO+n37fpr/Xh31bkLtYbZ
VEjCoVuzqNMYW/d9XMFHuhyMfMlsqlpybNlwFNc2fH9kxmGoJXOFiD+eWXIU
Oce0Zl2hXwpjOYt15RnqCHIKs+kvS46bnAN7UdWzsZbDnNlV23R5l8W3Jwnf
3dfkRqk/+dWS4xzn0OWQuQKrB5J94asq77ZZN4UncZeb+pySr0T2JN9Zcgxz
DlP/E/ZVPOdymfqrSB9AelrR93DoKZhN71lyDHIOnGtMaZ6PfMgZqlIdUXJI
9Q+vTkNfA2eofkk5dI8lB3TNpqZDTyhOIvWczbOuT5TXFM4ZdM+XavnPOgYN
xyjnQH+jG6e9frdZtmPX3LeH/nhYUvdvEPYEbjOylzockwO6xVlMc+bnL8qZ
jrTvU3GEa8/1/WDe60u+mDAxGDi+4hzYz+BsxjQubM1jPyL1XTyvlf2Yrmvj
gQt1nO1tq6S3E3BAVzkLzpd6jQ3BRuRr+AhrDj3lI9oPoT7ocmsWLAaOA8G9
LA9ne/6WJUuP88QhuXc01ZTXyWJxvtt1Nvp8pemfzfQTi+V5excLnoneB+ca
SW1D7kDc257PmVhi/P7xMcmReZDLcK4Rxz/oP2F/WB9gW1qWmL9H7SNdkVl4
zUTex14UfQv6SewfkKvgO8TWcn1deW9aloS/D35B+kPHE1MTYV7MiiUGR6jP
SZcT2v+TF/QasCFLlgQcofaSPiB9T/qNNEtaJHmkHGmK9AvpW9K7pN1y3syK
JSWHsfexVVKWOXYW0Q8cSViQ9/lvcv3CEYdFZug3DhsWFUM/cphYdAz9yqFi
QUzrGEgX03LssDosBl1MUQf7haXD8BJ6c/TW
"], "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 0.5],Image[CompressedData["
1:eJztmctL1FEUx4cUbNnOjYht29mqTUFQi6BNU5ELN5omLZpIg6hc1B8hIrRo
WxGULqQgoZzxAer4yPcDZJzxnY6Kb+Z2vsPMdOd67/3d30NnFh34huXv3ns+
93HOubeL1U/9j875fL6G8/SHv+rF9fr6qpd3L9Bf7gcaHtcFamtuBZ7X1tXW
X6kuoH+8nFIhiTH2X4yVkipJLaRe0ir7ZwnSMilIaiJVkIrzwGde9aQfzJl9
J9Xl2P9G0qBD/0ULkQJn7H85cz7/VtZOKjsDhmadE7u7u2xhYYGNjY2xvr4+
FgqFWGdnZ1JdXV1sYGCATU5OsqWlJXZ4eKjqZot0j9r47MqQ4Z1q4NXVVTY4
OJjx2UTBYDDJu7W1peq2+RQ4pAzb29ssHA7b8l+m8fFxdnBw4JrFgkG6lyKR
SHJO3TKk1d3dzdbX12VD+T3gKBc7TSQSbGpqyjP/RS0uLopD/iGVuOQ4EZdO
k0HD0uaCo1G2l6x8wF4bHR1N+hKPx9ne3l4yjm1sbCTbm8aDzc1NcfgahxxZ
OQ5n2uo8TE9Pq84rE/saGRnR9tXb28uOjo74Zr8ccDwTx9bFJZxRzLdoyBfp
b/CzaNFoVMsyMzMjNqmwyZF1LpAfdAw7OzvSebfigK2srGj36P7+Pv95qw2O
UnEs3Z6WrYMdDtj8/Lyy/7m5OfHzIkOOSr4RzqjuPOjMlAOxnP9WPCeC3TTk
aOEboV5SrbnVmTblgK2trSnnS6hd3hpyZE0AaiBZ34itVmaHA2vS09MjHQtz
ydlXQw7+HpesW2V9S3KVKw7YxMSEdCzkXs5+G3JkGV9780KOS/uqEt8WP+u+
hanyLHINZzEnHKo9izyt+71dwXAvkf0O8ZKzuCFHwoQDceysOIaHh3mXIoYc
y3wj3ONkfafzhpf7SpVHhJgSNuQI8o1UcR172crsnnP4KxtLqE8+G3I08Y1w
nzbYs645jo+PlTFFiI2vDTkq+EaqPQuhbvWKIxaLWcaUlF0z5CjmG+FdQ1Wv
C/HQMQfqc1UO7O/vFz8vNOSAvvENVTkdEnKtIw68Mxj2/1HFoOCo4xujvlGN
A6H2dsoxOzur7Bd3Apwbzm7b5IBCpnMGIWaiRjLlwF6y6lNYiw4dg4bjCd8J
alvMj25c+Iq6VeThDfOLe6DqPPBCTOTutiiELjnggNp5H/C+ZDU2BB9R8yHH
IN4hbmK9kB9UsdULFg1HWaptxuCTHT+8kCmLhgPyi3sDc+zlW6JXLBYc0Im3
Ubwv4c6ZTywGHFIW9Inax83aIHbg3Ju+z+lYDDmgO6QTj8l4m8G7hp31QWyD
/+n8AN/cstjggEpIbSJL2pAzEfdxF0XdMjQ0lLw/IFZh7XC2hHopa33dsNjk
SOsh6aeKx6Z1pHzJFQv0gNTq0P8PLFVrpHzINQtURLpBekP6QsJlNErCw/k8
qY/0ifSKdJVUIImbXrG44dDWPqZyyoJzyFnOOZywIO4L/yeXFxx2WCQMecVh
wqJgyDsOHYuGIS85ZCw40xqG9245TlkZFo3lO4MJS4bhL7E9ExQ=
"], "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 0.5]]
      },
      Alignment -> {-.85, Center}
      ];


detailsOpenerCellImage[cell_]:=
  With[{r=
    Riffle[
      Prepend[
        Take[
          Flatten@
            ImagePartition[
              #,
              {First@ImageDimensions[#],70},
              Padding->GrayLevel[1,0]
              ]&@
            ImageResize[
              ColorReplace[
                ImageCrop@
                  Rasterize[
                    Notebook[
                      Flatten@{cell},
                      StyleDefinitions->
                        Notebook[{
                          Cell[
                            StyleData[
                              StyleDefinitions->
                                FrontEnd`FileName[{"Wolfram"},
                                  "Reference.nb",CharacterEncoding->"UTF-8"]
                              ]
                            ],
                          Cell[StyleData[All],
                            FontWeight->Bold,
                            FontSize->44
                            ]
                          }],
                      WindowSize->Automatic,
                      Magnification->.5
                      ],
                    "Image"
                    ],
                White->GrayLevel[1,0]
                ],
              170
              ],
          UpTo[4]
          ],
        ""
        ],
      Spacer[10]
      ]
    },
    Dynamic@
      Overlay[{
        Graphics[{},
          Background->
            If[CurrentValue["MouseOver"],
              RGBColor[0.942,0.978,0.992],
              None
              ],
          ImageSize->{720,70},
          AspectRatio->Full
          ],
        Pane[
          Grid[List@r,Spacings->{0,0},Alignment->{Center,Center}],
          ImageSize->{720,70},
          Alignment->{Left,Center}
          ],
        If[CurrentValue["MouseOver"],Image[CompressedData["
1:eJzdmc9vE0cUxyNAosfeckGIXnujJy6tVKk9VOLStFVz4AIlRD00VQMSouXQ
/hEIIfXAta0qFTggkBqpCA40CSUJtKX8ik1i4ti7XjuJfyQkw/uud52345nx
7I+A1cM3tuPdnfeZN+/HjN869vXQiV0DAwMn36A/Q0dPvz8+fvTMJ2/Sh8/G
Tn45OjZy/KOxUyOjI+OHju2mf74TaA9JCPG/kdfaTKr9pCOkC6TbpBJJBNoi
FUk3SedIw6TBFGMplZJjnPQ7szmOrpNGXzPHWdLdhPbLukUae8UcB1PMfy9d
JR14BRznTXaU1tbFvLMq/lmqirsLrpjMlcWf8yVf0/R+ZtEV/xZrIl+pC6ex
oXtOjfQp3TMQV5YcP+rsX/AaYrZQ6dhsoykSeIsrLR3P+R3gUDIsrbbE7GI8
+1X6u1gV5brSP7FYenAo19ITdy21/Vx38mWxWG2oWIYy4DioYniwXMuUgStH
8yON55L2peToyks7yRAKeUAa90oKjrNJ1hLi9z7FL+a1QDFcWtsQy6vrtGaa
4rFbt84HhVpTZjmekCNS4xDTvcZ+sLxC8fpCVFpbEXmBws9LxHXvuWd81vQz
R7iNF5zjRgKOb2RfmPLSFMVoe/7IzuZmx94Zdg/e+98F3+Pap7R+TCz/lVZk
nwzH5IjEBeqDiQHz68nzTvZ2cYScgXBt3sAymSvJ+fhyDI79Xb4wrOlCrRXM
72Ysf4QceP/Y0cfdw/Kq7JO9lhxH+H3oNcx+34qul/VtFq0/ePz4n6O+47qT
d2SODy05LvD70C/p8pIf02y9VyQmFUd43fZr+/oFyme6+ZJ6lx8sOW5zDvRA
qmcjt8p283Wvio9O/ATXyPGEuVeNNe9E6sklSw6+j/P7VtWzc24jErN8vXuG
+JBjiAu9sGos1F5m0z1Ljsh65L13JL59X7dt1YnfO+n37fpr/Xh31bkLtYbZ
VEjCoVuzqNMYW/d9XMFHuhyMfMlsqlpybNlwFNc2fH9kxmGoJXOFiD+eWXIU
Oce0Zl2hXwpjOYt15RnqCHIKs+kvS46bnAN7UdWzsZbDnNlV23R5l8W3Jwnf
3dfkRqk/+dWS4xzn0OWQuQKrB5J94asq77ZZN4UncZeb+pySr0T2JN9Zcgxz
DlP/E/ZVPOdymfqrSB9AelrR93DoKZhN71lyDHIOnGtMaZ6PfMgZqlIdUXJI
9Q+vTkNfA2eofkk5dI8lB3TNpqZDTyhOIvWczbOuT5TXFM4ZdM+XavnPOgYN
xyjnQH+jG6e9frdZtmPX3LeH/nhYUvdvEPYEbjOylzockwO6xVlMc+bnL8qZ
jrTvU3GEa8/1/WDe60u+mDAxGDi+4hzYz+BsxjQubM1jPyL1XTyvlf2Yrmvj
gQt1nO1tq6S3E3BAVzkLzpd6jQ3BRuRr+AhrDj3lI9oPoT7ocmsWLAaOA8G9
LA9ne/6WJUuP88QhuXc01ZTXyWJxvtt1Nvp8pemfzfQTi+V5excLnoneB+ca
SW1D7kDc257PmVhi/P7xMcmReZDLcK4Rxz/oP2F/WB9gW1qWmL9H7SNdkVl4
zUTex14UfQv6SewfkKvgO8TWcn1deW9aloS/D35B+kPHE1MTYV7MiiUGR6jP
SZcT2v+TF/QasCFLlgQcofaSPiB9T/qNNEtaJHmkHGmK9AvpW9K7pN1y3syK
JSWHsfexVVKWOXYW0Q8cSViQ9/lvcv3CEYdFZug3DhsWFUM/cphYdAz9yqFi
QUzrGEgX03LssDosBl1MUQf7haXD8BJ6c/TW
"], "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 0.5],Image[CompressedData["
1:eJztmctL1FEUx4cUbNnOjYht29mqTUFQi6BNU5ELN5omLZpIg6hc1B8hIrRo
WxGULqQgoZzxAer4yPcDZJzxnY6Kb+Z2vsPMdOd67/3d30NnFh34huXv3ns+
93HOubeL1U/9j875fL6G8/SHv+rF9fr6qpd3L9Bf7gcaHtcFamtuBZ7X1tXW
X6kuoH+8nFIhiTH2X4yVkipJLaRe0ir7ZwnSMilIaiJVkIrzwGde9aQfzJl9
J9Xl2P9G0qBD/0ULkQJn7H85cz7/VtZOKjsDhmadE7u7u2xhYYGNjY2xvr4+
FgqFWGdnZ1JdXV1sYGCATU5OsqWlJXZ4eKjqZot0j9r47MqQ4Z1q4NXVVTY4
OJjx2UTBYDDJu7W1peq2+RQ4pAzb29ssHA7b8l+m8fFxdnBw4JrFgkG6lyKR
SHJO3TKk1d3dzdbX12VD+T3gKBc7TSQSbGpqyjP/RS0uLopD/iGVuOQ4EZdO
k0HD0uaCo1G2l6x8wF4bHR1N+hKPx9ne3l4yjm1sbCTbm8aDzc1NcfgahxxZ
OQ5n2uo8TE9Pq84rE/saGRnR9tXb28uOjo74Zr8ccDwTx9bFJZxRzLdoyBfp
b/CzaNFoVMsyMzMjNqmwyZF1LpAfdAw7OzvSebfigK2srGj36P7+Pv95qw2O
UnEs3Z6WrYMdDtj8/Lyy/7m5OfHzIkOOSr4RzqjuPOjMlAOxnP9WPCeC3TTk
aOEboV5SrbnVmTblgK2trSnnS6hd3hpyZE0AaiBZ34itVmaHA2vS09MjHQtz
ydlXQw7+HpesW2V9S3KVKw7YxMSEdCzkXs5+G3JkGV9780KOS/uqEt8WP+u+
hanyLHINZzEnHKo9izyt+71dwXAvkf0O8ZKzuCFHwoQDceysOIaHh3mXIoYc
y3wj3ONkfafzhpf7SpVHhJgSNuQI8o1UcR172crsnnP4KxtLqE8+G3I08Y1w
nzbYs645jo+PlTFFiI2vDTkq+EaqPQuhbvWKIxaLWcaUlF0z5CjmG+FdQ1Wv
C/HQMQfqc1UO7O/vFz8vNOSAvvENVTkdEnKtIw68Mxj2/1HFoOCo4xujvlGN
A6H2dsoxOzur7Bd3Apwbzm7b5IBCpnMGIWaiRjLlwF6y6lNYiw4dg4bjCd8J
alvMj25c+Iq6VeThDfOLe6DqPPBCTOTutiiELjnggNp5H/C+ZDU2BB9R8yHH
IN4hbmK9kB9UsdULFg1HWaptxuCTHT+8kCmLhgPyi3sDc+zlW6JXLBYc0Im3
Ubwv4c6ZTywGHFIW9Inax83aIHbg3Ju+z+lYDDmgO6QTj8l4m8G7hp31QWyD
/+n8AN/cstjggEpIbSJL2pAzEfdxF0XdMjQ0lLw/IFZh7XC2hHopa33dsNjk
SOsh6aeKx6Z1pHzJFQv0gNTq0P8PLFVrpHzINQtURLpBekP6QsJlNErCw/k8
qY/0ifSKdJVUIImbXrG44dDWPqZyyoJzyFnOOZywIO4L/yeXFxx2WCQMecVh
wqJgyDsOHYuGIS85ZCw40xqG9245TlkZFo3lO4MJS4bhL7E9ExQ=
"], "Byte", ColorSpace -> "RGB", Interleaving -> True, Magnification -> 0.5]]
        },
        Alignment -> {-.85, Center}
        ]
    ];


detailsOpenerCell[c_:None]:=
  With[{
    detailsOpenerImage=
      If[c===None,
        detailsOpenerImage,
        detailsOpenerCellImage[c]
        ]
    },
    Cell[
      BoxData@ToBoxes@
        Button[detailsOpenerImage,
          CurrentValue[EvaluationNotebook[], 
            {TaggingRules, "Openers", "NotesSection"}]=Open,
          Appearance->None
          ],
      "NotesThumbnails",
      CellOpen-> 
        FEPrivate`If[FEPrivate`Less[FEPrivate`$VersionNumber,11.1],
          False,
          FEPrivate`Not[
            FEPrivate`Or[
              FEPrivate`SameQ[
                FrontEnd`CurrentValue[
                  FrontEnd`EvaluationNotebook[], 
                    {TaggingRules, "Openers", "NotesSection"}
                    ], 
                Open
                ],
              FEPrivate`SameQ[
                FrontEnd`CurrentValue[
                  FrontEnd`EvaluationNotebook[], 
                  {TaggingRules, "Openers", "NotesSection"}
                  ], 
                True
                ]
              ]
            ]
          ]
      ]
    ];


iGenerateDetails[details:{__}]:=
  With[{c=
    generateDetailsSection/@details
    },
    openerCellGroup[
      {
        Cell[TextData@"Details","NotesFrameText"],
        "NotesSection"
        },
      c,
      detailsOpenerCell[c]
      ]
    ];
iGenerateDetails[None|{}]:=
  Nothing;


(* ::Subsubsection::Closed:: *)
(*Examples*)



iGenerateExamples[sym_,exampleSections_]:=
    generateExamplesSections@
      Join[
        exampleSections,
        If[Not@MemberQ[First/@exampleSections,"Options"]&&
          Length@Options@Unevaluated[sym]>0,
          {
            "Options"->
              Map[
                ToString[#]->""&,
                Keys@Options@Unevaluated[sym]
                ]
            },
          {}
          ]
        ];
iGenerateExamples~SetAttributes~HoldAll;


(* ::Subsubsection::Closed:: *)
(*Footers*)



generateSeeAlsoSection[seeAlso:{__}]:=
  Cell[
    CellGroupData[{
      Cell["See Also", "SeeAlsoSection"],
      Cell[
        TextData@
          Flatten@
            If[Length@#>1,
              Riffle[#,
                {{"\[NonBreakingSpace]",StyleBox["\[MediumSpace]\[FilledVerySmallSquare]\[MediumSpace]", "InlineSeparator"]," "}}
                ],
              #]&[
              SymbolPageSeeAlsoRefLink/@
                DeleteCases[
                  Replace[
                    Replace[Thread[Hold[seeAlso]],
                      Hold[h_Hold]:>h,
                      1],{
                    Hold[s_Symbol]:>
                      Function[#->#]@ToString@Unevaluated[s],
                    Hold[k_->v_String]:>
                      k->"paclet:"<>v
                    },
                    1],
                  _String?(StringMatchQ[Whitespace])
                  ]
                ],
        "SeeAlso"]
      },
    Open]];
generateSeeAlsoSection[{}|None]:=
  Nothing;
generateSeeAlsoSection~SetAttributes~HoldFirst;


generateRelatedGuidesSection[relatedGuides:{__}]:=
  Cell[CellGroupData[Flatten@{
    Cell["Related Guides","MoreAboutSection"],
    SymbolPageGuideRefLink/@
      Replace[relatedGuides,
        s_String:>(s->s),
        1]
    },
    Open]];
generateRelatedGuidesSection[{}|None]:=
  Nothing;


generateRelatedTutorialsSection[relatedTutorials:{__}]:=
  Cell[CellGroupData[Flatten@{
    Cell["Related Tutorials","RelatedTutorialsSection"],
    Cell[BoxData@
      TemplateBox[{
        Cell[TextData@First@#],
          pacletLinkBuild[Last@#,"tutorial"]},
        "RefLinkPlain",
        BaseStyle->{"InlineFormula"}],
      "RelatedTutorials"
      ]&/@
      Replace[relatedTutorials,
        s_String:>(s->s),
        1]
    },
    Open]];
generateRelatedTutorialsSection[{}|None]:=
  Nothing;


generateRelatedLinksSection[relatedLinks:{__}]:=
  Cell[CellGroupData[Flatten@{
    Cell["Related Links","RelatedLinksSection"],
    Cell[
      TextData@
        Cell[
          BoxData@
            TemplateBox[{First@#, Last@#},
              "WebLink",
              BaseStyle->{"RelatedLinks"}
              ]
          ],
      "RelatedLinks"
      ]&/@
      Replace[relatedLinks,
        s_String:>(s->s),
        1]
    },
    Open]];
generateRelatedLinksSection[{}|None]:=
  Nothing;


iGenerateFooter[seeAlso_,guides_,tutorials_,links_,note_]:=
  Cell[
    CellGroupData[{
      generateSeeAlsoSection@seeAlso,
      generateRelatedGuidesSection@guides,
      generateRelatedTutorialsSection@tutorials,
      generateRelatedLinksSection@links,
      If[note===None,Nothing,Cell[note,"History"]],
      Cell[" ","FooterCell"]
      },
      Open]];
iGenerateFooter~SetAttributes~HoldFirst;


(* ::Subsubsection::Closed:: *)
(*Metadata*)



iGenerateMetadata[sym_,ops___]:=
  With[{s=ToString@Unevaluated[sym]},
    docMetadata@
      DeleteDuplicatesBy[First]@{
        ops,
        "Context"->DocGenLinkBase@s,
        "Keywords"->s,
        "Label"->docSymType@sym,
        "Summary"->
          Replace[sym::usages,
            Except[_String]:>
              Replace[sym::usage,Except[_String]->Automatic]
            ],
        "Title"->s,
        "WindowTitle"->s,
        "Type"->"Symbol",
        "URI"->StringTrim[pacletLinkBuild[s],"paclet:"]
        }
    ];
iGenerateMetadata~SetAttributes~HoldFirst


(* ::Subsubsection::Closed:: *)
(*iDocGenGenerateSymbolPages*)



iDocGenGenerateSymbolPages[symbol_,usages_,details_,examples_,
  seeAlso_,relatedGuides_,relatedTutorials_,relatedLinks_,
  footer_]:=
  Block[{cid=1},
    docGenBlock@
      With[{
        cells=
          {
            iGenerateAnchorBar[symbol,seeAlso,relatedGuides],
            iGenerateTitleCell[symbol],
            iGenerateUsage[symbol,usages],
            iGenerateDetails[details],
            Cell["","PageDelimiter"],
            iGenerateExamples[symbol,examples],
            iGenerateFooter[
              seeAlso,relatedGuides,
              relatedTutorials,relatedLinks,
              footer]
            }
        },
        Notebook[cells//.Cell[e__,l:Except[CellID->_]]:>
          RuleCondition[
            With[{cnew=(cid++)},
              Cell[e,l,CellID->cnew]
              ],
            True
            ],
          StyleDefinitions->
            Notebook[{
              Cell[
                StyleData[
                  StyleDefinitions->
                    FrontEnd`FileName[{"Wolfram"},
                      "Reference.nb",CharacterEncoding->"UTF-8"]
                  ]
                ],
              Cell[StyleData["Notebook"],
                DockedCells->
                  {
                    First@
                      FrontEndResource["FEExpressions","HelpViewerToolbar"],
                    Cell["",
                      CellSize->{1,1},
                      CellOpen->False,
                      CellFrame->{{0,0},{2,0}},
                      CellFrameColor->docTypeColor@docSymType@symbol
                      ]
                    }
                ],
              Cell[StyleData["DockedCell"],
                CellFrame->{{0,0},{1,0}},
                CellFrameColor->docTypeColor@docSymType@symbol
                ]
              }],
            TaggingRules->{
              "ColorType"->"SymbolColor",
              "ModificationHighlight"->False,
              "LinkTrails"->"",
              "HasOptions"->
                (Not@FreeQ[cells,Cell["Options","ExampleSection"]]),
              "SearchTextTranslated" -> "",
              "Metadata"->
                iGenerateMetadata[symbol],
              "NewStyles"->True,
              "Openers"->
                Replace[
                  (First@First@#->Map[Last@First@#->Last@#&,Last@#]&)/@
                    Normal[
                      DeleteDuplicates/@GroupBy[
                        Cases[cells,
                          HoldPattern[
                            CurrentValue[_,{TaggingRules,"Openers",data__},___]
                            ]:>
                            RuleCondition[
                              With[{d={data}},
                                d->
                                  If[
                                    MatchQ[d,
                                      {"PrimaryExamplesSection"}|
                                      {"ExampleSection","0"}
                                      ],
                                    Open,
                                    Closed
                                    ]
                                ],
                              True
                              ],
                          \[Infinity]
                          ],
                        First]
                      ],
                  (c_->{c_->s_}):>(c->s),
                  1
                  ]
              },
            Saveable->False
            ]
          ]
    ];
iDocGenGenerateSymbolPages~SetAttributes~HoldAll;


(* ::Subsubsection::Closed:: *)
(*SymbolPageNotebook*)



Options[SymbolPageNotebook]=
  Join[
    {
      "Usage"->Automatic,
      "Details"->Automatic,
      "Examples"->Defer,
      "SeeAlso"->Automatic,
      "RelatedGuides"->{},
      "RelatedTutorials"->{},
      "RelatedLinks"->{},
      "Footer":>
        Replace[$DocGenFooter,
          Except[_String|_TextData]:>
            "Auto-Generated Documentation"
          ]
      },
    Options[Notebook]
    ];
SymbolPageNotebook[s_Symbol, ops:OptionsPattern[]]:=
  With[{
    seeAlso=
      Replace[OptionValue@"SeeAlso",
        Automatic:>
          ToExpression[relatedFunctionNames[s],StandardForm,Hold]
        ],
    guides=OptionValue@"RelatedGuides",
    tutorials=OptionValue@"RelatedTutorials",
    links=OptionValue@"RelatedLinks",
    details=
      Replace[OptionValue@"Details",
        Automatic:>
          scrapeDetails@AutoGenerateDetails[s]
        ],
    examples=
      Replace[OptionValue@"Examples",{
        Automatic:>
          scrapeExamples@AutoGenerateExamples[s],
        Defer:>
          scrapeExamples@AutoGenerateExamples[s,True]
        }],
    usage=
      Replace[
        OptionValue@"Usage",
        Automatic:>
          scrapeUsages@AutoGenerateUsage[s]
        ],
    footer=OptionValue@"Footer"
    },
    Join[
      iDocGenGenerateSymbolPages[
        s,usage,details,examples,
        seeAlso,guides,tutorials,links,footer
        ],
      Notebook@
        FilterRules[{ops}, Options[Notebook]]
      ]
    ];
SymbolPageNotebook[s_String,ops:OptionsPattern[]]:=
  With[{ns=Names[s]},
    If[Length@ns===0||Length@ns>1,
      DocContextTemplate@s,
      ToExpression[s,StandardForm,
        GeneralUtilities`HoldFunction[
          SymbolPageNotebook[#, ops]
          ]
        ]
      ]
    ]
SymbolPageNotebook~SetAttributes~HoldFirst;


(* ::Subsubsection::Closed:: *)
(*AutoGenerateUsage*)



(* ::Subsubsubsection::Closed:: *)
(*autoGenerateUsageCallPatterns*)



autoGenerateUsageCallPatterns[sym_]:=
  Replace[
    usagePatternReplace[
      Map[First,
        Join@@
          Map[dgSymValues[sym,#]&,
            {UpValues,DownValues,SubValues}
            ]
        ]
      ],{
    l:{__}:>
      Map[
        Cell[
          Replace[#,{
            None:>
              BoxData@ToString@Unevaluated@sym,
            Verbatim[HoldPattern][Verbatim[HoldPattern][e_]]:>
              Replace[
                FixedPoint[
                  Replace[
                    Verbatim[HoldPattern][Verbatim[HoldPattern][p_]]:>
                      HoldPattern[p]
                    ],
                  HoldPattern[e]
                  ],
                Verbatim[HoldPattern][e2_]:>
                  BoxData@toSafeBoxes[Unevaluated[e2],StandardForm]
                ],
            Verbatim[HoldPattern][e_]:>
              BoxData@toSafeBoxes[Unevaluated[e],StandardForm]
            }],
          "UsageInput"
          ]&,
        l
        ],
    {}:>
      {
        Cell[BoxData@toSafeBoxes[Unevaluated[sym],StandardForm],
          "UsageInput"]
        }
    }
  ];
autoGenerateUsageCallPatterns~SetAttributes~HoldFirst


(* ::Subsubsubsection::Closed:: *)
(*usageSplitChunkByName*)



usageSplitChunkByNameValidate[b_]:=
  StringCount[b, "["]==StringCount[b, "]"]&&
  (StringCount[b, "]"]==0||
    With[{sc2=StringSplit[b, "["][[2]]},
      StringCount[sc2, "["]!=StringCount[sc2, "]"]
      ]);
usageSplitChunkByName[u_, name_]:=
  Replace[
    StringSplit[u, 
      chunk:name~~(
        Whitespace|
        (("["~~b__~~"]")/;usageSplitChunkByNameValidate[b])
        ):>chunk
      ],
    s:{__String}:>{s}
    ]


(* ::Subsubsubsection::Closed:: *)
(*autoGenerateUsage*)



(* ::Subsubsubsubsection::Closed:: *)
(*autoGenerateUsageValidStart*)



autoGenerateUsageValidStart[sym_, name_, u_String]:=
  With[
    {
      test=
        AnyTrue[
        {
          System`Private`HasDownCodeQ,
          System`Private`HasSubCodeQ,
          System`Private`HasUpCodeQ,
          Function[Null, Length@DownValues[#]>0, HoldFirst],
          Function[Null, Length@SubValues[#]>0, HoldFirst],
          Function[Null, Length@UpValues[#]>0, HoldFirst]
          },
        #@sym&
        ]
      },
    (test&&StringStartsQ[u, name~~"["])||
      (!test&&StringStartsQ[u, name])
    ];
autoGenerateUsageValidStart[___]:=False;
autoGenerateUsageValidStart~SetAttributes~HoldFirst;


(* ::Subsubsubsubsection::Closed:: *)
(*autoGenerateUsage*)



autoGenerateUsage[sym_Symbol]:=
  With[
    {
      u1=Replace[sym::usage, s_String:>StringTrim[s]],
      symName=SymbolName[Unevaluated@sym]
      },
    If[autoGenerateUsageValidStart[sym, symName, u1],
      With[
        {bits=usageSplitChunkByName[u1, symName]},
        Map[
          Sequence@@
            {
              Cell[
                BoxData@ToExpression[#[[1]], StandardForm, toSafeBoxes],
                "UsageInput"
                ],
              Cell[
                #[[2]],
                "UsageText"
                ]
              }&,
          bits
          ]
        ],
      With[
        {
          vals=autoGenerateUsageCallPatterns[sym]
          },
        With[{s=
          If[StringQ@sym::usages,
            StringTrim@StringSplit[sym::usages, "\n"],
            {
              Replace[sym::usage,
                Except[_String]:>
                  If[Length@vals>0, "No usage...", "Has no definitions..."]
                ]
              }
            ]
          },
          If[Length@s>=Length@vals,
            With[{u=Flatten@ConstantArray[vals,Length@s]~Take~Length@s},
              Riffle[u, Cell[#,"UsageText"]&/@s]
              ],
            Append[
              Riffle[vals,
                Cell[StringTrim@StringJoin@Riffle[s,"\n"],"UsageText"]
                ],
              Cell[StringTrim@StringJoin@Riffle[s,"\n"],"UsageText"]
              ]
            ]
          ]
        ]
      ]
    ];
autoGenerateUsage~SetAttributes~HoldFirst


(* ::Subsubsubsection::Closed:: *)
(*AutoGenerateUsage*)



AutoGenerateUsage[sym_Symbol]:=
  With[
    {
      u=sym::usage,
      name=SymbolName[Unevaluated[sym]],
      namePat=SymbolName[Unevaluated[sym]]~~"["~~__~~"]"
      },
    If[StringQ@u&&StringContainsQ[u, namePat],
      With[{splits=StringSplit[u, p:namePat:>p]},
        Flatten@Map[
          {
            Cell[BoxData@FE`reparseBoxStructure[#[[1]], name], "UsageInput"],
            Cell[#[[2]], "UsageText"]
            }&,
          Block[{splitMe=True},
            SplitBy[
              If[StringContainsQ[splits[[1]], namePat],
                splits,
                Rest@splits
                ],
              Function[
                If[StringContainsQ[#, namePat],
                  splitMe=Not@splitMe
                  ];
                splitMe
                ]
              ]
            ]
          ]
        ],
      autoGenerateUsage[sym]
      ]
    ];
AutoGenerateUsage[s:Except[_Symbol]?(MatchQ[#,_Symbol]&)]:=
  AutoGenerateUsage@System`Evaluate@s;
AutoGenerateUsage~SetAttributes~HoldFirst;


(* ::Subsubsection::Closed:: *)
(*AutoGenerateExamples*)



AutoGenerateExamples[sym_,defer:True|False:False]:=
  With[
    {
    vals=
      Map[First,
        Join@@
          Map[dgSymValues[sym,#]&,
            {UpValues,DownValues,SubValues}
            ]
        ]},
    Flatten@{
      With[{c=Context[sym]},
        If[MemberQ[$ContextPath,c]&&Not@MatchQ[c,"Global`"|"System`"],
          {
            Cell["Load "<>StringTrim[c,"`"]<>":","ExampleText"],
            If[!defer,
              ToExpression@RowBox@{"Needs","[","\""<>c<>"\"","]"}
              ];
            Cell[BoxData@RowBox@{"Needs","[","\""<>c<>"\"","]"},
              "ExamplesInput",
              InitializationCell->True
              ]
            },
          Nothing
          ]
        ],
      Flatten@Riffle[
        Cell[TextData@{"From ",
          inlineRefBox@Replace[usagePatternReplace@#,
              Verbatim[HoldPattern][e_]:>{
                toSafeBoxes[Unevaluated[e],StandardForm]
              }],":"},
          "ExampleText"
          ]&/@vals,
        If[defer,
          Cell[
            BoxData@
              Replace[#,{
                Verbatim[HoldPattern][e_]:>
                  toSafeBoxes[Unevaluated@e,StandardForm]
                }],
            "ExamplesInput"
            ],
          Cell[CellGroupData[{
            Cell[
              BoxData@
                Replace[#,{
                  Verbatim[HoldPattern][e_]:>
                    toSafeBoxes[Unevaluated@e,StandardForm]
                  }],
              "ExamplesInput"
              ],
            Cell[
              BoxData@
                Replace[#,{
                  Verbatim[HoldPattern][e_]:>
                    ToBoxes[e]
                  }],
              "ExamplesOutput"
              ]
            },Open]]
          ]&/@callPatternReplace[vals]
          ],
      AutoGenerateOptionExamples[sym,defer],
      Cell[CellGroupData[{
        Cell["Definitions","ExampleSection"],
        Cell["Examine all definitions:","ExampleText"],
        Cell[
          BoxData@
            RowBox@{
              "GeneralUtilities`PrintDefinitionsLocal",
              "[",
              Block[{$ContextPath},ToString[Unevaluated@sym,InputForm]],
              "]"
              },
          "ExamplesInput"
          ]
        }]]
      }
    ];
AutoGenerateExamples[
  e:Except[_Symbol]?(MatchQ[#,_Symbol]&),
  defer:True|False:False]:=
  AutoGenerateExamples[System`Evaluate@e,defer];
AutoGenerateExamples~SetAttributes~HoldFirst


(* ::Subsubsection::Closed:: *)
(*AutoGenerateOptionExamples*)



AutoGenerateOptionExamples[sym_Symbol,defer:True|False:False]:=
  With[{
    u=
      FirstCase[First/@dgSymValues[sym,DownValues],
        Verbatim[HoldPattern][
          _[
            ___,
            Verbatim[OptionsPattern][]|
            Verbatim[Pattern][_,Verbatim[OptionsPattern][]],
            ___
            ]
          ],
        HoldPattern[sym[OptionsPattern[]]]
        ],
    ops=If[Length@dgSymValues[sym,OwnValues]==0,novelFunctionOptions[sym],{}]
    },
    With[{usages=
      Map[
        First@#->
          callPatternReplace[u,
            Verbatim[OptionsPattern][]->#
            ]&,
        ops
        ]
      },
      If[Length@usages>0,
        Cell[CellGroupData[Flatten@{
          Cell["Options","ExampleSection"],
          Map[
            Cell@
              CellGroupData[Flatten@{
                Cell[ToString@First@#,"ExampleSubsection"],
                If[defer,
                  Cell[
                    BoxData@
                      Replace[Last@#,{
                        Verbatim[HoldPattern][e_]:>
                          toSafeBoxes[Unevaluated@e,StandardForm]
                        }],
                    "ExamplesInput"
                    ],
                  With[{
                    res=
                      Replace[Last@#,{
                        Verbatim[HoldPattern][e_]:>
                          e
                        }]
                    },
                    Cell[CellGroupData[{
                      Cell[
                        BoxData@ToBoxes@
                          Replace[Last@#,{
                            Verbatim[HoldPattern][e_]:>
                              toSafeBoxes[Unevaluated@e,StandardForm]
                            }],
                        "ExamplesInput"
                        ],
                      Cell[
                        BoxData@ToBoxes@res,
                        "ExamplesOutput"
                        ]
                      },Open]]
                    ]
                  ]
                },
                Closed]&,
            usages
            ]
          },Closed]
          ],
        Nothing
        ]
      ]
    ];
AutoGenerateOptionExamples[e:Except[_Symbol]?(MatchQ[#,_Symbol]&),
  defer:True|False:False]:=
  AutoGenerateOptionExamples[System`Evaluate@e,defer];
AutoGenerateOptionExamples~SetAttributes~HoldFirst


(* ::Subsubsection::Closed:: *)
(*AutoGenerateDetails*)



AutoGenerateDetails[sym_Symbol]:=
  With[{
    ovs=dgSymValues[sym,OwnValues],
    dvs=dgSymValues[sym,DownValues],
    uvs=dgSymValues[sym,UpValues],
    svs=dgSymValues[sym,SubValues],
    fvs=dgSymValues[sym,FormatValues],
    hovs=System`Private`HasOwnCodeQ[sym],
    hdvs=System`Private`HasDownCodeQ[sym],
    huvs=System`Private`HasUpCodeQ[sym],
    hsvs=System`Private`HasSubCodeQ[sym],
    hfvs=System`Private`HasSubCodeQ[sym],
    ops=If[Length@dgSymValues[sym,OwnValues]==0,novelFunctionOptions[sym],{}],
    conts=If[Length@dgSymValues[sym,OwnValues]==0,containedFunctionOptions[sym],{}],
    attrs=Flatten@{dgSymValues[sym,Attributes]},
    msgs=
      DeleteCases[dgSymValues[sym,Messages],
        Verbatim[HoldPattern][
          HoldPattern@MessageName[_,"usage"|"usages"]
          ]:>_
        ],
    symBox=inlineRefBox@toSafeBoxes[Unevaluated@sym,StandardForm]
    },
    Flatten@{
      Replace[Length@ovs,{
        0->Nothing,
        1->
          Cell[TextData@{
            symBox,
            " has an immediate value"
            },"DetailsItem"],
        n_:>
          Cell[TextData@{
            symBox,
            " has ",
            ToString@n,
            " immediate values"
            },"DetailsItem"]
        }],
      If[hovs,
        Cell[TextData@{
          symBox,
          " has an internal immediate value"
          },
          "DetailsItem"
          ],
        Nothing
        ],
      If[Length@dvs>0,
        Cell[TextData@{
          symBox,
          " has ",
          ToString@Length@dvs,
          " call",
          If[Length@dvs>1," patterns"," pattern"]
          },"DetailsItem"],
        Nothing
        ],
      If[hdvs,
        Cell[TextData@{
          symBox,
          " has an internal call pattern"
          },
          "DetailsItem"
          ],
        Nothing
        ],
      If[Length@uvs>0,
        Cell[TextData@{
          symBox,
          " has ",
          ToString@Length@uvs,
          " ",
          inlineRefBox@"UpValues",
          If[Length@uvs>1," patterns"," pattern"]
          },"DetailsItem"],
        Nothing
        ],
      If[hdvs,
        Cell[TextData@{
          symBox,
          " has an internal ",
          inlineRefBox@"UpValues",
          " pattern"
          },
          "DetailsItem"
          ],
        Nothing
        ],
      If[Length@svs>0,
        Cell[TextData@{
          symBox,
          " has ",
          ToString@Length@svs,
          " ",
          inlineRefBox@"SubValues",
          If[Length@svs>1," patterns"," pattern"]
          },"DetailsItem"],
        Nothing
        ],
      If[hsvs,
        Cell[TextData@{
          symBox,
          " has an internal ",
          inlineRefBox@"SubValues",
          " pattern"
          },
          "DetailsItem"
          ],
        Nothing
        ],
      If[Length@ops>0,
        {
          Cell[TextData@{
            symBox,
            " has the following ",
            inlineRefBox@"Options"
            },"DetailsItem"],
          Map[
            {
              Cell[TextData@inlineRefBox@
                toSafeBoxes[Evaluate@First@#,StandardForm],
                "DetailsRow"],
              Cell[TextData@inlineRefBox@
                Extract[#,2,toSafeBoxes],
                "DetailsColumn"]
              }&,
            ops
            ]
          },
        Nothing
        ],
      If[Length@conts>0,
        {
          Cell[TextData@{
            symBox,
            " can take any ",inlineRefBox@"Options",
            " from the following"
            },"DetailsItem"],
          Map[
            {
              Cell[TextData@inlineRefBox@ToBoxes[#,StandardForm],
                "DetailsRow"]
              }&,
            conts
            ]
          },
        Nothing
        ],
      If[Length@msgs>0,
        {
          Cell[TextData@{
            symBox,
            " has the following ",
            inlineRefBox@"Messages"
            },"DetailsItem"],
          Map[
            {
              Cell[TextData@inlineRefBox@
                  Replace[First@#,
                    Verbatim[HoldPattern][m_MessageName]:>
                      ToBoxes[Unevaluated[m]]
                    ],
                "DetailsRow"],
                Cell[TextData@inlineRefBox@ToBoxes[Last@#,StandardForm],
                "DetailsColumn"]
              }&,
            msgs
            ]
          },
        Nothing
        ],
      If[Length@attrs>0,
        {
          Cell[TextData@{
            symBox,
            " has the following ",
            inlineRefBox@"Attributes"
            },"DetailsItem"],
          Map[
            Cell[TextData@inlineRefBox@ToBoxes[#,StandardForm],
              "DetailsRow"]&,
            attrs
            ]
          },
        Nothing
        ],
      If[Length@fvs>0||hfvs,
        Cell[
          TextData@{
            symBox,
            " is a formatted symbol"
            },
          "DetailsItem"
          ],
        Nothing
        ]
      }
    ];
AutoGenerateDetails[s:Except[_Symbol]?(MatchQ[#,_Symbol]&)]:=
  AutoGenerateDetails@System`Evaluate@s;
AutoGenerateDetails~SetAttributes~HoldFirst;


(* ::Subsubsection::Closed:: *)
(*SymbolPageGenButton*)



SymbolPageGenButton=
  Button["Generate Ref Pages",
    With[{c=$Context},
      SelectionMove[EvaluationCell[],All,CellGroup,
        AutoScroll->False];
      DocGenGenerateSymbolPages@InputNotebook[];
      If[$Context=!=c,End[]];
      SelectionMove[EvaluationCell[],After,Cell];
      ],
    Method->"Queued"
    ];


(* ::Subsubsection::Closed:: *)
(*SymbolPageTemplate*)



Options[SymbolPageTemplate]=
  {
    "Headers"->{},
    "Footers"->{},
    "Usage"->Automatic,
    "Details"->Automatic,
    "Examples"->Defer,
    "Functions"->Automatic,
    "RelatedGuides"->Automatic,
    "RelatedTutorials"->Automatic,
    "RelatedLinks"->Automatic,
    "CreateDocument"->False
    };


(* ::Subsubsubsection::Closed:: *)
(*symPageTemplate*)



Options[symPageTemplate]=Options[SymbolPageTemplate];
symPageTemplate[s_String, OptionsPattern[]]:=
  Cell[CellGroupData[
    Flatten@{
      Cell[s,"DocSection"],
      Replace[OptionValue@"Usage",{
        Automatic:>
          ToExpression[s,StandardForm,AutoGenerateUsage],
        Default->{
          Cell[BoxData@s,"UsageInput"],
          Cell[
            Replace[
              ToExpression[s,StandardForm,
                GeneralUtilities`HoldFunction[
                  MessageName[#,"usage"]
                  ]
                ],
              Except[_String]:>"Description"],
            "UsageText"]
          },
        Except[_List|_Cell]->
          Nothing
        }],
      Replace[OptionValue@"Details",{
        Automatic:>
          Cell[CellGroupData[Flatten@{
            Cell["Details","DetailsSection"],
            ToExpression[s,StandardForm,AutoGenerateDetails]
            },
            Closed]
            ],
        Default->{
          Cell["Details","DetailsSection"],
          Cell["Function Details","DetailsItem"]
          },
        Except[_List|_Cell]->
          Nothing
        }],
      Replace[OptionValue@"Examples",{
        Automatic:>{
          Cell["Basic Examples","ExampleSection"],
          Replace[
            ToExpression[s,StandardForm,AutoGenerateExamples],
            c:{}|{
              Cell[_String?(StringMatchQ["Load *:"]),"ExampleText"],
              _Cell,
              _Cell
              }:>
              Append[c,
                Cell[BoxData@s,"ExamplesInput"]
                ]
            ]
          },
        Defer:>{
          Cell["Basic Examples","ExampleSection"],
          Replace[
            ToExpression[s,StandardForm,
              GeneralUtilities`HoldFunction[AutoGenerateExamples[#,True]]
              ],
            c:{}|{
              Cell[_String?(StringMatchQ["Load *:"]),"ExampleText"],
              _Cell,
              _Cell
              }:>
              Append[c,
                Cell[BoxData@RowBox@{"Defer","[",s,"]"},"ExamplesInput"]
                ]
            ]
          },
        Default->{
          Cell["Basic Examples","ExampleSection"],
          Cell[BoxData@s,"ExamplesInput"],
          With[{ops=
            ToExpression[s,StandardForm,
              GeneralUtilities`HoldFunction[
                If[Length@dgSymValues[#,OwnValues]===0,
                  dgSymValues[#,Options],
                  {}
                  ]
                ]
              ]},
            If[Length@ops>0,
              Cell[CellGroupData[Flatten@{
                Cell["Options","ExampleSection"],
                Map[
                  Cell@
                    CellGroupData[{
                      Cell[ToString@First@#,"ExampleSubsection"],
                      Cell[BoxData@toSafeBoxes[#,StandardForm],
                        "ExamplesInput"]
                      },
                      Closed]&,
                  ops
                  ]
                },Closed]
                ],
              Nothing
              ]
            ]
          },
        Except[_List|_Cell]->
          Nothing
        }],
      Replace[OptionValue@"Functions",{
        Automatic:>
          {
            Cell["See Also","SeeAlsoSection"],
            Cell[#,"SeeAlso"]&/@relatedFunctionNames[s]
            },
        Default->{
          Cell["See Also","SeeAlsoSection"],
          Cell["RelatedFunction","SeeAlso"],
          Cell["\"Name\" -> ref/path/thing","SeeAlso"]
          },
        fs:{__String}:>
          {
            Cell["See Also","SeeAlsoSection"],
            Cell[#,"SeeAlso"]&/@fs
            },
        e:Except[_List|_Cell]:>{}
        }],
      Replace[OptionValue@"RelatedGuides",{
        Automatic->{
          Cell["Related Guide","GuidesSection"],
          Cell["Related Guide Title | RelatedGuide",
            "RelatedGuide"]
          },
        l:{(_String|_Rule)..}:>
          {
            Cell["Related Guide","GuidesSection"],
            Map[
              Cell[
                First@#<>" | "<>
                  StringReplace[Last@#,Except[WordCharacter]->""],
                "RelatedGuide"]&,
              Replace[l,
                t_String:>(t->t),
                1]
              ]
            },
        Except[_List|_Cell]->{}
        }],
      Replace[OptionValue@"RelatedTutorials",{
        Automatic->{
          Cell["Related Tutorials","TutorialSection"],
          Cell["Related Tutorial Title | RelatedTutorial",
            "RelatedTutorial"]
          },
        l:{(_String|_Rule)..}:>
          {
            Cell["Related Tutorials","TutorialSection"],
            Map[
              Cell[
                First@#<>" | "<>
                  StringReplace[Last@#,Except[WordCharacter]->""],
                "RelatedTutorial"]&,
              Replace[l,
                t_String:>(t->t),
                1]
              ]
            },
        Except[_List|_Cell]->{}
        }],
      Replace[OptionValue@"RelatedLinks",{
        Automatic->{
          Cell["Related Links","LinksSection"],
          Cell["Related Link Title | RelatedLink","RelatedLink"]
          },
        l:{(_String|_Rule)..}:>
          {
            Cell["Related Tutorials","LinksSection"],
            Map[
              Cell[
                First@#<>" | "<>
                  StringReplace[Last@#,Except[WordCharacter]->""],
                "RelatedTutorial"]&,
              Replace[l,
                t_String:>(
                  URLBuild[
                    ReplacePart[
                      URLParse[t],{
                      "Scheme"->None,
                      "Query"->{}
                      }]
                    ]->t),
                1]
              ]
            },
        Except[_List|_Cell]->{}
        }],
      Cell["","SectionSeparator"]
      },
    Closed]
    ];


(* ::Subsubsubsection::Closed:: *)
(*SymbolPageTemplate*)



SymbolPageTemplate[s:{__String}, ops:OptionsPattern[]]:=
  With[{syms=docPatternNames[s]},
    If[TrueQ@OptionValue["CreateDocument"], CreateDocument, Identity]@
      Notebook[
        Flatten@
          {
            OptionValue@"Headers",
            symPageTemplate[#, ops]&/@syms,
            OptionValue@"Footers"
            },
        StyleDefinitions->
          With[{p=$PackageName},
            FrontEnd`FileName[{p}, "DocGen.nb"]
            ]
        ]
    ];
SymbolPageTemplate[s_String, ops:OptionsPattern[]]:=
  If[TrueQ@OptionValue["CreateDocument"], CreateDocument, Identity]@
    Replace[SymbolPageTemplate[{s}, "CreateDocument"->False, ops],
      Cell[CellGroupData[d_,Closed]]:>
        Cell[CellGroupData[d]],
      2];
SymbolPageTemplate[s_Symbol, ops:OptionsPattern[]]:=
  SymbolPageTemplate[ToString@Unevaluated@s, ops];
SymbolPageTemplate[e_, ops:OptionsPattern[]]/;!TrueQ[$recurseProtect]:=
  Block[{$recurseProtect=True},
    SymbolPageTemplate[Evaluate@e, ops]
    ];
SymbolPageTemplate~SetAttributes~HoldFirst


(* ::Subsubsection::Closed:: *)
(*SymbolPageContextTemplate*)



Options[SymbolPageContextTemplate]=
  Options@SymbolPageTemplate
SymbolPageContextTemplate[s_String, ops:OptionsPattern[]]:=
  SymbolPageTemplate[Names[s<>"*"],
    FilterRules[
      {
        ops,
        "Headers"->{Cell[s, "ContextSection"]}
        },
      Options@SymbolPageTemplate
      ]
    ];
SymbolPageContextTemplate[s:{__String}, ops:OptionsPattern[]]:=
  With[{pages=SymbolPageContextTemplate[#, ops]&/@s},
    Notebook[Flatten@pages[[All, 1]],
      pages[[1, 2;;]]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*scrapeUsages*)



scrapeUsages[usages_]:=
  SequenceCases[usages,
    {Cell[e_,___,"UsageInput",___],Cell[t_,___,"UsageText",___]}:>
      RawBoxes@First@e->
        Replace[parseRefText[t],{
          td_TextData:>
            RawBoxes@Cell[td,"InlineFormula"]
          }]
    ]


(* ::Subsubsection::Closed:: *)
(*scrapeDetails*)



scrapeDetails[details_]:=
  With[{baseData=
    Replace[#,
      {
        Cell[bd_,"DetailsItem",___]:>
          bd,
        Cell[bd_,"DetailsRow",___]:>
          "Row"->bd,
        Cell[bd_,"DetailsColumn",___]:>
          "Col"->bd
        },
      1]&@
    Replace[parseRefText[details],
      {
        td_TextData:>
          RawBoxes@Cell[td,"InlineFormula"]
        }]
    },
      Replace[SplitBy[baseData,Head],{
        r:{__Rule}:>
          Map[Last]/@SequenceCases[r,{"Row"->_,("Col"->_)...}],
        items:{__}:>
          Sequence@@items
        },
        1]
    ];


(* ::Subsubsection::Closed:: *)
(*scrapeExamples*)



scrapeExamples[examples_]:=
  Replace[
    DeleteCases[{"- BreakPoint -"..}]@
    SplitBy[
      Replace[
        DeleteCases[{"- ExampleBreak -"..}]@
        SplitBy[
          Replace[NotebookTools`FlattenCellGroups@examples,{
            Cell[n_,"ExampleSection",___]:>
              Sequence@@{"- BreakPoint -",n->n},
            Cell[t_,"ExampleText",___]:>
              parseRefText[t],
            Cell["Delimiter"|"----"|""|BoxData["Delimiter"],___]|
              Cell[_,"ExampleDelimiter",___]:>
              Delimiter,
            c:Cell[_,"ExamplesInput",___]:>
              Sequence@@{"- ExampleBreak -",c},
            c:Cell[_,"ExamplesOutput",___]:>
              Sequence@@{c,"- ExampleBreak -"}
            },
            1],
          MatchQ["- ExampleBreak -"]
          ],
        {
          e:Except[
            {Cell[_,"ExamplesInput",___]}|
            {Cell[_,"ExamplesOutput",___]}|
            {Cell[_,"ExamplesInput",___],Cell[_,"ExamplesOutput",___]}
            ]:>
            Sequence@@Flatten@{e}
          },
        1],
      MatchQ["- BreakPoint -"]
      ],{
    {n_->_,e__}:>
      n->
        Replace[
          {e},
          {
            {Cell[ex_,"ExamplesInput",r___]}|
              Cell[ex_,"ExamplesInput",r___]:>
              Cell[ex,"Input",r],
            {Cell[e2_,"ExamplesOutput",r2___]}|
              Cell[e2_,"ExamplesOutput",r2___]:>
              Cell[e2,"Output",r2],
            {Cell[e1_,"ExamplesInput",r1___],Cell[e2_,"ExamplesOutput",r2___]}:>
              Sequence@@
                {
                  Cell[e1,"Input",r1],
                  Cell[e2,"Output",r2]
                  }
            },
          1],
    e:{__}:>
      "Basic Examples"->
        Replace[e,
          {
            {Cell[ex_,"ExamplesInput",r___]}|
              Cell[ex_,"ExamplesInput",r___]:>
              Cell[ex,"Input",r],
            {Cell[e2_,"ExamplesOutput",r2___]}|
              Cell[e2_,"ExamplesOutput",r2___]:>
              Cell[e2,"Output",r2],
            {
              Cell[e1_,"ExamplesInput",r1___],
              Cell[e2_,"ExamplesOutput",r2___]
              }:>
              Sequence@@
                {
                  Cell[e1,"Input",r1],
                  Cell[e2,"Output",r2]
                  }
            },
          1]
    },
    1]


(* ::Subsubsection::Closed:: *)
(*scrapeSymbolPageTemplate*)



scrapeSymbolPageChunk[c:{__Cell}]:=
  docGenBlock@
    With[{
      sym=FirstCase[c,Cell[s_,___,"DocSection",___]:>s],
      usages=Cases[c,Cell[__,"UsageInput"|"UsageText",___]],
      details=
        Cases[c,
          Cell[__,
            "DetailsItem"|"DetailsRow"|"DetailsColumn",
            ___]
          ],
      examples=
        Cases[c,
          Cell[__,
            "ExampleSection"|"ExampleSubsection"|
            "ExampleText"|"ExamplesInput"|"ExampleDelimiter"|
            "ExamplesOutput",
            ___]
          ],
      guides=
        Cases[c,Cell[__,"RelatedGuide",___]],
      tutorials=
        Cases[c,Cell[__,"RelatedTutorial",___]],
      links=
        Cases[c,Cell[__,"RelatedLink",___]],
      seeAlso=Cases[c,Cell[__,"SeeAlso",___]]
      },
      {
        "Symbol"->sym,
        "Usage"->
          scrapeUsages@usages,
        "Details"->
          scrapeDetails@details,
        "Examples"->
          scrapeExamples@examples,
        "RelatedGuides"->
          Replace[First/@guides,{
            s_String:>
              Replace[StringSplit[s," | "],{
                {str_}:>
                  str->str,
                {l_,g_}:>
                  l->g
                }],
            _->Nothing
            },
            1],
        "RelatedTutorials"->
          Replace[First/@tutorials,{
            s_String:>
              Replace[StringSplit[s," | "],{
                {str_}:>
                  str->str,
                {l_,g_}:>
                  l->g
                }],
            _->Nothing
            },
            1],
        "RelatedLinks"->
          Replace[First/@links,{
            s_String:>
              Replace[StringSplit[s," | "],{
                {str_}:>
                  str->str,
                {l_,g_}:>
                  l->g
                }],
            _->Nothing
            },
            1],
        "SeeAlso"->
          Replace[First/@seeAlso,{
            s_String?(StringMatchQ["* -> *"]):>
              Rule@@StringSplit[s," -> "],
            s_String?docSymStringPat:>
              ToExpression[s,StandardForm,Hold],
            _->Nothing
            },
            1],
        "Footer"->
          Replace[$DocGenFooter,
            Except[_String|_TextData]:>
              ("Generated on  "<>DateString[])
            ],
        WindowTitle->Last@StringSplit[sym,"`"]
        }
      ];
scrapeSymbolPageTemplate[c:{__Cell}]:=
  With[{cells=NotebookTools`FlattenCellGroups@c},
    scrapeSymbolPageChunk@cells[[#]]&/@
      Replace[
        Flatten@Position[cells,Cell[__,"DocSection",___]],{
          i:{__}:>
            Span@@@Partition[Riffle[i,Append[Rest@i-1,-1]],2]
        }]
    ]


scrapeSymbolPageTemplate[cells:{__CellObject}]:=
  scrapeSymbolPageTemplate[NotebookRead/@cells];
scrapeSymbolPageTemplate[nb_NotebookObject]:=
  scrapeSymbolPageTemplate@
    Replace[NotebookRead@nb,{
      c_Cell:>
        {c},
      c:{__Cell}:>
        c,
      _:>
        Cells@nb
      }];


(* ::Subsubsection::Closed:: *)
(*DocGenGenerateSymbolPages*)



Options[DocGenGenerateSymbolPages]=
  DeleteDuplicatesBy[First]@
    Join[
      Options[SymbolPageNotebook],
      Options[CreateDocument],
      {
        "PostFunction"->None,
        Monitor->False
        }
      ];
DocGenGenerateSymbolPages[s_Symbol,ops:OptionsPattern[]]:=
  Block[{
    $Context=$docGen,
    $ContextPath=
      Join[
        $ContextPath,
        {Context@s, $Context}
        ],
    makeRefOverrides=
      Join[
        makeRefOverrides,{
        ToString@Unevaluated@s,
        SymbolName@Unevaluated@s
        }],
    postFunc=
      OptionValue["PostFunction"]
    },
    If[MatchQ[OwnValues[s],{_:>(_PackageLoadPackage)}],
      s
      ];
    CheckAbort[
      $DocGenLine=1;
      If[postFunc=!=None,
        postFunc,
        Identity
        ]@
      CreateDocument[
        SymbolPageNotebook[s,
          FilterRules[{ops},Options@SymbolPageNotebook]
          ],
        FilterRules[
          {
            ops,
            WindowTitle->(
              Last@
                StringSplit[
                  ToString@Unevaluated[s],
                  "`"
                  ]<>" - Documentation"),
            System`ClosingSaveDialog->False
            },
          Options@CreateDocument
          ]
        ],
      If[$Context==$docGen,End[]]
      ]
    ];
DocGenGenerateSymbolPages[namePattern_String,ops:OptionsPattern[]]:=
  Block[{
    $DocGenActive=
      If[StringMatchQ[namePattern,"*`"],
        StringTrim[namePattern,"`"],
        $DocGenActive
        ],
    makeRefOverrides=
      contextNames[namePattern]
    },
    Block[{docGenCounter=0,nms=contextNames[namePattern<>"*"]},
      If[Length@nms>5,
        Monitor[
          ToExpression[
            nms,
            StandardForm,
            GeneralUtilities`HoldFunction[
              docGenCounter++;
              DocGenGenerateSymbolPages[#, ops]
              ]
            ],
          Internal`LoadingPanel@
            TemplateApply[
              "Generating page `` of ``",
              {docGenCounter, Length@nms}
              ]
          ],
        ToExpression[
          nms,
          StandardForm,
          GeneralUtilities`HoldFunction[
            DocGenGenerateSymbolPages[#,ops]
            ]
          ]
        ]
      ]
    ];
DocGenGenerateSymbolPages~SetAttributes~HoldFirst;


DocGenGenerateSymbolPages[nb_NotebookObject,
  ops:OptionsPattern[]
  ]:=
  Block[{
    monit=TrueQ@OptionValue[Monitor],
    sym,
    scrape
    },
    With[{
      data=scrapeSymbolPageTemplate@nb
      },
      If[Length@data>0,
        sym=Lookup[First@data,"Symbol"]
        ];
      If[monit,
        Function[Null,
          Monitor[#,
            If[StringQ@sym,
              Internal`LoadingPanel[
                TemplateApply[
                  "Generating page for ``",
                  sym
                  ]
                ],
              ""
              ]
            ],
          HoldFirst
          ],
        Identity
        ][
        Map[
          Function[
            sym=Lookup[#,"Symbol"];
            scrape=#;
            ToExpression[sym,StandardForm,
              Function[Null,
                Block[{$DocGenLine=0},
                  DocGenGenerateSymbolPages[#,
                    DeleteCases[scrape,"Symbol"->_],
                    ops
                    ]
                  ],
                HoldFirst
                ]
              ]
            ],
          data
          ]
        ]
      ]
    ];
DocGenGenerateSymbolPages[
  nb:
    _EvaluationNotebook|_InputNotebook|_CreateDocument:
    EvaluationNotebook[],
  ops:OptionsPattern[]
  ]:=
  DocGenGenerateSymbolPages[Evaluate@nb,ops];


(* ::Subsubsection::Closed:: *)
(*DocGenSaveSymbolPages*)



Options[docGenSaveSymbolPages]=
  Options[DocGenGenerateSymbolPages];
docGenSaveSymbolPages[
  doc:_String|_Symbol|{__String}|
    _NotebookObject|{__NotebookObject}|
    _EvaluationNotebook|_InputNotebook|_ButtonNotebook,
  dir_String?DirectoryQ,
  extension:True|False:True,
  ops:OptionsPattern[]
  ]:=
  DocGenGenerateSymbolPages[
    doc,
    FilterRules[{
      Visible->False,
      ops,
      "PostFunction"->
        (
          With[{fil=saveSymbolPages[#,dir,extension,ops]},
            NotebookClose[#];
            fil
            ]&
          )
      },
      Options@DocGenGenerateSymbolPages
      ]
    ];
docGenSaveSymbolPages~SetAttributes~HoldFirst


(* ::Subsubsubsection::Closed:: *)
(*saveSymbolPages*)



saveSymbolPages[
  nb:_NotebookObject|{__NotebookObject}|
    _EvaluationNotebook|_InputNotebook|_ButtonNotebook,
  dir_String?DirectoryQ,
  extension:True|False:True,
  ops:OptionsPattern[]
  ]:=
  (
    Quiet@CreateDirectory[
      FileNameJoin@{
        dir,
        If[extension,
          Sequence@@{
            "ReferencePages",
            "Symbols"
            },
          Nothing
          ]
        },
      CreateIntermediateDirectories->True
      ];
    Map[
      Replace[
        CurrentValue[
          #,
          {TaggingRules,"Metadata","uri"}
          ],
        s_String:>
          Export[
            FileNameJoin@{
              dir,
              If[extension,
                Sequence@@{
                  "ReferencePages",
                  "Symbols"
                  },
                Nothing
                ],
              Last@URLParse[s,"Path"]<>".nb"
              },
            DeleteCases[NotebookGet@#,Visible->_]
            ]
        ]&,
      Flatten@{nb}
    ]
    );
Options[DocGenSaveSymbolPages]=
  Join[
    {
      Directory->Automatic,
      Extension->True
      },
    Options[docGenSaveSymbolPages]
    ];
DocGenSaveSymbolPages[
  doc:
    _?(MatchQ[#,String|_Symbol|{__String}]&)|
    _String|_Symbol|{__String}|
    _NotebookObject|{__NotebookObject}|
    _EvaluationNotebook|_InputNotebook|_ButtonNotebook,
  ops:OptionsPattern[]
  ]:=
  With[
    {
      dir=Replace[OptionValue[Directory], Automatic:>$DocGenDirectory], 
      ext=OptionValue[Extension]
      },
    With[{res=
      If[MatchQ[Unevaluated[doc], _Symbol],
        docGenSaveSymbolPages[
          doc, 
          dir,
          ext,
          ops
          ],
        docGenSaveSymbolPages[
          Evaluate@doc, 
          dir,
          ext,
          ops
          ]
        ]
      },
      res/;Head[res]=!=docGenSaveSymbolPages
      ]
    ];
DocGenSaveSymbolPages~SetAttributes~HoldFirst


End[];



