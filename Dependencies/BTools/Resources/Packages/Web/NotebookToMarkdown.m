(* ::Package:: *)

(* Autogenerated Package *)

NotebookToMarkdown::usage="Converts a notebook to markdown";
NotebookMarkdownSave::usage="Saves a notebook as markdown";


Begin["`Private`"];


(* ::Subsection:: *)
(*NotebookToMarkdown*)



NotebookToMarkdown//Clear


Options[NotebookToMarkdown]=
  {
    "Directory"->Automatic,
    "Path"->Automatic,
    "Name"->Automatic,
    "Metadata"->Automatic,
    "ContentExtension"->Automatic,
    "NotebookObject"->Automatic,
    "CellObjects"->Automatic,
    "Context"->Automatic,
    "CellStyles"->Automatic,
    "IncludeStyleDefinitions"->Automatic,
    "IncludeLinkAnchors"->Automatic,
    "UseHTMLFormatting"->Automatic,
    "UseMathJAX"->False,
    "MathJAXBlockTemplate"->Automatic,
    "MathJAXInlineTemplate"->Automatic,
    "UsePlainScriptBoxes"->False,
    "UseImageInput"->False,
    "ImageInputCellExpressions"->False,
    "CodeIndentation"->Automatic,
    "ContentPathExtension"->Automatic,
    "PacletLinkResolutionFunction"->Automatic,
    "ImageExportPathFunction"->Automatic,
    "LinkFormattingFunction"->Automatic
    };


(* ::Subsubsection::Closed:: *)
(*Notebook Export*)



NotebookToMarkdown[
  nb_Notebook,
  ops:OptionsPattern[]
  ]:=
  PackageExceptionBlock["NotebookToMarkdown"]@
  Block[
    {
      $MarkdownSettings=$MarkdownSettings,
      exportStrings,
      exportPick,
      exportRiffle,
      $iNotebookToMarkdownCounters=<||>
      },
  $MarkdownSettings["IncludeStyleDefinitions"]=
    Replace[OptionValue["IncludeStyleDefinitions"],
      Automatic:>$MarkdownSettings["IncludeStyleDefinitions"]
      ];
  $MarkdownSettings["LinkAnchors"]=
    Replace[OptionValue["IncludeLinkAnchors"],
      Automatic:>$MarkdownSettings["LinkAnchors"]
      ];
  With[
    {
      dir=Replace[OptionValue["Directory"], Automatic:>$TemporaryDirectory],
      path=Replace[OptionValue["Path"], Automatic:>""],
      name=Replace[Except[_String]->"Markdown"]@OptionValue["Name"],
      cext=Replace[Except[_String]->None]@OptionValue["ContentExtension"],
      meta=Replace[Except[_Association?AssociationQ]-><||>]@OptionValue["Metadata"],
      cont=Replace[Except[_String]->"Global`"]@OptionValue["Context"],
      nbo=OptionValue["NotebookObject"],
      cells=OptionValue["CellObjects"],
      ps=OptionValue["UseHTMLFormatting"],
      prf=Replace[
        OptionValue["PacletLinkResolutionFunction"], 
        Automatic->$MarkdownSettings["PacletLinkResolutionFunction"]
        ],
      imexp=
        Replace[
          OptionValue["ImageExportPathFunction"], 
          Automatic->$MarkdownSettings["ImageExportPathFunction"]
          ],
      linkFormat=
        Replace[
          OptionValue["LinkFormattingFunction"],
          Automatic->$MarkdownSettings["LinkFormattingFunction"]
          ],
      cstyles=
        Association@Flatten@Replace[
          Flatten@Normal@List@
            Replace[OptionValue["CellStyles"],
             Automatic:>$MarkdownSettings["CellStyles"]
             ],
          {
            s_String:>
              s->Automatic,
            ParentList:>
              Thread[$MarkdownSettings["CellStyles"]->Automatic],
            Except[_Rule|_RuleDelayed]->Nothing
            },
          1
          ],
      co=
        Replace[OptionValue["CodeIndentation"], 
          Except[_String]:>$MarkdownSettings["CodeIndentation"]
          ],
      cpe=OptionValue["ContentPathExtension"]
      },
    If[!DirectoryQ@dir, 
      PackageRaiseException[
        Automatic,
        "Notebook directory `` is not a valid directory",
        dir
        ]
      ];
    If[!StringQ@path,
      PackageRaiseException[
        Automatic,
        "Notebook path `` is not a valid string path",
        path
        ]
      ];
    exportStrings=
      With[
        {
          fn=
            Replace[
              Lookup[cstyles, If[Length@#>1, #[[2]], Automatic], Automatic],
              Automatic:>Lookup[cstyles, Automatic, iNotebookToMarkdown]
              ],
          opp=
            <|
              "Root"->dir,
              "Path"->path,
              "Name"->name,
              "ContentExtension"->cext,
              "Meta"->meta,
              "NotebookObject"->nbo,
              "CellObjects"->cells,
              "Context"->cont,
              "UseHTML"->ps,
              "UseImageInput"->TrueQ@OptionValue["UseImageInput"],
              "PacletResolve"->prf,
              "ImagePath"->imexp,
              "StyleExporters"->cstyles,
              "CodeIndentation"->co,
              "ContentPathExtension"->cpe,
              "LinkFunction"->linkFormat,
              "ImageInputCellExpressions"->TrueQ@OptionValue["ImageInputCellExpressions"],
              "MathJAXBlockTemplate"->
                Replace[OptionValue["MathJAXBlockTemplate"],
                  Automatic:>$MarkdownSettings["MathJAXBlockTemplate"]
                  ],
              "MathJAXInlineTemplate"->
                Replace[OptionValue["MathJAXInlineTemplate"],
                  Automatic:>$MarkdownSettings["MathJAXInlineTemplate"]
                  ],
              "UsePlainScriptBoxes"->
                OptionValue["UsePlainScriptBoxes"]
              |>
          },
        iNotebookToMarkdown[opp, fn[opp, #]]
        ]&/@First@nb//Flatten;
    exportPick=
      Map[#=!=""&, exportStrings];
    exportStrings=
      If[$MarkdownIncludeStyleDefinitions===All&&
        MatchQ[cells, {__CellObject}]&&Length[cells]==Length[exportStrings],
        MapThread[
          TemplateApply[
            "<style>body {``}</style>\n",
            CSSGenerate[Options[#2], "RiffleCharacter"->""]
            ]<>#&,
          {
            Pick[exportStrings, exportPick],
            Pick[cells, exportPick]
            }
          ],
        Pick[exportStrings, exportPick]
        ];
    exportRiffle=
      StringRiffle[
        ReplaceAll[
          exportStrings,
          RawBoxes[s_]|
            ExportPacket[s_, ___]:>s
          ],
        "\n\n"
        ];
    Replace[
      exportRiffle,
      {
        s_String:>
          If[MatchQ[$MarkdownIncludeStyleDefinitions, All|True]&&
            MatchQ[nbo, _NotebookObject?(NotebookInformation[#]=!=$Failed&)],
            "<style>"<>CSSGenerate[nbo, "RiffleCharacter"->{"", " "}]<>"</style>\n\n",
            ""
            ]<>
          StringReplace[s,
            Join[
              Normal@
                $MarkdownSettings["LongNameToUnicodeMap"],
              Lookup[Options[nb], ExportAutoReplacements, {}],
              {
                "\t"->" "
                }
              ]
            ],
          _->$Failed
          }
      ]
    ]
  ];


(* ::Subsubsection::Closed:: *)
(*NotebookObject*)



NotebookToMarkdown[nb_NotebookObject, ops:OptionsPattern[]]:=
  PackageExceptionBlock["MarkdownExport"]@
  Module[
    {
      meta=MarkdownNotebookMetadata[nb],
      dir=
        MarkdownNotebookDirectory[nb],
      name,
      d2,
      cext,
      path,
      cont,
      cstyles,
      cells
      },
      name=
        Replace[OptionValue["Name"],
          Automatic:>
            MarkdownNameToSlug@
              Replace[
                Lookup[meta, "Slug", Automatic],
                Automatic:>
                  Replace[Quiet@FileBaseName@MarkdownNotebookFileName[nb],
                    Except[_String]->"Title"
                    ]
                ]
          ];
      If[!DirectoryQ[dir],
        PackageRaiseException[Automatic,
          "Directory `` doesn't exist",
          dir
          ],
        d2=
          MarkdownSiteBase@
            Replace[OptionValue["Directory"],
              Automatic:>MarkdownSiteBase[dir]
              ];
        cext=
          Replace[OptionValue["ContentExtension"],
            Automatic:>MarkdownContentExtension[MarkdownSiteBase@dir]
            ];
        path=
          Replace[OptionValue["Path"],
            Automatic:>
              If[StringMatchQ[dir, MarkdownContentPath[dir]~~___],
                "",
                URLBuild@
                  ConstantArray["..",
                    1+FileNameDepth[MarkdownContentPath[dir]]
                    ]
                ]
            ];
        cont=
          Replace[OptionValue["Context"],
            Automatic:>MarkdownNotebookContext@nb
            ];
        cstyles=
          Association@Flatten@
            Replace[
              Flatten@Normal@List@
                Replace[OptionValue["CellStyles"],
                 Automatic:>$MarkdownSettings["CellStyles"]
                 ],
              {
                s_String:>
                  s->Automatic,
                ParentList:>
                  Thread[$MarkdownSettings["CellStyles"]->Automatic],
                Except[_Rule|_RuleDelayed]->Nothing
                },
              1
              ];
        cells=
          Cells[nb,
            CellStyle->
              Keys@cstyles
            ];
        NotebookToMarkdown[
          Notebook[
            NotebookRead@
              cells,
            ExportAutoReplacements->
              AbsoluteCurrentValue[nb, ExportAutoReplacements]
            ],
          {
            "Directory"->d2,
            "Path"->path,
            "Name"->name,
            "ContentExtension"->cext,
            "NotebookObject"->nb,
            "CellObjects"->cells,
            "Metadata"->
              Association@
                FilterRules[
                  Normal@meta,
                  Except[Alternatives@@Keys@Options@NotebookToMarkdown]
                  ],
            "Context"->cont,
            "CellStyles"->
              cstyles,
            Sequence@@
              FilterRules[Normal@meta,
                Options@NotebookToMarkdown
                ],
            ops
            }
          ]
        ]
      ];


(*NotebookToMarkdown[nb_Notebook]:=
	With[{
		nb2=CreateDocument@Insert[nb, Visible\[Rule]False,2]
		},
		CheckAbort[
			(NotebookClose[nb2];#)&@
				NotebookToMarkdown[nb2],
			NotebookClose[nb2];
			$Aborted
			]
		]*)


(* ::Subsection:: *)
(*NotebookSave*)



(* ::Subsubsection::Closed:: *)
(*ExportSown*)



NotebookMarkdownSaveExportSown[root_, 
  files_,
  ops_
  ]:=
  With[{ext=MarkdownContentExtension@root},
    With[
      {
        f=
          FileNameJoin@
            Flatten@{root,ext,First[#]},
        flext=FileExtension[First[#]]
        },
        If[!FileExistsQ@f,
          If[!DirectoryQ@DirectoryName[f],
            CreateDirectory[DirectoryName[f], CreateIntermediateDirectories->True]
            ];
          Export[f,
            ReleaseHold@Last[#],
            Switch[FileExtension[f],
              "gif",
                FilterRules[
                  Lookup[ops, "gif"], 
                  Options[
                    {
                      "AnimationRepetitions","ColorSpace","DisplayDurations",
                      "DisposalOperation","ImageSize","TransparentColor"
                      }
                    ]
                  ],
              "png",
                Sequence@@
                  FilterRules[
                    Lookup[ops, "png"], 
                    Options[Rasterize]
                    ],
              _,
                Sequence@@{}
              ]
            ]
          ]
        ]&/@Flatten@files
      ];


(* ::Subsubsection::Closed:: *)
(*ExportMDFile*)



NotebookMarkdownSaveExportMDFile[file_, body_, meta_]:=
  Export[
    StringReplace[file, "*"->"_"],
    StringTrim@
      TemplateApply[
        $MarkdownNewMDFileTemplate,
        <|
          "headers"->
            If[Length@meta>0,
              MarkdownMetadataFormat[
                FileBaseName@file,
                Association@
                  Flatten[
                    {
                      "Modified":>Now,
                      meta
                      }
                    ]
                ],
              ""
              ],
          "body"->body
          |>
        ],
    "Text",
    CharacterEncoding->"UTF-8"
    ]


(* ::Subsubsection::Closed:: *)
(*Main*)



$NotebookMarkdownSaveIgnoredMeta=
  {
    "ExportOptions",
    "_Save"
    };


NotebookMarkdownSave//Clear


NotebookMarkdownSave[
  nbObj:_NotebookObject|Automatic:Automatic,
  ops:OptionsPattern[]
  ]:=
  Function[Null, Catch[#, "NotebookSaveAbort"], HoldFirst]@
  PackageExceptionBlock["MarkdownExport"]@
    Module[
      {
        nb=Replace[nbObj,Automatic:>InputNotebook[]],
        meta,
        expOps,
        md,
        root,
        expDir,
        expName,
        nbDir,
        siteBase,
        flops=Flatten@{ops},
        rast
        },
      meta=
        Merge[
          {
            MarkdownNotebookMetadata[nb],
            flops
            },
          If[AllTrue[#, AssociationQ[#]||OptionQ[#]&],
            Merge[#, Last],
            Last[#]
            ]&
          ];
      expOps=
        Replace[Except[_?OptionQ]-><||>]@
          Lookup[meta, "ExportOptions"];
      If[
        Lookup[expOps, "Save", True]===False||
          Lookup[meta, "_Save", True]===False (*Legacy*), 
        PackageThrowException[
          "NotebookSaveAbort",
          "Notebook `` has Markdown save turned off"(*Throw[$Canceled, "NotebookSaveAbort"]*)
          ]
        ];
      rast=
        Merge[
          {
            Replace[Except[_?OptionQ]->{}]@
              Lookup[expOps,
                "RasterizationOptions",
                {}
                ],
            $MarkdownSettings["RasterizationOptions"]
            },
          First
          ];
      md=
        Reap[
          NotebookToMarkdown[nb, 
            FilterRules[Normal@expOps, Options[NotebookToMarkdown]]],
          "MarkdownExport"
          ];
      If[!StringQ@md[[1]],
        PackageRaiseException[
          Automatic,
          "NotebookToMarkdown generated non-string output ``",
          md[[1]]
          ]
        ];
      md[[1]]=StringTrim@md[[1]];
      If[Not[StringLength@md[[1]]>0],
        PackageRaiseException[
          Automatic,
          "NotebookToMarkdown generated empty output ``",
          md[[1]]
          ]
        ];
      nbDir=MarkdownNotebookDirectory[nb];
      siteBase=MarkdownSiteBase@nbDir;
      root=
        Replace[Lookup[expOps, "RootDirectory", Automatic],
          {
            f_String?(Not@*DirectoryQ):>
              ExpandFileName@
                FileNameJoin@{
                  siteBase,
                  f
                  },
            {f__String}:>
              ExpandFileName@
                FileNameJoin@{
                  siteBase,
                  f
                  },
            Except[_String?(DirectoryQ)]:>
              siteBase
            }
          ];
      expDir=
        Replace[Lookup[expOps, "Directory", Automatic],
          {
            f_String?(ExpandFileName[#]!=#||Not@DirectoryQ[#]&):>
              ExpandFileName@
                FileNameJoin@{
                  nbDir,
                  f
                  },
            {f__String}:>
              ExpandFileName@
                FileNameJoin@{
                  nbDir,
                  f
                  },
            Except[_String?(DirectoryQ)]:>
              nbDir
            }
          ];
      expName=
        Replace[Lookup[expOps, "Name", Automatic],
          {
            f_String:>
              If[FileExtension[f]=="", f<>".md", f],
            Except[_String?(DirectoryQ)]:>
              FileBaseName@
                Quiet[Replace[NotebookFileName[nb], $Failed->"Notebook"]]<>".md"
            }
          ];
      NotebookMarkdownSaveExportSown[root, Last[md], 
        {
          "png"->rast,
          "gif"->$MarkdownSettings["AnimationOptions"]
          }
        ];
      NotebookMarkdownSaveExportMDFile[
        FileNameJoin@{
          expDir,
          expName
          },
        md[[1]],
        KeyDrop[meta, $NotebookMarkdownSaveIgnoredMeta]
        ]
      ];


End[];



