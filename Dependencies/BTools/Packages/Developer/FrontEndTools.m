(* ::Package:: *)

(* Autogenerated Package *)

(* ::Subsubsection::Closed:: *)
(*Patterns*)



$FENotebookPatterns::usage="";
$FECellPatterns::usage="";
$FEBoxPatterns::usage="";
$FEObjectPatterns::usage="";


(* ::Subsubsection::Closed:: *)
(*Packets*)



FESetMouseAppearance::usage=
  "Sets the mouse appearance";


FEScreenPosition::usage=
  "Gets screen coordinates";
FEScreenPath::usage=
  "Generates a path of screen coordinates relative to one another";


FEMoveMouse::usage=
  "Sets the mouse position";
FEClickMouse::usage=
  "Clicks at a position";
FEDragMouse::usage=
  "Drags the mouse position";


(* ::Subsubsection::Closed:: *)
(*Objects*)



FEParent::usage="Gets the parent";
FEChildren::usage="FEChildren";
FESiblings::usage="FESiblings";
FENextSibling::usage="FENextSibling";
FEPreviousSibling::usage="FEPreviousSibling";


(* ::Subsubsection::Closed:: *)
(*Attached cells*)



FEAttachCellSpec::usage="";
FEAttachCell::usage="Simplified syntax for attaching a cell";


(* ::Subsubsection::Closed:: *)
(*Notebooks*)



FENotebooks::usage=
  "Gets all notebooks, even the hidden ones";


FEWindowSize::usage=
  "Gives the true window size of a Notebook";
FEScreenShot::usage=
  "Captures a screenshot of a given spec";
FECopyScreen::usage=
  "Copies FEScreenShot";


(* ::Subsubsection::Closed:: *)
(*Boxes*)



FEBoxRef::usage=
  "Formats a FE`BoxReference";
FEBoxObject::usage=
  "Gets the box object FE`BoxReference";
FEBoxRead::usage=
  "Reads the box object FE`BoxReference";
FEBoxReplace::usage=
  "Replaces a FE`BoxReference";
FEBoxEdit::usage=
  "Applies FEReplaceBox to FEReadBox";
FEBoxSelect::usage=
  "Selects the FE`BoxReference";


FEBoxGetOptions::usage=
  "Gets options for a  FE`BoxReference";
FEBoxSetOptions::usage=
  "Set options for a FE`BoxReference";


(* ::Subsubsection::Closed:: *)
(*Hidden Symbols*)



FEHiddenBlock::usage="";
FESetSymbolColoring::usage="";


(* ::Subsubsection::Closed:: *)
(*CopyCells*)



FESelectCells::usage=
  "Selects cells by criterion";


(* ::Subsubsection::Closed:: *)
(*Export*)



FEExport::usage="Exports FE stuff as text";


Begin["`Private`"];


(* ::Subsection:: *)
(*Patterns*)



$FENotebookPatterns=
  _NotebookObject|_FrontEnd`NotebookObject|_FrontEnd`SelectedNotebook|
  _FrontEnd`InputNotebook|_FrontEnd`ButtonNotebook|
  _FrontEnd`EvaluationNotebook|_FrontEnd`MessagesNotebook|
  _FrontEnd`HelpBrowserNotebook|_FrontEnd`ClipboardNotebook;
$FECellPatterns=
  _CellObject|_FrontEnd`CellObject|_FrontEnd`EvaluationCell;
$FEBoxPatterns=
  _BoxObject|_FrontEnd`BoxObject;
$FEObjectPatterns=
  $FENotebookPatterns|$FECellPatterns|$FEBoxPatterns;


(* ::Subsection:: *)
(*Packets*)



(* ::Subsubsection::Closed:: *)
(*Packet usages*)



FESetMouseAppearance[obj_]:=
  FEPacketExecute[
    "SetMouseAppearance",
  None,
    obj
    ]


FEScreenPosition[{x_,y_},anchorPosition:None|Automatic|{_,_}:None]:=
  {
    Replace[x,{
      Scaled[i_]:>
        i*(#[[1,2]]-#[[1,1]]&)@CurrentValue[$FrontEndSession,ScreenRectangle],
      Left:>
        CurrentValue[$FrontEndSession,ScreenRectangle][[1,1]],
      Right:>
        CurrentValue[$FrontEndSession,ScreenRectangle][[1,2]],
      Center:>
        (#[[1,1]]+(#[[1,2]]-#[[1,1]])/2&)@
          CurrentValue[$FrontEndSession,ScreenRectangle]
          }
      ],
    Replace[y,{
        Scaled[j_]:>
          j*(#[[2,2]]-#[[2,1]]&)@CurrentValue[$FrontEndSession,ScreenRectangle]
        Bottom:>
          CurrentValue[$FrontEndSession,ScreenRectangle][[2,1]],
        Top:>
          CurrentValue[$FrontEndSession,ScreenRectangle][[2,2]],
        Center:>
          (#[[2,1]]+(#[[2,2]]-#[[2,1]])/2&)@
            CurrentValue[$FrontEndSession,ScreenRectangle]
        }]
    }+
    Replace[anchorPosition,{
      None->{0,0},
      Automatic:>MousePosition[]
      }];
FEScreenPosition[pos:_?NumericQ|Scaled|_Symbol]:=
  FEScreenPosition[
    Replace[pos,{
      Left:>{Left,Last@MousePosition[]},
      Right:>{Right,Last@MousePosition[]},
      Top:>{First@MousePosition[],Top},
      Bottom:>{First@MousePosition[],Bottom},
      Center->{Center,Center},
      e:Except[_List]:>{e,e}
      }],
    None];
FEScreenPath[
  crds:({_,_}|_Symbol|_?NumericQ)..,
  anchor:("Anchor"->(Automatic|None|{_,_})):("Anchor"->None)]:=
  Rest@
    FoldList[FEScreenPosition[#2,#]&,Last@anchor,{crds}];


FEMoveMouse[crds__]:=
  Replace[FEScreenPosition[crds],{
    c:{_,_}:>
      FEPacketExecute["SimulateMouseMove",c],
    _->$Failed
    }];
FEMoveMouse[]:=
  FEMoveMouse[{0,0},Automatic]


FEClickMouse[crds__]:=
  Replace[FEScreenPosition[crds],{
    c:{_,_}:>
      FEPacketExecute["SimulateMouseClick",c],
    _->$Failed
    }];
FEClickMouse[]:=
  FEClickMouse[{0,0},Automatic]


FEDragMouse[crds__]:=
  Replace[FEScreenPath[crds],{
    c:{{_,_}..}:>
      FEPacketExecute["SimulateMouseDrag",c],
    _->$Failed
    }];
FEDragMouse[]:=
  FEDragMouse[{10,0},{-10,0},Automatic]


(* ::Subsubsection::Closed:: *)
(*Object*)



FEParent[obj,n]~addUsage~
  "Gets the nth parent object of obj";
FEParent[
  obj:_NotebookObject|_CellObject|_BoxObject,
  n:_Integer?Positive:1
  ]:=
  Nest[
    Replace[FrontEndExecute@FrontEnd`ParentObject[#],
      $Failed:>
        FirstCase[
          FrontEndExecute/@{
            FrontEnd`ParentBox[#],
            FrontEnd`ParentCell[#],
            FrontEnd`ParentNotebook[#]
            },
          _NotebookObject|_CellObject|_BoxObject,
          $FrontEnd
          ]
      ]&,
    obj,
    n
    ];


FEChildren[obj,n]~addUsage~
  "Gets the association of object children for obj to depth n";
FEChildren[
  obj:_FrontEndObject|_NotebookObject|_CellObject|_BoxObject,
  n:_Integer?Positive:1
  ]:=
  If[n>1,
    Flatten@
      Nest[
        ReplaceAll[
          o:_NotebookObject|_CellObject|_BoxObject:>
            o->FrontEndExecute@FrontEnd`ObjectChildren[o]
          ],
        obj,
        n
        ],
    FrontEndExecute@FrontEnd`ObjectChildren[obj]
    ];


FENextSibling[obj:_NotebookObject|_CellObject|_BoxObject,
  n:_Integer?Positive:1]:=
  Nest[
    FrontEndExecute@*FrontEnd`NextSiblingObject,
    obj,
    n
    ];
FEPreviousSibling[
  obj:_NotebookObject|_CellObject|_BoxObject,
  n:_Integer?Positive:1]:=
  Nest[
    FrontEndExecute@*FrontEnd`PreviousSiblingObject,
    obj,
    n
    ];


FESiblings[obj:_NotebookObject|_CellObject|_BoxObject]:=
  Replace[FEParent[obj],{
    o:Except[$Failed]:>
      DeleteCases[FEChildren[o],obj]
      }]


(* ::Subsection:: *)
(*Boxes*)



(* ::Subsubsection::Closed:: *)
(*Ref*)



Options[FEBoxRef]={
  "Start"->Automatic,
  "Offset"->1,
  "Parent"->False
  };
FEBoxRef[
  obj:
    _NotebookObject|_CellObject|_BoxObject|
    "Self"|Automatic:Automatic,
  id_,
  ops:OptionsPattern[]
  ]:=
  FE`BoxReference[
    Replace[obj,{
      "Self":>FE`Evaluate[FEPrivate`Self[]],
      Automatic:>InputNotebook[]
      }],
    {
      Replace[OptionValue["Parent"],{
        True->FE`Parent,
        _->Identity
        }]@id
      },
    Replace[OptionValue["Offset"],{
      i_Integer?Positive:>
        (FE`BoxOffset->{FE`BoxChild[i]}),
      i_Integer?Negative:>
        (FE`BoxOffset->{FE`BoxParent[i]}),
      _:>
        Sequence@@{}
      }],
    Replace[OptionValue["Start"],{
      "Beginning":>
        (FE`SearchStart->"StartFromBeginning"),
      "End":>
        (FE`SearchStart->"StartFromEnd"),
      s:_String|_NotebookObject|_CellObject|_BoxObject:>
        (FE`SearchStart->s),
      _:>
        Sequence@@{}
      }]
    ];


(* ::Subsubsection::Closed:: *)
(*Object*)



FEBoxObject[
  b_FE`BoxReference
  ]:=
  FrontEndExecute@
    FrontEnd`BoxReferenceBoxObject[
      b
      ];
FEBoxObject[
  {
    obj:
      _NotebookObject|_CellObject|_BoxObject|
        "Self"|Automatic:Automatic,
    id_,
    ops___?OptionQ
    }
  ]:=
  FEBoxObject@FEBoxRef[obj,id,ops];


(* ::Subsubsection::Closed:: *)
(*Select*)



FEBoxSelect[
  b_FE`BoxReference
  ]:=
  FrontEndExecute@
    FrontEnd`BoxReferenceFind[
      b
      ];
FEBoxSelect[
  {
    obj:
      _NotebookObject|_CellObject|_BoxObject|
        "Self"|Automatic:Automatic,
    id_,
    ops___?OptionQ
    }
  ]:=
  FEBoxSelect@FEBoxRef[obj,id,ops];


(* ::Subsubsection::Closed:: *)
(*Read*)



FEBoxRead[
  b_FE`BoxReference
  ]:=
  FrontEndExecute@
    FrontEnd`BoxReferenceRead[b];
FEBoxRead[
  {
    obj:
      _NotebookObject|_CellObject|_BoxObject|
        "Self"|Automatic:Automatic,
    id_,
    ops___?OptionQ
    }
  ]:=
  FEBoxRead[
    FEBoxRef[obj,id,ops]
    ];


(* ::Subsubsection::Closed:: *)
(*Replace*)



FEBoxReplace[
  b_FE`BoxReference,
  arg:_String|_?BoxQ
  ]:=
  FrontEndExecute@
    FrontEnd`BoxReferenceReplace[b,arg];
FEBoxReplace[b_FE`BoxReference,arg_]:=
  FEBoxReplace[b,ToBoxes@arg];
FEBoxReplace[
  {
    obj:
      _NotebookObject|_CellObject|_BoxObject|
        "Self"|Automatic:Automatic,
    id_,
    ops___?OptionQ
    },
  arg_
  ]:=
  FEBoxReplace[
    FEBoxRef[obj,id,ops],
    arg];


(* ::Subsubsection::Closed:: *)
(*Edit*)



FEBoxEdit[
  b_FE`BoxReference,
  function_
  ]:=
  FEBoxReplace[b,
    function@FEBoxRead[b]
    ];
FEBoxEdit[
  {
    obj:
      _NotebookObject|_CellObject|_BoxObject|
        "Self"|Automatic:Automatic,
    id_,
    ops___?OptionQ
    },
  function_
  ]:=
  FEBoxEdit[
    FEBoxRef[obj,id,ops],
    function
    ];


(* ::Subsubsection::Closed:: *)
(*GetOptions*)



FEBoxGetOptions[
  b_FE`BoxReference
  ]:=
  FrontEndExecute@
    FrontEnd`BoxReferenceGetOptions[b];
FEBoxGetOptions[
  b_FE`BoxReference,
  ops_
  ]:=
  FrontEndExecute@
    FrontEnd`BoxReferenceGetOptions[b,ops];
FEBoxGetOptions[
  {
    obj:
      _NotebookObject|_CellObject|_BoxObject|
        "Self"|Automatic:Automatic,
    id_,
    ops___?OptionQ
    },
  op_
  ]:=
  FEBoxGetOptions[
    FEBoxRef[obj,id,ops],
    op
    ];
FEBoxGetOptions[
  {
    obj:
      _NotebookObject|_CellObject|_BoxObject|
        "Self"|Automatic:Automatic,
    id_,
    ops___?OptionQ
    }]:=
  FEBoxGetOptions[
    FEBoxRef[obj,id,ops]
    ]


(* ::Subsubsection::Closed:: *)
(*SetOptions*)



FEBoxSetOptions[
  b_FE`BoxReference,
  ops_
  ]:=
  FrontEndExecute@
    FrontEnd`BoxReferenceGetOptions[b,ops];
FEBoxSetOptions[
  {
    obj:
      _NotebookObject|_CellObject|_BoxObject|
        "Self"|Automatic:Automatic,
    id_,
    ops___?OptionQ
    },
  op_
  ]:=
  FEBoxSetOptions[
    FEBoxRef[obj,id,ops],
    op
    ];


(* ::Subsection:: *)
(*Screens*)



(* ::Subsubsection::Closed:: *)
(*Screens*)



$FETopBarHeight:=
  $FETopBarHeight=
    With[{nb=
        CreateDocument[{},
          WindowSize->{500,Scaled[1]},
          Visible->False
          ]
        },
      #[[2]]-#[[1]]&@{
        Last[
          WindowSize/.AbsoluteOptions[nb,WindowSize]
          ],
        SetOptions[nb,WindowFrame->"Frameless"];
        #&@(
          Last[
            WindowSize/.AbsoluteOptions[nb,WindowSize]
            ])
        }
      ];


$FEFrameDimensions:=
  $FEFrameDimensions=
    With[{e=
        Notebook[{
            Cell[
              BoxData[
                GraphicsBox[{},
                  ImageSize->Full]
                ],"Output",
              ShowCellBracket->False,
              CellMargins->0]},
          WindowSize->
          CurrentValue[WindowSize]
          ]},
      FrontEndExecute[
        ExportPacket[
          Join[e,
            Notebook[WindowElements->None,WindowFrameElements->None]],
          "BoundingBox"]
        ][[1,2]]-
      FrontEndExecute[ExportPacket[e,"BoundingBox"]][[1,2]]
      ];


$FESideBarWidth:=
  First@$FEFrameDimensions;
$FEBottomBarHeight:=
  Last@$FEFrameDimensions;


FEWindowSize[nb_]:=
  (WindowSize/.AbsoluteOptions[nb,WindowSize])+
    Switch[CurrentValue[nb,WindowFrame],
      Automatic,
        {0,$FETopBarHeight},
      _,
        {0,0}
      ]+
    {
      0,
      If[
        MemberQ[CurrentValue[nb,WindowFrameElements],"ResizeArea"]||
        MemberQ[CurrentValue[nb,WindowElements],
          "HorizontalScrollBar"|"StatusArea"|"MagnificationPopUp"],
        $FEBottomBarHeight,
        0
        ]
      };


FEScreenRectangle[d:{{_,_},{_,_}}]:=
  d;
FEScreenRectangle[Full]:=
  Transpose@{{0,0},Last/@CurrentValue@ScreenRectangle};
FEScreenRectangle[{w_,h_}]:=
  With[{v=Last/@CurrentValue@ScreenRectangle},
    FEScreenRectangle[
      {
        Replace[w,
          Scaled[i_]:>i*First@v
          ],
        Replace[h,
          Scaled[i_]:>i*Last@v
          ]
        }
      ]
    ];
FEScreenRectangle[nb_NotebookObject]:=
  With[{
    rec=CurrentValue@ScreenRectangle,
    marg=
      WindowMargins/.
        AbsoluteOptions[nb,WindowMargins]
      },
    {
      {
        marg[[1,1]]+rec[[1,1]],
        rec[[1,2]]-marg[[1,2]]
        },
      {
        rec[[2,2]]-marg[[2,1]],
        rec[[2,1]]+marg[[2,2]]
        }
      }
    ];
FEScreenRectangle[Automatic]:=
  FEScreenRectangle@InputNotebook[];


FEScreenShot[screen_:Automatic]:=(
  Needs["GUIKit`"];
  GUIKit`GUIScreenShot@FEScreenRectangle[screen]
  );
FECopyScreen[screen_:Automatic]:=
  CopyToClipboard@FEScreenShot[screen];


feScreenWatcher[expr_,events_,ops___]:=
  CreateDocument[expr,
    ops,
    CellInsertionPointCell->
      Cell[""],
    BlinkingCellInsertionPoint->False,
    NotebookEventActions->
      Flatten@{events},
    WindowMargins->
      {
        CurrentValue[ScreenRectangle][[1,1]],
        0
        },
    WindowSize->
      (Last/@CurrentValue[ScreenRectangle]),
    Deployed->
      True,
    WindowFrame->
      "Frameless",
    WindowOpacity->
      .5,
    Background->
      Gray
    ]


(*With[{c=$Context},
FEScreenRecorder[var_:"ScreenRecorder"]:=
	With[{dynamicVar=
		Replace[var,{
			s_String:>
				With[{v=Unique[c<>s<>"$"]},
					v={};
					Dynamic[v]
					],
			s_Symbol:>
				With[{v=Unique[s]},
					v={};
					Dynamic[v]
					],
			Verbatim[Dynamic][v_]:>
				(
					v={};
					Dynamic[v]
					)
			}],
		rect=
			Create
		},
		
		
		]
	]*)


(* ::Subsection:: *)
(*Notebooks*)



(* ::Subsubsection::Closed:: *)
(*FEAttachCell*)



(* ::Subsubsubsection::Closed:: *)
(*feAttachCellValidateRadialAway*)



feAttachCellValidateRadialAway[spec_]:=
  If[
    !MatchQ[spec, 
      _Offset|_Integer|_Scaled|"InlineContents"|"Inline"|
      {_Integer|_Scaled, _Integer|_Scaled}|
      Automatic
    ],
    PackageThrowMessage[
      "BadSpec",
      "FEAttachCell distance spec can only be one of ``",
      "MessageParameters"->{{
        Offset[SpanFromLeft], Integer, Scaled[SpanFromLeft], 
        ToString["InlineContents", InputForm], 
        ToString["Inline", InputForm],
        {Integer|Scaled[SpanFromLeft], Integer|Scaled[SpanFromLeft]}
        }}
      ],
    True
    ]


(* ::Subsubsubsection::Closed:: *)
(*feAttachCellValidateAlign*)



feAttachCellValidateAlign[spec_]:=
  If[
    !MatchQ[spec, 
      {
      Center|Left|Right,
      Center|Bottom|Top
      }|
      Center|Left|Right|Bottom|Top|"EndOfContents"|"StartOfContents"|
      Automatic
    ],
    PackageThrowMessage[
      "BadSpec",
      "FEAttachCell alignment spec can only be one of ``",
      "MessageParameters"->{{
        Center, Left, Right, Bottom, Top,  
        ToString["EndOfContents", InputForm], 
        {Center|Left|Right, Center|Bottom|Top}
        }}
      ],
    True
    ]


(* ::Subsubsubsection::Closed:: *)
(*feAttachCellValidateAnchor*)



feAttachCellValidateAnchor[spec_]:=
  If[
    !MatchQ[spec, 
      {
        Center|Left|Right|_Scaled|_Integer|_Real|Baseline,
        Center|Bottom|Top|_Scaled|_Integer|_Real|Baseline
        }|
      Center|Left|Right|Bottom|Top|Baseline|
      Automatic
    ],
    PackageThrowMessage[
      "BadSpec",
      "FEAttachCell anchor spec can only be one of ``",
      "MessageParameters"->List@{
        Center, Left, Right, Bottom, Top, 
        {
          Center|Left|Right|Scaled[SpanFromLeft]|Integer|Real,
          Center|Bottom|Top|Scaled[SpanFromLeft]|Integer|Real
          }
        }
      ],
    True
    ]





(* ::Subsubsubsection::Closed:: *)
(*feAttachCellValidateClosingActions*)



feAttachCellValidateClosingActions[spec_]:=
  If[
    !MatchQ[spec, 
      ("ParentChanged"|"EvaluatorQuit"|"CellGroupOpened"|
      "OutsideMouseClick"|"SelectionDeparture"|"MouseExit")|
      Automatic|
      {("ParentChanged"|"EvaluatorQuit"|"CellGroupOpened"|
      "OutsideMouseClick"|"SelectionDeparture"|"MouseExit")...}
    ],
    PackageThrowMessage[
      "BadSpec",
      "FEAttachCell \"ClosingActions\" spec can only be one of ``",
      "MessageParameters"->{{
        "ParentChanged", "EvaluatorQuit", "OutsideMouseClick", 
        "SelectionDeparture", "SelectionDeparture", "MouseExit",
        {
          "ParentChanged"|"EvaluatorQuit"|
          "OutsideMouseClick"|"SelectionDeparture"|"MouseExit",
          SpanFromLeft
          }
        }}
      ],
    True
    ]


(* ::Subsubsubsection::Closed:: *)
(*FEAttachCell*)



iFEAttachCellSpec//Clear;
iFEAttachCellSpec[
  parent_,
  expr_,
  radialAway_,
  alignment_,
  anchor_,
  closingActions_
  ]:=
  Module[
    {
      rad=radialAway,
      align=alignment,
      anch=anchor,
      close,
      size,
      frame
      },
    size=
      Replace[
        Replace[alignment,
          Automatic:>
            Replace[anchor,Automatic->Top]],{
        Bottom|Top->{
          Dynamic[First@CurrentValue[parent,WindowSize]],
          Automatic
          },
        Left|Right->{
          Automatic,
          Dynamic[Last@CurrentValue[parent,WindowSize]]
          },
        _->{Scaled[1],Automatic}
        }];
    frame=
      Replace[
        Replace[alignment,
          Automatic:>
            Replace[anchor,Automatic->Top]
          ],{
        Bottom->{{0,0},{0,1}},
        Top->{{0,0},{1,0}},
        Left->{{0,1},{0,0}},
        Right->{{1,0},{0,0}},
        _->{{1,1},{1,1}}
        }];
    rad=
      Replace[rad,
        {
          {a_,b_}:>Offset[{a,b}, 0],
          Automatic:>
            Replace[align,
              {
                "EndOfContents"->"InlineContents",
                _->Automatic
                }
              ]
          }
        ];
    align=
      Replace[alignment,
        Automatic:>
          If[MatchQ[parent, _NotebookObject],
            Replace[anchor,
              {
                Automatic->
                  {Center,Top},
                tb:(Top|Bottom):>
                  {Center,tb},
                lr:(Left|Right):>
                  {lr,Center}
                }
              ],
            Replace[rad,
              {
                "InlineContents"->"EndOfContents",
                _->{Left,Bottom}
                }
              ]
            ]
        ];
    anch=
      Flatten[ConstantArray[#, 2]][[;;2]]&@
      Replace[anchor,
        Automatic:>
          If[MatchQ[parent, _NotebookObject],
            Replace[alignment,
              {
                Automatic->
                  {Center,Top},
                tb:(Top|Bottom):>
                  {Center,tb},
                lr:(Left|Right):>
                  {lr,Center}
                  }
              ],
            If[align==="EndOfContents",
              {Baseline, Baseline},
              {Left,Top}
              ]
            ]
        ];
    close=
      Flatten@List@
        Replace[closingActions,
          Automatic->{"ParentChanged", "EvaluatorQuit"}
          ];
    close=
      DeleteDuplicates@
        Which[
          MatchQ[parent, _NotebookObject],
            close/."ParentChanged"->"OutsideMouseClick",
          rad==="InlineContents"||align==="EndOfContents",
            close/."ParentChanged"->"SelectionDeparture",
          True,
            close
          ];
    If[StringQ@rad,
      rad=Quiet[ToExpression["FrontEnd`"<>rad]]
      ];
    If[StringQ@align,
      align=Quiet[ToExpression["FrontEnd`"<>align]]
      ];
    <|
      "Parent"->
        Replace[parent,Automatic:>EvaluationCell[]],
      "Expression"->
        Replace[expr,
          Except[_Cell|_TextCell|_ExpressionCell]:>
            If[MatchQ[parent,_NotebookObject],
              Cell[BoxData@ToBoxes@expr,
                "DockedCell",
                Background->GrayLevel[.95],
                TextAlignment->Center,
                CellSize->size,
                CellFrame->frame
                ],
              Cell[BoxData@ToBoxes@expr]
              ]
          ],
      "Position"->rad,
      "Alignment"->align,
      "Anchor"->anch,
      "ClosingActions"->close
      |>
    ]


FEAttachCellSpec//Clear;
FEAttachCellSpec[
  parent:($FEObjectPatterns|Automatic):Automatic,
  expr_,
  radialAway:_?feAttachCellValidateRadialAway:Automatic,
  alignment:_?feAttachCellValidateAlign:Automatic,
  anchor:_?feAttachCellValidateAnchor:Automatic,
  closingActions:_?feAttachCellValidateClosingActions:Automatic
  ]:=
  iFEAttachCellSpec[
    parent, expr, 
    radialAway, alignment, 
    anchor, 
    closingActions
    ]


FEAttachCell//Clear;
FEAttachCell[
  parent:($FEObjectPatterns|Automatic):Automatic,
  expr_,
  radialAway:_?feAttachCellValidateRadialAway:Automatic,
  alignment:_?feAttachCellValidateAlign:Automatic,
  anchor:_?feAttachCellValidateAnchor:Automatic,
  closingActions:_?feAttachCellValidateClosingActions:Automatic
  ]:=
  With[
    {
      spec=
        iFEAttachCellSpec[
          parent, expr, 
          radialAway, alignment, 
          anchor, 
          closingActions
          ]
      },
    FrontEndExecute@
      FrontEnd`AttachCell[
        spec["Parent"],
        spec["Expression"],
        {spec["Position"], spec["Alignment"]},
        spec["Anchor"],
        "ClosingActions"->spec["ClosingActions"]
        ]
    ];


(* ::Subsubsection::Closed:: *)
(*FENotebooks*)



FENotebooks[f_String?FileExistsQ]:=
  List@SelectFirst[FrontEndExecute@FrontEnd`ObjectChildren[$FrontEnd],
Quiet@NotebookFileName@#===f&
    ];
FENotebooks[Optional["*","*"]]:=
  FrontEndExecute@FrontEnd`ObjectChildren[$FrontEnd];
FENotebooks[pat:Except["*"|_String?FileExistsQ]]:=
  Select[FrontEndExecute@FrontEnd`ObjectChildren[$FrontEnd],
    Replace[Quiet@NotebookFileName@#,{
        s_String:>
          StringMatchQ[s,pat],
        _->False
        }
      ]||
    Replace[Quiet@NotebookFileName@#,{
        s_String:>
          FileBaseName@StringMatchQ[s,pat],
        _->False
        }
      ]||
    StringMatchQ[
      WindowTitle/.AbsoluteOptions[#,WindowTitle],
      pat
      ]&
    ]


(* ::Subsubsection::Closed:: *)
(*SelectCells*)



FESelectCells[
  nbObj:_NotebookObject|Automatic:Automatic,
  test_:(True&)
  ]:=
  Module[{
    nb=Replace[nbObj,Automatic:>InputNotebook[]],
    cells
    },
    cells=
      Replace[test,{
        s:_String|{__String}:>
          Cells[nb,CellStyle->s],
        r_Rule:>
          Cells[nb,r],
        _:>Select[Cells[nb],test]
        }];
    If[Quiet[NotebookFileName[nb]]===$Failed,
      SetSelectedNotebook[nb]
      ];
    Function[
      SelectionMove[#,All,Cell,AutoScroll->False];
      FrontEndExecute@
        FrontEnd`SelectionAddCellTags[
          nb,
          "---ToCopy---"
          ];
      ]/@cells;
    If[Quiet[NotebookFileName[nb]]===$Failed,
      NotebookLocate["---ToCopy---",AutoScroll->False],
      NotebookLocate[
        {NotebookFileName[nb],"---ToCopy---"},
        AutoScroll->False]
      ];
    FrontEndExecute@
      FrontEnd`SelectionRemoveCellTags[
        nb,
        "---ToCopy---"
        ];
    ]


(* ::Subsection:: *)
(*Symbol Coloring*)



(* ::Subsubsection::Closed:: *)
(*FEHiddenBlock*)



FEHiddenBlock[expr_]:=
(
    Internal`SymbolList[False];
    (Internal`SymbolList[True];#)&@expr
    );
FEHiddenBlock~SetAttributes~HoldAllComplete;


(* ::Subsubsection::Closed:: *)
(*FEUnhideSymbols*)



FEUnhideSymbols[syms__Symbol,
  cpath:{__String}|Automatic:Automatic,
  mode:"Update"|"Set":"Update"
  ]:=
  With[{stuff=
    Map[
      Function[Null,
        {Context@#,SymbolName@Unevaluated@#},
        HoldAllComplete],
      HoldComplete[syms]
      ]//Apply[List]
    },
    KeyValueMap[
      FrontEndExecute@
      If[mode==="Update",
        FrontEnd`UpdateKernelSymbolContexts,
        FrontEnd`SetKernelSymbolContexts
        ][
        #,
        Replace[cpath,Automatic->$ContextPath],
        {{#,{},{},#2,{}}}
        ]&,
      GroupBy[stuff,First->Last]
      ];
    ];
FEUnhideSymbols[names_String,mode:"Update"|"Set":"Update"]:=
  Replace[
    Thread[ToExpression[Names@names,StandardForm,Hold],Hold],
    Hold[{s__}]:>FEUnhideSymbols[s,mode]
    ];
FEUnhideSymbols~SetAttributes~HoldAllComplete;


(* ::Subsubsection::Closed:: *)
(*FERehideSymbols*)



FERehideSymbols[syms__Symbol,
  cpath:{__String}|Automatic:Automatic,
  mode:"Update"|"Set":"Update"]:=
  With[{stuff=
    Map[
      Function[Null,
        {Context@#,SymbolName@Unevaluated@#},
        HoldAllComplete],
      HoldComplete[syms]
      ]//Apply[List]
    },
    KeyValueMap[
      FrontEndExecute@
      If[mode==="Update",
        FrontEnd`UpdateKernelSymbolContexts,
        FrontEnd`SetKernelSymbolContexts
        ][
        #,
        Replace[cpath,
          Automatic->$ContextPath
          ],
        {{#,{},#2,{},{}}}
        ]&,
      GroupBy[stuff,First->Last]
      ];
    ];
FERehideSymbols[names_String,mode:"Update"|"Set":"Update"]:=
  Replace[
    Thread[ToExpression[Names@names,StandardForm,Hold],Hold],
    Hold[{s__}]:>FERehideSymbols[s,mode]
    ];
FERehideSymbols~SetAttributes~HoldAllComplete;


(* ::Subsubsection::Closed:: *)
(*FESetSymbolColoring*)



FESetSymbolColoring[
  {syms__},
  cont:_String|Automatic:Automatic,
  contPath:{__String}|Automatic:Automatic,
  which:
  "Undefined"|"Removed"|"Defined"|"Cleared"|
  1|2|3|4|{(1|2|3|4|"Undefined"|"Removed"|"Defined"|"Cleared")..}
  ]:=
  With[{
      stuff=
      Map[
        Function[Null,
          If[StringQ@Unevaluated[#],
            Replace[
              StringSplit[#,"`",2],
              {{c_,s_}:>{c<>"`",s},{s_}:>{$Context,s}}
              ],
            {Context@#,SymbolName@Unevaluated@#}
            ],
          HoldAllComplete
          ],
        HoldComplete[syms]
        ]//Apply[List],
      whi=
      Replace[Flatten@{which},
        {
          "Undefined"->1,
          "Removed"->2,
          "Defined"->3,
          "Cleared"->4
          },
        1
        ]
      },
    FrontEndExecute@
    FrontEnd`UpdateKernelSymbolContexts[
      Replace[cont,Automatic:>$Context],
      Replace[contPath,Automatic:>$ContextPath],
      KeyValueMap[
        With[{symlist=#2},
          Prepend[Replace[cont,Automatic:>#]]@
          Fold[
            ReplacePart[#,#2->symlist]&,
            ConstantArray[{},4],
            whi
            ]
          ]&,
        GroupBy[stuff,First->Last]
        ]
      ]
    ];
FESetSymbolColoring[s_,a___]:=
  FESetSymbolColoring[{s},a];
FESetSymbolColoring~SetAttributes~HoldAllComplete;


(* ::Subsection:: *)
(*Export*)



$FEExportFormats=
  {
    "PlainText", "InputText",
   "PostScript", "InputForm", "GIF",
   "BoundingBox", "NotebookString",
   "EnhancedMetafile", "Metafile", "MGF", 
   "CDFNotebookString", "PDF",
   "PICT", "BitmapPacket"
   };


FEExportPrep[c_Cell]:=
  c;
FEExportPrep[c_CellObject]:=
  NotebookRead@c;
FEExportPrep[b_BoxData]:=
  Cell[b];
FEExportPrep[r_?BoxQ]:=
  Cell[BoxData@r];
FEExportPrep[e_]:=
  Cell[BoxData@ToBoxes@e];


FEExport[
  thing_, 
  fmt:Alternatives@@$FEExportFormats:"PlainText"
  ]:=
  First@FrontEndExecute@ExportPacket[FEExportPrep@thing, fmt];


PackageAddAutocompletions[
  FEExport,
  {
    None,
    $FEExportFormats
    }
  ]


End[];



