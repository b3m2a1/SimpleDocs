(* ::Package:: *)

(* Autogenerated Package *)

$DocGenURLBase::usage=
  "The default URL base for web docs";
$DocGenWebResourceBase::usage=
  "";


$DocGenFE::usage="The front-end to use for web export stuff";
DocGenLoadFE::usage="Makes a new FE for web export";


$DocGenMessageStack::usage=
  "Stack for errors";


DocGenGenerateHTMLDocumentation::usage=
  "Exports doc pages as HTML";
DocGenHTMLCloudDeploy::usage=
  "Cloud deploys the docs";


Begin["`Private`"];


$DocGenWebResourceBase=
  URLBuild@
    <|
      "Scheme"->"https",
      "Domain"->"www.wolframcloud.com",
      "Path"->{"objects","b3m2a1.docs","reference"}
      |>;


DocGenLoadFE[]:="I'm trying to get rid of this";
  (*Replace[
		DocGenSettingsLookup["DocGenFrontEnd"],
		Except[_LinkObject?LinkReadyQ]:>
			With[{fe=
				Block[{System`UseFrontEndDump`LocalFEQ=(False&)},
					Developer`InstallFrontEnd[]
					]
				},
				MathLink`FrontEndBlock[
					FrontEndResource["GetFEKernelInit"],
					fe
					];
				$DocGenSettings[Default, "FrontEnd"]=fe
				]
		]*)


If[!MatchQ[OwnValues[$DocGenFE],{_:>_LinkObject?LinkReadyQ}],
  $DocGenFE:=
    DocGenLoadFE[]
  ]


(* ::Subsubsection::Closed:: *)
(*webExportApplicationsInstall*)



webExportApplicationsInstall[
  dir:(_String|_File)?DirectoryQ|_FileName?(DirectoryQ@*ToFileName):
    FileName[{$UserBaseDirectory,"Applications"}]
  ]:=
  If[Length[
      Join@@(
        Select[#["Version"]=!="0"&]@*
          PacletManager`PacletFind/@
            {"DocumentationBuild","Transmogrify"}
        )
        ]<2,
    If[
        TrueQ@DialogInput[
          Grid@{
            {"Download the DocumentationBuild and Transmogrify packages?"},
            {DefaultButton[DialogReturn[True]],CancelButton}
            }
          ],
      {
        If[Length@Select[#["Version"]=!="0"&]@
          PacletManager`PacletFind["DocumentationBuild"]===0,
          If[Length@PacletManager`PacletFind["DocumentationBuild"]>0,
            PacletManager`PacletUpdate,
            PacletManager`PacletInstall
            ][
            "DocumentationBuild",
            "Site"->
              URLBuild@<|
                "Scheme"->"http",
                "Domain"->"www.wolframcloud.com",
                "Path"->{"objects","b3m2a1.paclets","DocumentationBuild"}
                |>
              ]
          ],
        If[Length@Select[#["Version"]=!="0"&]@
          PacletManager`PacletFind["Transmogrify"]===0,
          If[Length@PacletManager`PacletFind["Transmogrify"]>0,
            PacletManager`PacletUpdate,
            PacletManager`PacletInstall
            ][
            "Transmogrify",
            "Site"->
              URLBuild@<|
                "Scheme"->"http",
                "Domain"->"www.wolframcloud.com",
                "Path"->{"objects","b3m2a1.paclets","Transmogrify"}
                |>
              ]
          ]
        },
      $Failed
      ],
    Join@@
      (Select[#["Version"]=!="0"&]@*PacletManager`PacletFind)/@
        {"DocumentationBuild","Transmogrify"}
    ];


(* ::Subsubsection::Closed:: *)
(*webExportDocumentationBuildLoad*)



webExportDocumentationBuildLoad[]:=
  If[!ListQ@$webExportDocumentationBuildContexts,
    Block[{
      cpathOld=$ContextPath,
      $ContextPath=$ContextPath,
      packOld=$Packages
      },
      Quiet[
        Needs["DocumentationBuild`"],
        General::shdw
        ];
      $webExportDocumentationBuildContexts=
        Select[
          DeleteCases[$ContextPath,Alternatives@@cpathOld],
          Not@*StringStartsQ["XML`"|"JLink`"]
          ];
      $webExportDocumentationBuildPackages=
        Select[
          DeleteCases[$Packages,Alternatives@@packOld],
          Not@*StringStartsQ["XML`"|"JLink`"]
          ];
      ]
    ];


webExportDocumentationBuildRemove[]:=
  (
    Quiet[Through@*{Unprotect,Remove}/@{#<>"*",#<>"*`*"},Remove::rmnsm]&/@
      $webExportDocumentationBuildContexts;
    Unprotect[$Packages];
    $Packages=
      DeleteCases[$Packages,
        Alternatives@@
          Append[
            Join[
              $webExportDocumentationBuildContexts,
              $webExportDocumentationBuildPackages
              ],
            _?(StringStartsQ["DocumentationBuild`"|"Transmogrify`"])
            ]
        ];
    Protect[$Packages];
    $webExportDocumentationBuildContexts=.
    )


(* ::Subsubsection::Closed:: *)
(*webExportTransformAndLayout*)



webExportTransformAndLayout[entityType_String]:=
  {
    FileNameJoin@Flatten@{
      DocumentationBuild`Common`$DocumentationBuildTransformDirectory,
      #[[1]]
      },
    FileNameJoin@Flatten@{
      DocumentationBuild`Common`$DocumentationBuildTransformDirectory,
      "HTML",
      "Layouts",
      #[[2]]
      }
    }&@
  Switch[
    entityType,
      Alternatives["AppleScript",
        "File", "LibraryLink C Function", 
        "MathLink C Function", "LibraryLink C Function",
        "Method", "Symbol", "Message", 
        "System Program", "Widget", "Screencast"
      ],
        {
          {"HTML", "Functions.m"},
          "Functions.html"
          },
      "Program",
        {
          {"HTML", "Functions.m"};
           "ManPage.html"
          },
      "Format"|"Embedding Format"|
        "Device Connection"|"Interpreter",
        {
          {"HTML", "Functions.m"},
          "Formats.html"
          },
      "Service Connection",
        {
          {"HTML", "Services.m"},
          "Services.html"
          },
      "Example",
        {
          {"HTML", "ExamplePages.m"},
          "ExamplePages.html"
          },
      "HowTo",
        {
          {"HTML", "Functions.m"},
           "HowTos.html"
           },
      "Front End Object",
        {
          {"HTML", "Functions.m"},
          "FrontEndObjects.html"
          },
      "Indicator",
        {
          {"HTML", "Functions.m"},
          "Indicators.html"
          },
      "Menu Item",
        {
          {"HTML", "Functions.m"},
           "MenuItems.html"
           },
      "Character" | "Character Name",
        {
          {"HTML", "Functions.m"},
          "Characters.html"
          },
      "Guide",
        {
          {"HTML", "Guides.m"},
           "Guides.html"
          },
      "Root Guide",
        {
          {"HTML", "Guides.m"},
          "RootGuide.html"
          },
      "Guide Overview",
        {
          {"HTML", "Guides.m"},
          "GuideOverview.html"
          },
      "Standard Extra Packages",
        {
          {"HTML", "SpecialGuides.m"},
          "SpecialGuides.html"
          },
      "Note" | "Tutorial" | "Upgrade Information",
        {
          {"HTML", "Tutorials.m"},
          "Tutorials.html"
          },
      "Overview",
        {
          {"HTML", "TutorialOverviews.m"},
          "TutorialOverviews.html"
          }
      ];


(* ::Subsubsection::Closed:: *)
(*webExportGatherParameters*)



$webExportParameters=
  {
    "title"->"Title",
    "titlemodifier"->"TitleModifier",
    "history"->"HistoryData",
    "type"->"EntityType",
    "paclet"->"PacletName",
    "context"->"Context",
    "uri"->"URI",
    "keywords"->"Keywords",
    "tutorialcollectionlinks"->"TutorialCollectionLinks",
    "summary"->"Summary",
    "index"->"IndexQ"
    };


webExportGatherParameters[nb_,ops___?OptionQ]:=
  Normal@
    KeyMap[
      Replace[
        HoldPattern[Capitalize[s_]]:>
          Function[ToUpperCase[StringTake[#,1]]<>StringDrop[#,1]][s]
        ]@*Capitalize@*
        Replace[$webExportParameters],
      Association@
        FilterRules[
          Flatten@{
            ops,
            Fold[Lookup,Options[nb,TaggingRules],{TaggingRules,"Metadata"}]
            },
          Alternatives@@Flatten[Through@{Keys,Values}[$webExportParameters]]
          ]
      ];


(* ::Subsubsection::Closed:: *)
(*webExportDefaultParametersFormat*)



webExportDefaultParametersFormat[gathered_]:=
  KeyMap[
    Replace[
      {
        "Layout"->"layoutfile",
        "Title"->"title",
        "TitleModifier"->"titlemodifier",
        "ModifiedNotesQ"->"modifiednotesQ",
        "Context"->"contextName",(*
				"BuildMode"->"buildmode",*)
        "URI"->"url",
        "LinkTrail"->"linkTrail",
        "Keywords"->"keywords",
        "Flag"->"flag",
        "Language"->"language",
        "SeeAlso"->"seeAlsoFunctions",
        "Captions"->"rootCaptions",
        "RelatedGuids"->"moreAboutGuides",
        "PacletName"->"pacletName",
        "ExampleSections"->"exampleSections",
        "Tutorials"->"tutorials",
        "URLBaseRemote"->"urlBaseRemote",
        "EntityType"->"entityType",
        "TutorialCollection"->"tutorialcollection",
        "SpecialKeywords"->"specialKeywords",
        "TutorialFunctions"->"tutorialFunctions",
        "GuideMoreAbout"->"guideMoreAbout",
        "HTMLBase"->"htmlBase",
        "Summary"->"summary",
        "RelatedTutorials"->"relatedTutorials",
        "GuideTutorials"->"guideTutorials",
        "HTMLHeader"->"htmlHeader",
        "HTMLFooter"->"htmlFooter",
        "AnchorBar"->"anchorBar",
        "FeaturedExampleData"->"featuredexampledata",
        "Dashboard"->"dashboard",
        "SearchSSI"->"searchSSI",
        "FooterSSI"->"footerSSI",
        "LanguageLinkSSI"->"languageLinkSSI",
        "CopyrightSSI"->"copyrightSSI"
        }
      ],
    Association@
      Join[gathered,
        Options[DocumentationBuild`Export`ExportWebPage]
        ]
  ]


(* ::Subsubsection::Closed:: *)
(*webExportNotebookPrep*)



webExportNotebookPrep//Clear


(* ::Subsubsubsection::Closed:: *)
(*GuideReferenceSection*)



$webExportGuideReferenceCell=
  Cell[
    TextData[{
      Cell[
        BoxData[
          InterpretationBox[
            StyleBox[
              GraphicsBox[{},
                BaselinePosition->Baseline,
                ImageSize->{6, 0}
                ],
              CacheGraphics->False
              ],
            Spacer[6]]
          ]
        ],
      "Reference"
      }], 
    "GuideReferenceSection",
    System`WholeCellGroupOpener->True
    ];


(* ::Subsubsubsection::Closed:: *)
(*NotesSectionCell*)



webExportNotesSectionCell=
  Cell[
    TextData[Cell[BoxData[
      ButtonBox[
        Cell[
          TextData[
            {Cell[
                BoxData[InterpretationBox[
                  StyleBox[
                    GraphicsBox[{},
                      BaselinePosition->Baseline,ImageSize->{6,0}],
                    CacheGraphics->False],Spacer[6]]]],"Details and Options"}],
          "NotesFrameText"
          ],
        Appearance->{Automatic,None},BaseStyle->None,
        ButtonFunction:>
          (FrontEndExecute[{
              FrontEnd`SelectionMove[
                FrontEnd`SelectedNotebook[],
                All,ButtonCell
                ],
            FrontEndToken["OpenCloseGroup"],
            FrontEnd`SelectionMove[FrontEnd`SelectedNotebook[],After,CellContents]
            }]&),
        Evaluator->None,Method->"Preemptive"]
        ]]],
     "NotesSection",
     System`WholeCellGroupOpener->True,
     CellGroupingRules->{"SectionGrouping", 50}
    ];


(* ::Subsubsubsection::Closed:: *)
(*PrimaryExamplesCell*)



webPrimaryExamplesCell[examplesCountCell_]:=
  Cell[
    TextData[
      {Cell[
        BoxData[InterpretationBox[
          StyleBox[GraphicsBox[{},BaselinePosition->Baseline,ImageSize->{6,0}],
            CacheGraphics->False],Spacer[6]]]],
        "Examples","\[NonBreakingSpace]\[NonBreakingSpace]",
        examplesCountCell
      }],"PrimaryExamplesSection",
    System`WholeCellGroupOpener->True,CellTags->"PrimaryExamplesSection"
    ]


(* ::Subsubsubsection::Closed:: *)
(*Common*)



webExportNotebookPrep[nb_,"Common"]:=
  ReplaceRepeated[
    nb,{
    (*String versioning *)
    FEPrivate`If[
     FEPrivate`Or[
      FEPrivate`SameQ[FEPrivate`$ProductVersion, "6.0"], 
      FEPrivate`SameQ[FEPrivate`$ProductVersion, "7.0"], 
      FEPrivate`SameQ[FEPrivate`$ProductVersion, "8.0"]
      ],
      t_,
      f_
      ]:>
      If[6<=$VersionNumber<9,
        t,
        f
        ],
    (* Remove WWBCommon Details Section*)
     Cell["", "NotesSection",___]:>
       webExportNotesSectionCell,
    Cell["", "PrimaryExamplesSection",e___]:>
      webPrimaryExamplesCell@
        FirstCase[{e},
          Cell[___,"ExampleCount",___],
          "",
          \[Infinity]
          ],
    (* Remove Special opener spec *)
    DynamicBox[
      ToBoxes@
        CurrentValue[
          EvaluationNotebook[], {TaggingRules, "Openers", ___},
          ___
          ],
      ___
      ]:>Closed,
    (*Downconvert RefLinkPlain boxes*)
    TemplateBox[b_,"RefLinkPlain"|"PackageLink",e___]:>
      TemplateBox[b,"RefLink",e],
    (*Provide single string BaseStyle*)
    (BaseStyle->{s_}):>
      (BaseStyle->s),
    (*Strip single-space Spacers*)
    Cell[
      BoxData[
        InterpretationBox[
          StyleBox[
            GraphicsBox[{},
              BaselinePosition->Baseline,
              ImageSize->{1, 0}],
            CacheGraphics->False],
            Spacer[1],
          Selectable->False]
        ],
      ___
      ]:>
      Sequence@@{},
    (*Remove versioning*)
    DynamicBox[e:If[$VersionNumber<_,__],___]:>
      e,
    (*Remove LinkHand MouseAppearance on top action menus*)
    TagBox[a:ActionMenuBox[_FrameBox,___],MouseAppearanceTag["LinkHand"]]:>
      a,
    (*Revert arrows on top action menus*)
    Cell[
      TextData[{t_," ",
        Cell[
          BoxData[
            GraphicsBox[
              _List?(
                MatchQ[Flatten@#,
                  {
                    _GrayLevel, _Thickness,
                    LineBox[{{-1.8, 0.5}, {0, 0}, {1.8, 0.5}}]
                    }
                  ]&),
              ___
              ]
            ],
          ___
          ],
        ___
        }],
      ___
      ]|
      t_String?(StringContainsQ[("See Also"|"More About"|"URL")~~" \[RightGuillemet]"])|
    TemplateBox[{t_,_,
      GraphicsBox[
        _List?(
          MatchQ[Flatten@#,
            {
              _GrayLevel, _Thickness,
              LineBox[{{-1.8, 0.5}, {0, 0}, {1.8, 0.5}}]
              }
            ]&),
        ___
        ]
      },
    "RowDefault"
    ]:>
    RuleCondition[
      With[{t2=
        StringReplace[StringTrim[t,"\""],{
          "More About"->"Related Guides",
          " \[RightGuillemet]"->""
          }]},
        InterpretationBox[
          Cell[
            TextData[{
              t2,
              StyleBox[" \[FilledDownTriangle]", "AnchorBarArrow",
                StripOnInput->False]
              }]],
          TextCell[
            Row[{t2, 
              Style[" \[FilledDownTriangle]", "AnchorBarArrow"]}]
            ]
          ]
        ],
      True
      ],
    "\"Copy Mathematica url\""->
      "\"Copy Wolfram Documentation Center URL\"",
    uname:("\"Copy web url\""|
      "\"Go to web url\""):>
        StringReplace[uname,"url"->"URL"],
    ActionMenuBox[
      FrameBox[s_,e___],
      actions_,
      a___?(OptionQ[#]&&First[#]=!=MenuStyle&)
      ]:>
      With[{a2=
        Sequence@@
          If[!MemberQ[Keys[Cases[{a},_Rule]],MenuStyle],
            {
              a,
              MenuStyle->
                Which[
                  StringContainsQ[s,"See Also"],
                    "SeeAlso",
                  StringContainsQ[s,"More About"|"Related Guides"],
                    "MoreAbout",
                  StringContainsQ[s,"URL"],
                    "URLMenu",
                  StringContainsQ[s,"Related Links"],
                    "RelatedLinks",
                  StringContainsQ[s,"Tutorials"],
                    "Tutorials"
                  ]
              },
            {a}
            ]
        },
        ActionMenuBox[
          FrameBox[s,e],
          actions,
          a2
          ]
        ]
    }
  ]


(* ::Subsubsubsection::Closed:: *)
(*Symbol*)



webExportNotebookPrep[nb_,"Symbol"]:=
  ReplaceRepeated[nb,{
    (*Convert TextData cells to plain cells*)
    Cell[TextData[s_String],r___]:>
      Cell[s,r],
    (*Convert reflinks to hyperlinks*)
    t:TemplateBox[{_,_String},refLinksRewindable,___]:>
      refLinkRewind[t],
    (*Remove language protections reflinks to hyperlinks*)
    Cell[TextData[{c_,___}],"ObjectNameGrid",___]:>
      c,
    Cell[_,"NotesThumbnails"|"ObjectNameTranslation",___]:>
      Sequence@@{},
    (*Remove arrow openers*)
    Cell[
      TextData[{
        Cell[BoxData[_DynamicBox],___]|
          Cell[BoxData[Cell[BoxData[_TogglerBox],___]],___],
        e__
        }],
      t:"NotesSection"|"PrimaryExamplesSection"|
      "ExampleSection"|"ExampleSubsection",r___]:>
      Cell[TextData[{e}],t,r]
    }]


(* ::Subsubsubsection::Closed:: *)
(*Guide*)



$webExportRelatedStuffStyles=
  "GuideMoreAboutSection"|"GuideTutorialsSection"|
  "GuideRelatedLinksSection"|"GuideLinksSection"|
  "GuideRelatedTutorialsSection";


$webExportRelatedStuffCell=
  Cell[_,
    $webExportRelatedStuffStyles,
    ___]|
  Cell[
    CellGroupData[
      {
        Cell[_,
          $webExportRelatedStuffStyles,
          ___],
        ___
        },
      ___],
    ___];


$webExportRefBlockCellStyles=
  "GuideFunctionsSection"|"GuideReferenceSection"


$webExportRefEndBlockStyles=
  $webExportRelatedStuffStyles|
    "FooterCell";


$webExportGuiderSpacerStyles=
  "SectionFooterSpacer"|"SectionHeaderSpacer";
$webExportGuiderSpacerCell=
  Cell[_,"SectionFooterSpacer"|"SectionHeaderSpacer",___];


$webExportEndBlockCell=
  Cell[_,
    $webExportRefEndBlockStyles,
    ___]|
  Cell[
    CellGroupData[
      {
        Cell[_,
          $webExportRefEndBlockStyles,
          ___],
        ___
        },
      ___],
    ___];


webExportNotebookPrep[nb_,"Guide"]:=
    Replace[
      (* Fix case of improperly formatted reference cells *)
      (*Reformat guide layout*)
      Notebook[{
        (*Pre-title cells*)
        a:Shortest[__Cell],
        (*title cell*)
        title:
          Cell[
            CellGroupData[{
              Cell[_,"GuideTitle",___],
              ___
              },___],
            ___
            ],
        (*Ref sections*)
        c:
        Longest[
          Cell[
            CellGroupData[
              {
                Cell[_,$webExportRefBlockCellStyles,___],
                ___
                },
              ___],
            ___
            ]...
          ],
        (*Unencapsulated data*)
        content:Except[$webExportEndBlockCell]...,
        (*Footer*)
        e:$webExportEndBlockCell,
        r___
        },
        o___
        ]:>
        Notebook[
          {
            a,
            title,
            c,
            If[Length[
              DeleteCases[{content},
                $webExportGuiderSpacerCell
                ]]>0,
              Cell[
                CellGroupData[
                  {
                    $webExportGuideReferenceCell,
                    Cell["", "SectionHeaderSpacer"],
                    Sequence@@
                      DeleteCases[{content},
                        $webExportGuiderSpacerCell
                        ],
                    Cell["", "SectionFooterSpacer"]
                    },
                  Open
                  ]
                ],
              Nothing
              ],
            e,
            r
            }/.{
            CellGroupData[{
              start:Except[Cell["", "SectionFooterSpacer",___]]...,
              Cell["", "SectionFooterSpacer",___]..,
              foot1:Except[Cell["", "SectionFooterSpacer",___]],
              foot2___
              },setting___]:>
              CellGroupData[{
                start,
                Cell["", "SectionFooterSpacer"],
                foot1,
                foot2
                },setting]
            }/.{
            Cell[
              name_?(Not@*FreeQ["Reference"]),
              $webExportRefBlockCellStyles,
              rest___
              ]:>
              Cell[
                name,
                "GuideReferenceSection",
                rest
                ]
            }/.{
            Cell[
              CellGroupData[
                data:{
                  Cell[_,
                    DeleteCases[$webExportRefBlockCellStyles,
                      "GuideReferenceSection"
                      ],
                    ___
                    ],
                  ___
                  },
                ___
                ],
              cellstuff___
              ]:>
              Cell[CellGroupData[data,Closed],cellstuff]
            },
          o
          ]
      ]@
    Replace[{
      (* Fix case of no reference cell *)
      Notebook[
        {
          a:Shortest[__Cell],
          Cell[
            CellGroupData[{
              title:Cell[_,"GuideTitle",___],
              abstract:
                Cell[_,"GuideAbstract",___]..,
              content___
              },
              ___
              ],
            ___
            ],
          e:$webExportEndBlockCell,
          r___
          },
        o___
        ]:>
        Notebook[{
          a,
          Cell[
            CellGroupData[{
              title,
              abstract
              }]
            ],
          Cell[
            CellGroupData[
              {
                $webExportGuideReferenceCell,
                Cell["", "SectionHeaderSpacer"],
                content,
                Cell["", "SectionFooterSpacer"]
                }
              ]
            ],
          e,
          r
          },
          o
          ]
      }]@
    ReplaceAll[{
      (*Reformat Related ___ sections*)
      Cell[
        CellGroupData[{
          c:
            Cell[_,
              $webExportRelatedStuffStyles,
              ___],
          e___
          },
          s___
          ],
        o___
        ]:>
        Cell[CellGroupData[{c,Cell["", "SectionHeaderSpacer"],e},s],o]
      }]@
    ReplaceAll[{
      Cell[
        CellGroupData[{
          ___,
          c:$webExportRelatedStuffCell,
          r___
          },s___],
        o___
        ]:>
        Cell[
          CellGroupData[{c,r},s],
          o
          ]
      }]@
    ReplaceRepeated[nb,{
      (*Remove delimiter subsections*)
      Cell[
        CellGroupData[
          {e__,Cell[_,"GuideDelimiterSubsection",___]},
          s___
          ],
        o___]:>
        Cell[CellGroupData[{e},s],o],
      (*Downconvert MoreAbout links*)
      (BaseStyle->"GuideMoreAbout"):>
        (BaseStyle->"GuideMoreAboutSub"),
      Cell[b_,"GuideMoreAbout",e___]:>
        Cell[b,"GuideMoreAboutSub",e],
      (*Add expected spacer to section names*)
      Cell[
        s_String,
        t:$webExportRelatedStuffStyles,
        e___]:>
        Cell[
          TextData[{
            Cell[BoxData[
              InterpretationBox[
                StyleBox[
                  GraphicsBox[{},
                    BaselinePosition->Baseline,
                    ImageSize->{6, 0}],
                  CacheGraphics->False],
                Spacer[6]]]],
              s
            }],
          t,
          e
          ]
      }]


(* ::Subsubsubsection::Closed:: *)
(*Fall Back*)



webExportNotebookPrep[nb_,_]:=nb


(* ::Subsubsubsection::Closed:: *)
(*Main*)



webExportNotebookPrep[nb_]:=
  With[{t=
    Replace[
      HoldPattern[Capitalize[s_]]:>
        Function[ToUpperCase[StringTake[#,1]]<>StringDrop[#,1]][s]
      ]@Capitalize@
      Fold[Lookup,
        Options[nb,TaggingRules],
        {TaggingRules,"Metadata","type"}
        ]
    },
    DeleteCases[
      Visible->False
      ]@
      webExportNotebookPrep[
        webExportNotebookPrep[nb,"Common"],
        t]
    ]


(* ::Subsubsection::Closed:: *)
(*webExportNotebook*)



webExportNotebook[file_,nb_,ops___?OptionQ]:=
  Internal`WithLocalSettings[
    webExportDocumentationBuildLoad[];
    System`Private`NewContextPath@
      Join[$webExportDocumentationBuildContexts, $ContextPath];,
    Block[
      {
        DocumentationBuild`Common`PubsEvaluateWithFE=
          Identity,
        DocumentationBuild`Common`Private`PubsStartFrontEnd=
          Identity,
        Print=
          Identity,
        NotebookOpen,
        NotebookPut,
        expFile,
        params=Flatten@{ops}
        },
      expFile=
        If[DirectoryQ@file,
          FileNameJoin@Flatten@{
            file,
            URLParse[
              Lookup[params, "URI",
                URLBuild@{
                  "",
                  "DocPage-"<>ToString[RandomInteger[10000]]
                  }
                ],
              "Path"
              ]
            }<>".html",
          file
          ];
      NotebookOpen[e___]:=
        MathLink`CallFrontEnd[
          FrontEnd`NotebookOpenReturnObject[e, Visible->False]
          ];
      NotebookPut[e_]:=
        MathLink`CallFrontEnd[
          FrontEnd`NotebookPutReturnObject[Append[e, Visible->False]]
          ];
      With[
        {
          nbprep=webExportNotebookPrep@nb,
          fexpd=ExpandFileName[expFile],
          kdparams=Normal@KeyDrop[params, {"Format","Layout"}],
          passops=
            FilterRules[
              Flatten@{
                ops,
                "CompleteHTMLQ" -> True
                },
              FilterRules[
                Options[DocumentationBuild`Export`ExportWebPage],
                Except["HistoryData"|"Language"]
                ]
              ]
            },
        Quiet@DeleteFile[fexpd];
        Replace[
          MathLink`FrontEndBlock[
            Quiet[
              DocumentationBuild`Export`ExportWebPage[
                fexpd,
                nbprep,
                kdparams,
                Sequence@@passops
                ]
              ],
            $DocGenFE
            ],{
          e:Except[_String?FileExistsQ]:>
            (
              webExportDocumentationBuildRemove[];
              webExportDocumentationBuildLoad[];
              Replace[
                GeneralUtilities`WithMessageHandler[
                  $DocGenMessageStack[fexpd]={};
                  MathLink`FrontEndBlock[
                    DocumentationBuild`Export`ExportWebPage[
                      fexpd,
                      nbprep,
                      kdparams,
                      Sequence@@passops
                      ],
                    $DocGenFE
                    ],
                  ($DocGenMessageStack[fexpd]=
                    {$DocGenMessageStack[fexpd],#})&
                  ],
                Except[_String?FileExistsQ]:>
                  (
                    $DocGenMessageStack[fexpd]=
                      Flatten[$DocGenMessageStack[fexpd]];
                    $Failed
                    )
                ]
              )
            }
          ]
        ]
      ],
    System`Private`RestoreContextPath[]
    ]


(* ::Subsubsection::Closed:: *)
(*webExportAssetsCopy*)



$webExportAssets:=
  Map[
    <|
      "Drop"->FileNameDepth[#[[1]]]-FileNameDepth@#[[2]],
      "Files"->
        (*Drop the Japanese and Chinese resources *)
        Select[FileNames[#[[3]],#[[1]],\[Infinity]],
          Not@*StringContainsQ[".ja."|".zh."]
          ],
      "Insert"->If[Length@#>3,#[[4]],Nothing]
      |>&,
    {
      {
        FileNameJoin@{
          DocumentationBuild`Common`$DocumentationBuildDirectory,
          "Internal","web","html","javascript"
          },
        "javascript",
        {
          "*.js"
          }
        },
      {
          FileNameJoin@{
            DocumentationBuild`Common`$DocumentationBuildDirectory,
            "Internal","web","html","css"
            },
          "css",
          {
            "*.css"
            }
        },
      {
        FileNameJoin@{
          DocumentationBuild`Common`$DocumentationBuildDirectory,
          "Internal","web","html","2014","standard"
          },
        "",
        {
          "*.js","*.json","*.css","*.png","*.gif","*.jpg",
          "*.svg","*.eot","*.otf","*.ttf","*.woff","*.html"
          }
        },
      {
        FileNameJoin@{
          DocumentationBuild`Common`$DocumentationBuildDirectory,
          "Internal","web","html","2014","standard"
          },
        "",
        {
          "*.ttf","*.woff"
          },
        "fonts"
        },
      {
        FileNameJoin@{
          DocumentationBuild`Common`$DocumentationBuildDirectory,
          "Internal","web","html","2014",
          "minimal",
          "javascript"
          },
        "javascript",
        "faster-page-load.js"
        },
      {
        FileNameJoin@{
          DocumentationBuild`Common`$DocumentationBuildDirectory,
          "Internal","web","html","images",
          "mathematicaImages"
          },
        FileNameJoin@{"images","mathematicaImages"},
        "bullet.gif"
        }
      }
    ];


webExportAssetsCopy1[dir:(_String|_File)?DirectoryQ]:=
  With[{resources=$webExportAssets},
    If[
      AnyTrue[resources,
        AnyTrue[
          #["Files"],
          With[{depth=#["Drop"],insert=#["Insert"]},
            Not@FileExistsQ@FileNameJoin@
              Flatten@{dir,
                DirectoryName@FileNameDrop[#,depth],
                insert,
                StringReplace[FileNameTake[#],".en."->"."]
                }&
            ]
          ]&
        ],
      Block[{d,f},
        Monitor[
          Flatten@
          Table[
            With[{depth=a["Drop"],insert=a["Insert"]},
              Table[
                d=
                  FileNameJoin@
                    Flatten@{dir,
                      DirectoryName@FileNameDrop[f,depth],
                      insert
                      };
                If[!DirectoryQ@d,
                  CreateDirectory[d,
                    CreateIntermediateDirectories->True
                    ]
                  ];
                If[!FileExistsQ@
                    FileNameJoin@
                      Flatten@{
                        d,
                        StringReplace[FileNameTake[f],".en."->"."]
                        },
                  If[StringMatchQ[FileExtension[#],"css"|"js"|"html"],
                    webExportPostProcess[#],
                    #
                    ]&@
                    CopyFile[f,
                      FileNameJoin@
                        Flatten@{
                          d,
                          StringReplace[FileNameTake[f],".en."->"."]
                          },
                      OverwriteTarget->True
                      ],
                  FileNameJoin@
                    Flatten@{
                      d,
                      StringReplace[FileNameTake[f],".en."->"."]
                      }
                  ],
                {f,a["Files"]}
                ]
              ],
            {a,resources}
            ],
        Internal`LoadingPanel[
          "Copying `` to ``"~TemplateApply~
            {
              f,
              FileNameJoin@
                Flatten@{
                  d,
                  StringReplace[FileNameTake[f],".en."->"."]
                  }
              }
          ]
        ]
      ],
    Join@@
      Map[
        With[{depth=#["Drop"],insert=#["Insert"],files=#["Files"]},
          Map[
            FileNameJoin@
              Flatten@{dir,
                DirectoryName@FileNameDrop[#,depth],
                insert,
                StringReplace[FileNameTake[#],".en."->"."]
                }&,
            files
            ]
          ]&,
        resources
        ]
    ]
  ];
webExportAssetsCopy2[dir:(_String|_File)?DirectoryQ]:=
  With[{resources=
    Join[
      Thread[{
        "javascript",{
          "sub-pages.js",
          "image-swap.js",
          "clipboard.js"->"clipboard.en.js"
          }}],
      Thread[{
        "images",{
          "clipboard@2x.png"
          }
        }],
      Thread[{
        "css",{
          "reference-special-styles.css"
          }
        }]
      ]
    },
    If[AnyTrue[resources,
        Not@FileExistsQ@FileNameJoin@
          Flatten@{dir,
            ReplacePart[#,
              -1->If[StringQ@#[[-1]],#[[-1]],#[[-1,1]]]
              ]
            }&],
      Block[{u,f},
        Monitor[
          Table[
            f=FileNameJoin@Flatten@{dir,If[StringQ@p,p,First@p]};
            u=
              URLBuild@
                Flatten@{
                  "http://reference.wolfram.com/2013",
                  ReplacePart[p,
                    -1->If[StringQ@p[[-1]],p[[-1]],p[[-1,1]]]
                    ]
                  };
            If[!FileExistsQ@f,
              Quiet@
                Check[
                  URLDownload[u,f],
                  Message["Download failed for `` to ``",
                     ReplacePart[p,
                      -1->If[StringQ@p[[-1]],p[[-1]],p[[-1,1]]]
                      ],
                     to
                     ],
                  URLDownload::invhttp
                  ],
              f
              ],
            {
              p,
              resources
              }  
            ],
          Internal`LoadingPanel[
            "Downloading `` to ``"~TemplateApply~
              {
                u,
                f
                }
            ]
          ]
        ],
      {}
      ]
    ]


webExportAssetsCopy[dir:(_String|_File)?DirectoryQ]:=
  Join[
    webExportAssetsCopy1[dir],
    webExportAssetsCopy2[dir]
    ];


(* ::Subsubsection::Closed:: *)
(*webExportPostProcess*)



webExportPostProcessSingleReplacements//Clear;
webExportPostProcessMultiReplacements//Clear;


$webExportPostProcessFileTypes=
  "css"|"js"|"html";


webExportPostProcessMultiReplacements[strip_,res_,base_,uri_]:=
  With[{
    trimmedRes=
      StringTrim[res,"/"~~EndOfString],
    paddedRes=
      StringTrim[res,"/"~~EndOfString]<>"/"
    },
    Flatten@{(*
			(* Insert prototype into loaded JS characters *)
			"<script src='javascript/common.js' type='text/javascript'></script>\n"<>
			"<script src='javascript/jquery.js' type='text/javascript'></script>\n"->
				"<script src='javascript/jquery.js' type='text/javascript'></script>\n"<>
					"<script src='javascript/common.js' type='text/javascript'></script>\n",*)
      (* Relink loaded JS and CSS *)
      h:("src"|"href")~~"="~~(q:"'"|"\"")~~t:"javascript"|"css"~~"/":>
        h<>"="<>q<>URLBuild@{res,t}<>"/",
      h:("src"|"href")~~"="~~(q:"'"|"\"")~~"/"~~t:"javascript"|"css"~~"/":>
        h<>"="<>q<>URLBuild@{res,t}<>"/",
      "/webMathematica/Resources/Documentation/English/"->
        paddedRes,
      (* Relink reference.css and clipboard.css *)
      l:("<link rel=\"stylesheet\" href=\""~~
        (paddedRes|"")~~"css/reference.css\" />"):>
        l<>"\n<link rel=\"stylesheet\" href=\""<>
          URLBuild@{trimmedRes,"css","clipboard.css"}<>"\" />",
      (* Insert jquery *)
      l:("<script src=\""~~(paddedRes|"")~~"javascript/reference.js\"></script>"):>
        "<script src=\""<>
          URLBuild@{trimmedRes,"javascript",
            "jquery","core","1.7.2","jquery.min.js"}<>"\" /></script>\n"<>l,
      (* Delete duplicate jquery *)
      (("<script src=\""<>
          URLBuild@{trimmedRes,"javascript",
            "jquery","core","1.7.2","jquery.min.js"}<>"\" /></script>\n")..):>
        "<script src=\""<>
          URLBuild@{trimmedRes,"javascript",
            "jquery","core","1.7.2","jquery.min.js"}<>"\" /></script>\n"
      }
    ];


webExportPostProcessSingleReplacements[strip_,res_,base_,uri_]:=
  With[{
    trimmedRes=
      StringTrim[res,"/"~~EndOfString],
    paddedRes=
      StringTrim[res,"/"~~EndOfString]<>"/",
    paddedBase=
      StringTrim[base,"/"~~EndOfString]<>"/"
    },
    Flatten@{
      Replace[strip,Except[_List|_Rule]->{}],
      (* Protect true links *)
      "http://reference.wolfram.com/language/"~~
        t:"ref"|"guide"|"tutorial":>
        "http://reference.wolfram.com/language/"<>t,
      paddedBase~~
        t:"ref"|"guide"|"tutorial":>
          "http://reference.wolfram.com/language/"<>t,
      "/language/"~~
        t:"ref"|"guide"|"tutorial":>
          URLBuild@{
            "http://reference.wolfram.com/language",
            t
            },
      (* Patch intra site links *)
      "/language/"~~param:Except[WhitespaceCharacter]...~~
        t:"ref"|"guide"|"tutorial"~~
          doc:Except[WhitespaceCharacter|"\""]...:>
          URLBuild@
            DeleteCases[{base,StringTrim[param,"/"],t,StringTrim[doc,"/"]},""],
      "http://reference.wolfram.com/language"->
        base,
      (* Patch resource directory *)
      "/common/"->
        paddedRes,
      (* Patch jquery version *)
      "jquery/core/1.6.1"->
        "jquery/core/1.7.2",
      (* Patch mathematicaImages to work a resource base *)
      "\"../"~~i:"images/mathematicaImages":>
        "\""<>URLBuild@{trimmedRes,i},
      "\""~~i:"images/mathematicaImages":>
        "\""<>URLBuild@{trimmedRes,i},
      "\"/mathematicaImages"->
        "\""<>URLBuild@{trimmedRes,"images","mathematicaImages"},
      (* Patch includes to work a resource base *)
      "\"/includes"->
        "\""<>URLBuild@{trimmedRes,"includes"},
      (* Downconvert 2013 resources to the standard resource base *)
      "/2013/"->
        paddedRes,
      (* Delete duplicates *)
      (l:"<script src=\""<>
          URLBuild@{trimmedRes,"javascript","jquery.min.js"}<>"\" /></script>\n")..:>
        l,
      (l:"<link rel=\"stylesheet\" href=\""<>
          URLBuild@{trimmedRes,"css","clipboard.css"}<>"\" />\n")..:>
        l
      }
    ];


webExportPostProcessSingleReplacements["css",strip_,res_,base_,uri_]:=
  {
    (* Add clipboard styles into reference.css *)
    t:"/*##############################\n\tCOLORS":>
      "/* clipboard styles */\n@import url('clipboard.css');\n"<>t
    };


webExportPostProcessSingleReplacements["js",strip_,res_,base_,uri_]:=
  {
    (* Clean up dangerous characters while protecting whitespace *)
    w:WhitespaceCharacter:>w,
    _?(Not@*PrintableASCIIQ)->""  
    };


webExportPostProcessSingleReplacements["html",strip_,res_,base_,uri_]:=
  With[{
    trimmedRes=
      StringTrim[res,"/"~~EndOfString],
    paddedRes=
      StringTrim[res,"/"~~EndOfString]<>"/"
    },
    {
      "<script type=\"text/javascript\" src=\""~~___~~"/sub-pages.js\">":>
        "<script src=\""<>
          URLBuild@{trimmedRes,"javascript","sub-pages.js"}<>"\" /></script>",
      "src=\"\""~~w:Whitespace~~
        "data-src=\""~~src:Except["\""]..~~"\"":>
        "src=\""<>src<>"\""<>w<>"data-src=\""<>src<>"\"",
      "data-big=\""~~data:Except["\""]..~~"\"":>
        "data-big=\""<>data<>"\" "<>
          "width="<>StringSplit[data][[1]]<>"px ",
      Shortest["<!--"~~"#include"|"[if IE]>"~~__~~"-->"]->""
      }
    ];





webExportPostProcessMultiReplacements[_,_,_,_,_]:=
  {
    };
webExportPostProcessSingleReplacements[_,_,_,_,_]:=
  {
    };


webExportMakeRelativeBase[file_]:=
  URLBuild@
    ConstantArray["..",
      With[{split=FileNameSplit@DirectoryName@file},
        SelectFirst[Range[Length@split],
          DirectoryQ@FileNameJoin@
            Append[
              Drop[split,-#],
              "javascript"
              ]&,
          1
          ]
        ]
      ]


webExportMakeURI[file_]:=
  URLBuild@
    With[{split=FileNameSplit@DirectoryName@file},
      Take[split,
        -1*
        SelectFirst[Range[Length@split],
          DirectoryQ@FileNameJoin@
            Append[
              Drop[split,-#],
              "javascript"
              ]&,
          1
          ]
        ]
      ]


webExportPostProcess//Clear


Options[webExportPostProcess]={
  "ResourceBase"->Automatic,
  "URLBase"->Automatic,
  "StripExtensions"->Automatic
  };
webExportPostProcess[file_String?FileExistsQ,ops:OptionsPattern[]]:=
  If[MatchQ[FileExtension[file],$webExportPostProcessFileTypes],
    With[{
      s=ReadString[file],
      ext=Replace[OptionValue["StripExtensions"],Automatic->{".en."->"."}],
      res=
        Replace[OptionValue["ResourceBase"],
          Automatic:>
            webExportMakeRelativeBase[file]
          ],
      base=
        Replace[OptionValue["URLBase"],
          Automatic:>
            webExportMakeRelativeBase[file]
          ],
      uri=
        webExportMakeURI[file]
      },
      If[StringQ[s],
        DeleteFile[file];
        Export[
          StringReplace[file,
            Replace[OptionValue["StripExtensions"],Except[_List|_Rule]->{}]
            ],
          FixedPoint[#,s,6]&@
            StringReplace@Join[
              webExportPostProcessMultiReplacements[
                ext,
                res,
                base,
                uri
                ],
              webExportPostProcessMultiReplacements[
                FileExtension[file],
                ext,
                res,
                base,
                uri
                ]
              ]//
              StringReplace@Join[
                webExportPostProcessSingleReplacements[
                  ext,
                  res,
                  base,
                  uri
                  ],
                webExportPostProcessSingleReplacements[
                  FileExtension[file],
                  ext,
                  res,
                  base,
                  uri
                  ]
                ]
            ,
          "Text"
          ],
        file
        ]
      ],
    file
    ];
webExportPostProcess[___]:=$Failed


(* ::Subsubsection::Closed:: *)
(*webExportAssetsDeploy*)



Options[webExportAssetsDeploy]=
  DeleteDuplicatesBy[First]@
    Join[
      {
        Permissions->"Public",
        "LastDeployment"->None
        },
      Options[CloudObject]
      ];
webExportAssetsDeploy[
  dir_String?DirectoryQ,
  uri_String,
  ops:OptionsPattern[]
  ]:=
  With[{
    files=
      Replace[OptionValue["LastDeployment"],{
        d_DateObject:>
          Select[Quiet[FileDate[#]>d,Greater::nordol]&],
        _:>
          Identity
        }]@
      Select[
        FileNames[
          "css"|"fonts"|"images"|"includes"|"javascript"~~
          $PathnameSeparator<>"*",
          dir,
          \[Infinity]],
        Not@*DirectoryQ
        ]
    },
    Block[{f},
      Monitor[
        Table[
          CopyFile[
            f,
            CloudObject[
              URLBuild@Flatten@{uri,FileNameSplit@FileNameDrop[f,FileNameDepth@dir]},
              Sequence@@FilterRules[Flatten@{
                ops,
                Options[webExportAssetsDeploy]
                },
                Options[CloudObject]
                ]
              ]
            ],
        {f,files}
        ],
        Internal`LoadingPanel[
          "Copying `` to ``"~TemplateApply~
            {
              f,
              URLBuild@Flatten@{uri,
                FileNameSplit@FileNameDrop[f,FileNameDepth@dir]}
              }
          ]
        ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*webExportCloudDeploy*)



Options[webExportCloudDeploy]=
  DeleteDuplicatesBy[First]@
    Join[
      {
        Permissions->"Public"
        },
      Options[CloudObject]
      ];
webExportCloudDeploy[
  dir_String?DirectoryQ,
  pages:{__String?FileExistsQ},
  uri_String,
  ops:OptionsPattern[]
  ]:=
  With[{
    files=
      Join[
        pages,
        Select[
          FileNames[
            "Files"<>$PathnameSeparator~~
              Alternatives@@Map[FileBaseName,pages]~~
                $PathnameSeparator<>"*",
            DirectoryName@First@pages,
            \[Infinity]],
          Not@*DirectoryQ
          ]
        ]
    },
    Block[{f},
      Monitor[
        Table[
          Replace[{
            CloudObject[c_,___]:>
              CloudObject[c]
            }]@
          CopyFile[
            f,
            CloudObject[
              URLBuild@
              Flatten@{uri,
                FileNameSplit@FileNameDrop[f,FileNameDepth@dir]},
              Sequence@@FilterRules[
                Flatten@{
                  ops,
                  Options[webExportCloudDeploy]
                  },
                Options[CloudObject]
                ]
              ]
            ],
            {f,files}
            ],
        Internal`LoadingPanel[
          "Copying `` to ``"~TemplateApply~
            {
              f,
              URLBuild@Flatten@{uri,
                FileNameSplit@FileNameDrop[f,FileNameDepth@dir]}
              }
          ]
        ]
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*webExportGetURLBase*)



webExportGetURLBase[url_,doc:"Docs"|"Resource":"Docs",deploy:True|False:False]:=
  Replace[
    Replace[
      url,
      Except[_URL|_String|_CloudObject|Automatic?(!deploy&)]:>
        Switch[
          doc,
          "Docs",
            If[deploy,
              $DocGenURLBase,
              "/"
              ],
          "Resource",
            If[deploy,
              $DocGenWebResourceBase,
              "/"
              ]
          ]
      ],{
    CloudObject[u_,___]:>
      u,
    s_String?(URLParse[#,"Scheme"]===None&):>
      If[deploy,
        First@CloudObject[s],
        s
        ]
    }];


(* ::Subsubsection::Closed:: *)
(*webExportNotebookDoExport*)



webExportNotebookDoExport[
  dir_,
  nb_,
  deploy_, 
  urlBase_,
  resBase_,
  ops:OptionsPattern[]
  ]:=
  With[
    {
      params=webExportGatherParameters[nb, ops]
      },
    Replace[
      webExportNotebook[dir, nb ,params],{
      Except[_String?FileExistsQ]:>
        (
          Message[DocGenGenerateHTMLDocumentation::fail];
          Throw[$Failed]
          ),
      f_String?FileExistsQ:>
        With[{fns=
          FileNames[ToLowerCase[FileBaseName[f]]<>"*.html",
            FileNameJoin@{
              DirectoryName[f],
              "Files",
              FileBaseName[f]
              }
            ]
          },
          webExportPostProcess[
            #,
            FilterRules[
              Flatten@{
                (* Link URL base and Resources *)
                "URLBase"->
                  webExportGetURLBase[
                    urlBase,
                    deploy
                    ],
                "ResourceBase"->
                  webExportGetURLBase[
                    resBase,
                    "Resource",
                    deploy
                    ],
                params
                },
              Options[webExportPostProcess]
              ]
            ]&/@Prepend[fns,f];
          f
          ]
        }
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*DocGenHTMLPostProcess*)



DocGenHTMLPostProcess//Clear


Options[DocGenHTMLPostProcess]=
  {
    "Highlighting"->Automatic,
    CloudConnect->Automatic,
    CloudDeploy->False,
    "DeployAssets"->False,
    "CopyAssets"->True,
    "URLBase"->Automatic,
    Directory->Automatic
    };
DocGenHTMLPostProcess[
  html:{(_String|$Failed)..}|None,
  ops:OptionsPattern[]
  ]:=
  With[
    {
      highlight=
        OptionValue["Highlighting"],
      deploy=
        TrueQ@OptionValue[CloudDeploy],
      dir=
        Replace[OptionValue[Directory], 
          Automatic:>$DocGenWebDocsDirectory
          ]
      },
    If[MatchQ[highlight, True|False],
      CurrentValue[$FrontEndSession,
        {AutoStyleOptions,"HighlightUndefinedSymbols"}
        ]=
        highlight
      ];
    If[deploy,
      Replace[
        Replace[OptionValue[CloudConnect],
          Automatic->Key["DocumentationAccount"]
          ],{
        a:$KeychainCloudAccounts:>
          KeychainConnect[a],
        s_String:>
          If[$WolframID=!=s,
            CloudConnect[s]
            ],
        {s__String}:>
          CloudConnect[s],
        k_Key:>
          KeychainConnect[k]
        }]
      ];
    If[deploy&&OptionValue["DeployAssets"],
      Replace[
        webExportGetURLBase[
          OptionValue["ResourceBase"],
          "Resource",
          deploy
          ],
        s_String:>
          webExportAssetsDeploy[dir,s,
            FilterRules[
              {
                ops
                },
              Options@webExportAssetsDeploy
              ]
            ]
        ]
      ];
    If[deploy&&AllTrue[html, FileExistsQ],
      Replace[
        webExportGetURLBase[OptionValue["URLBase"], deploy],
        s_String:>
          If[html=!=None,
            webExportCloudDeploy[dir, 
              html,
              s,
              FilterRules[
                {
                  ops
                  },
                Options@webExportCloudDeploy
                ]
              ]
            ]
        ],
      html
      ]
    ]


(* ::Subsubsection::Closed:: *)
(*DocGenHTMLCloudDeploy*)



DocGenHTMLCloudDeploy//Clear


Options[DocGenHTMLCloudDeploy]=
  Options[DocGenHTMLPostProcess]
DocGenHTMLCloudDeploy[
  html:{(_String?(Not@*DirectoryQ)|$Failed)..},
  ops:OptionsPattern[]
  ]:=
  DocGenHTMLPostProcess[
    html,
    CloudDeploy->True,
    ops
    ];
DocGenHTMLCloudDeploy[
  htmls:{{(_String?(Not@*DirectoryQ)|$Failed)..}..},
  ops:OptionsPattern[]
  ]:=
  DocGenHTMLCloudDeploy[#, ops]&/@htmls;
DocGenHTMLCloudDeploy[
  dir:_String?DirectoryQ,
  ops:OptionsPattern[]
  ]:=
  DocGenHTMLCloudDeploy[
    FileNames[__~~(".html"|".txt"|".png"), dir, \[Infinity]],
    ops
    ];
DocGenHTMLCloudDeploy[
  p_PacletManager`Paclet,
  ops:OptionsPattern[]
  ]:=
  DocGenHTMLCloudDeploy[
    FileNameJoin@{$DocGenWebDocsDirectory, StringTrim[p["Name"], "Documentation_"]},
    ops
    ];
DocGenHTMLCloudDeploy[
  dir:{(_String?DirectoryQ|_PacletManager`Paclet)..},
  ops:OptionsPattern[]
  ]:=
  DocGenHTMLCloudDeploy[
    #,
    ops
    ]&/@dir;


(* ::Subsubsection::Closed:: *)
(*DocGenGenerateHTMLDocumentation*)



DocGenGenerateHTMLDocumentation::nopkg=
  "DocumentationBuild and/or Transmogrify missing";
DocGenGenerateHTMLDocumentation::fail=
  "Failed to build HTML documentation. Check Message stack.";
DocGenGenerateHTMLDocumentation::baddir=
  "Couldn't build into directory ``";


Options[DocGenGenerateHTMLDocumentation]=
  Join[
    {
      Directory->Automatic
      },
    Options[DocGenGenerateSymbolPages],
    Options[webExportPostProcess],
    Options[DocumentationBuild`Export`ExportWebPage],
    Options[webExportAssetsDeploy],
    {
        CloudConnect->Automatic,
        CloudDeploy->False,
        "DeployAssets"->False,
        "CopyAssets"->True
      }
    ];
DocGenGenerateHTMLDocumentation[
  nb:{__Notebook}|None,
  ops:OptionsPattern[]
  ]:=
  Catch@
  With[{
    deploy=TrueQ@OptionValue[CloudDeploy],
    highlight=
      CurrentValue[$FrontEndSession,
        {AutoStyleOptions,"HighlightUndefinedSymbols"}
        ],
    dir=
      Replace[OptionValue[Directory], 
        Automatic:>$DocGenWebDocsDirectory
        ]
    },
    If[MatchQ[dir, $DocGenWebDocsDirectory]&&!DirectoryQ[$DocGenWebDocsDirectory],
        CreateDirectory[$DocGenWebDocsDirectory]
        ];
    If[!MatchQ[dir, (_String|_File)?DirectoryQ|_FileName?(DirectoryQ@*ToFileName)],
      Message[DocGenGenerateHTMLDocumentation::baddir, dir];
      Throw[$Failed]
      ];
    If[
      TrueQ@OptionValue["CopyAssets"]||
        TrueQ@OptionValue["DeployAssets"],
      webExportAssetsCopy[dir]
      ];
    If[Length@webExportApplicationsInstall[]<2,
      Message[DocGenGenerateHTMLDocumentation::nopkg];
      $Failed,
      CheckAbort[
        DocGenHTMLPostProcess[
          #,
          FilterRules[
            {
              "Higlighting"->highlight,
              ops
              },
            Options[DocGenHTMLPostProcess]
            ]
          ]&@
        If[nb===None,
          None,
          If[Length@nb>1,
            Monitor[
              ReleaseHold[#],
              Internal`LoadingPanel[
                "Generating HTML page `` of ``"
                  ~TemplateApply~
                {i,Length@nb}
                ]
              ],
            ReleaseHold@#
            ]&@
            Hold@
              Table[
                webExportNotebookDoExport[
                  dir, 
                  nb[[i]],
                  deploy, 
                  OptionValue["URLBase"],
                  OptionValue["ResourceBase"],
                  ops
                  ],
                {i, Length@nb}
                ]
          ],
        CurrentValue[$FrontEndSession,
          {AutoStyleOptions,"HighlightUndefinedSymbols"}
          ]=
          highlight;
        $Aborted
        ]
      ]
    ];


DocGenGenerateHTMLDocumentation::notnb=
  "`` is not a notebook";


DocGenGenerateHTMLDocumentation[
  nb:{__NotebookObject},
  ops___?OptionQ
  ]:=
  DocGenGenerateHTMLDocumentation[NotebookGet/@nb,ops];
DocGenGenerateHTMLDocumentation[
  f:{__String?FileExistsQ},
  ops___?OptionQ
  ]:=
  Block[{file},
    Monitor[
      Table[
        With[{nb=Import[file]},
          If[MatchQ[nb,_Notebook],
            DocGenGenerateHTMLDocumentation[nb, ops],
            Message[DocGenGenerateHTMLDocumentation::nonb,nb];
            $Failed
            ]
          ],
        {file,f}
        ],
      Internal`LoadingPanel[
        "Generating HTML for ``"~TemplateApply~
          file
        ]
      ]
    ];
DocGenGenerateHTMLDocumentation[
  nb:_Notebook|_NotebookObject|(_String|_File)?(FileExistsQ@#&&Not@DirectoryQ@#&),
  ops___?OptionQ
  ]:=
  Replace[
    DocGenGenerateHTMLDocumentation[{nb}, ops],
    {l_}:>l
    ];
DocGenGenerateHTMLDocumentation[
  d_String?DirectoryQ,
  ops___?OptionQ
  ]:=  
  DocGenGenerateHTMLDocumentation[
    FileNames["*.nb",
      If[DirectoryQ@FileNameJoin@{d,"Documentation","English"},
        FileNameJoin@{d,"Documentation","English"},
        d
        ],
      \[Infinity]],
    ops
    ];


DocGenGenerateHTMLDocumentation::nopac=
  "Paclet `` not found at location ``"


DocGenGenerateHTMLDocumentation[
  p_PacletManager`Paclet,
  ops___?OptionQ
  ]:=
  With[{d=PacletLookup[p,"Location"]},
    If[DirectoryQ[d],
      DocGenGenerateHTMLDocumentation[d, ops],
      Message[DocGenGenerateHTMLDocumentation::nopac,p,d];
      $Failed
      ]
    ];
DocGenGenerateHTMLDocumentation[
  p:{__PacletManager`Paclet},
  ops___?OptionQ
  ]:=
  DocGenGenerateHTMLDocumentation[#, ops]&/@p


DocGenGenerateHTMLDocumentation::ambig=
  "No unique symbol for pattern ``";


DocGenGenerateHTMLDocumentation[
  pattern:_String?(Not@*FileExistsQ)|_Symbol,
  ops___?OptionQ
  ]:=
  With[{n=Names[pattern]},
    If[Length@n!=1,
      Message[DocGenGenerateHTMLDocumentation::ambig,pattern];
      $Failed,
      With[
        {
          nb=
            First[{NotebookGet[#], NotebookClose[#]}]&@
              First@Flatten@List@
                GenerateSymbolPages[
                  Evaluate@First@n,
                  Evaluate@FilterRules[{ops},Options@GenerateSymbolPages],
                  Visible->False
                  ]
          },
          DocGenGenerateHTMLDocumentation[
            nb,
            ops
            ]
        ]
      ]
    ];


End[];



