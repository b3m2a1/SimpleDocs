(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Subsection:: *)
(*SVN*)



SVNRun::usage="Runs SVN";
SVNFileNames::usage="svn ls";
SVNCheckOut::usage="Uses SVN to clone from a server";
SVNExport::usage="Uses SVN to pull a single file from a server";
$SVNActions::usage=
	"Known actions for SVN";


Begin["`Private`"];


(* ::Subsection:: *)
(*SVN*)



(* ::Subsubsection::Closed:: *)
(*Run*)



Options[SVNRun]=
	Normal@Merge[{
		Options@processRunDupe,
		"TrustServer"->False
		},
		First
		];
SVNRun[cmd_,
	kwargs:(_Rule|_RuleDelayed|_String)...,
	repo_String,
	others:(_Rule|_RuleDelayed|_String)...,
	ops:OptionsPattern[]]:=
	processRunDupe[
		{
			"svn",
			cmd,
			kwargs,
			If[OptionValue@"TrustServer","--trust-server-cert",Nothing],
			If[FileExistsQ@repo,ExpandFileName@repo,repo],
			others
			},
		Evaluate[
			Sequence@@
			FilterRules[{ops},
					Options@processRunDupe
					]
			]
		];


(* ::Subsubsection::Closed:: *)
(*FileNames*)



Options[SVNFileNames]=
	Options@SVNRun;
SVNFileNames[repo_,ops:OptionsPattern[]]:=
	Replace[SVNRun["ls",repo,ops],
		fn_String:>
			With[{lines=StringSplit[fn,"\n"]},
				If[FileExistsQ@repo,
					FileNameJoin@{repo,#}&/@lines,
					URLBuild@{repo,#}&/@lines
					] 
				]
		];


(* ::Subsubsection::Closed:: *)
(*CheckOut*)



Options[SVNCheckOut]=
	Options@SVNRun;
SVNCheckOut[
	repo_,
	dir:_String|Automatic:Automatic,
	ops:OptionsPattern[]]:=
	With[{pulldir=
		Replace[dir,{
			s_String?(Not@*FileExistsQ):>
				(If[FileExtension@s=="",
					CreateDirectory@s
					];
					s),
			Automatic:>
				With[{d=FileNameJoin@{$TemporaryDirectory,FileNameTake@repo}},
					If[FileExtension@d=="",
						Quiet@DeleteDirectory[d,DeleteContents->True];
						CreateDirectory@d
						];
					d
					]
			}]},
	SVNRun["checkout",
		repo,
		ExpandFileName@pulldir,
		ops
		];
	pulldir
	]


(* ::Subsubsection::Closed:: *)
(*Export*)



Options[SVNExport]=
	Normal@Merge[{
		Options@SVNRun,
		OverwriteTarget->False
		},
		Last];
SVNExport[repo_,file:_String|Automatic:Automatic,ops:OptionsPattern[]]:=
	With[{f=
		Replace[file,{
				Automatic:>
					FileNameJoin@{$TemporaryDirectory,FileNameTake@repo}
				}]},
		If[OptionValue@OverwriteTarget,Quiet@DeleteFile@f];
		SVNRun["export",
			repo,
			ExpandFileName@f,
			FilterRules[{ops},Options@SVNRun]
			];
		f
		]


(* ::Subsubsection::Closed:: *)
(*SVN*)



$SVNActions=
	<|
		"FileNames"->
			SVNFileNames,
		"CheckOut"->
			SVNCheckOut,
		"Export"->
			SVNExport
		|>;


End[];



