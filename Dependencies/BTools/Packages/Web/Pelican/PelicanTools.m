(* ::Package:: *)

(* Autogenerated Package *)

PelicanNewFile::usage="";
PelicanNewSite::usage="";


PelicanBuild::usage="";
PelicanDeploy::usage="";


PelicanThemes::usage="";
PelicanNotebookToMarkdown::usage="Converts a notebook to markdown";
PelicanNotebookSave::usage="Saves a notebook as markdown";


Begin["`Private`"];


$PelicanRoot=
  FileNameJoin@{
    $WebTemplatingRoot,
    "pelican"
    };


PelicanSiteBase[f_String]:=
  Replace[FileNameSplit[f],{
    {d:Shortest[___],"content"|"output",___}:>FileNameJoin@{d},
    _:>f
    }]


PelicanContentPath[f_String]:=
  Replace[FileNameSplit[f],{
    {Shortest[___],"content",p___}:>FileNameJoin@{p},
    _:>f
    }]


PelicanOutputPath[f_String]:=
  Replace[FileNameSplit[f],{
    {Shortest[___],"output",p___}:>FileNameJoin@{p},
    _:>f
    }]


PelicanInitializedQ[]:=
  (
    $PyVenv;
    Length[
      FileNames[
        FileNameJoin@{$PyVenvRoot,"pelican","lib","*","site-packages","pelican"}
        ]
      ]>0
    )


PelicanInitialize[]:=
  PyVenvRun[
    "pelican",
    {"pip","install","pelican","Markdown","typogrify"},
    TimeConstraint->10,
    "PollTime"->1
    ]


$PelicanSitesDirectory=
  FileNameJoin@{
    $UserDocumentsDirectory,
    "Wolfram Mathematica",
    "WebPages",
    "pelican"
    };


$pelicanpublishconf=
"#!/usr/bin/env python
# -*- coding: utf-8 -*- #
from __future__ import unicode_literals

# This file is only used if you use `make publish` or
# explicitly specify it as your config file.

import os
import sys
sys.path.append(os.curdir)
from pelicanconf import *

SITEURL = '`URL`'
RELATIVE_URLS = `UseRelativeURLs`

FEED_ALL_ATOM = 'feeds/all.atom.xml'
CATEGORY_FEED_ATOM = 'feeds/%s.atom.xml'

DELETE_OUTPUT_DIRECTORY = True

# Following items are often useful when publishing

#DISQUS_SITENAME = \"\"
#GOOGLE_ANALYTICS = \"\"
";


$pelicanconf=
"#!/usr/bin/env python
# -*- coding: utf-8 -*- #
from __future__ import unicode_literals

AUTHOR = u'`Author`'
SITENAME = u'`Title`'
SITEURL = '`URL`'

PATH = 'content'
STATIC_PATHS = ['posts','img']

TIMEZONE = '`Timezone`'

DEFAULT_LANG = u'`Language`'

# Feed generation is usually not desired when developing
FEED_ALL_ATOM = None
CATEGORY_FEED_ATOM = None
TRANSLATION_FEED_ATOM = None
AUTHOR_FEED_ATOM = None
AUTHOR_FEED_RSS = None

# Enable Markdown
MARKDOWN = {
	`MarkdownExtensions`
	}

# Theme

THEME = '`Theme`'

# Blogroll
LINKS = `Links`

# Social widget
SOCIAL = `Social`

DEFAULT_PAGINATION = `PaginationNumber`

# Uncomment following line if you want document-relative URLs when developing
#RELATIVE_URLS = `UseRelativeURLs`";


pelicanAtomPrep[s_String]:=
  "'"<>s<>"'";
pelicanAtomPrep[e_]:=
  ToString[e];


pelicanDictPrep[k_->v_?AtomQ]:=
  k<>": "<>pelicanAtomPrep[v];
pelicanDictPrep[k_->e_]:=
  pelicanDictPrep[k,pelicanDictPrep[e]];
pelicanDictPrep[l_List?OptionQ]:=
  "{\n\t"<>
    StringRiffle[pelicanDictPrep/@l,",\n\t"]<>
    "\n\t}";
pelicanDictPrep[a_Association]:=
  pelicanDictPrep[Normal[a]];


pelicanSettingsPrep[ops_]:=
  Association@
    KeyValueMap[
      #->
        Switch[#,
          "Links"|"Social",
            StringReplace[
              "(``,)"~TemplateApply~
                StringRiffle[
                  Map[
                    TemplateApply[
                      "( '``', '``' )",
                      Take[Flatten@ConstantArray[List@@#,2],2]
                      ]&,
                    Replace[#2,a_?AtomQ:>{a,a},1]
                    ],
                  ","
                  ],
              "(,)"->"()"
              ],
          "MarkdownExtensions",
            pelicanDictPrep[If[!OptionQ[#2],{},#2]],
          _,
            #2
          ]&,
      Association[ops]
      ]


pelicanNewSiteTestingNB[assoc_]:=
  Notebook[{
    Cell[Lookup[assoc,"Title","Untitled"],"Section"],
    Cell[BoxData@RowBox@{"<<","BTools`"},"Input"],
    (*Settings*)
    Cell[
      CellGroupData[{
        Cell["Settings","Subsection"],
        Cell[
          CellGroupData[{
            Cell["Open Pelican Settings","Subsubsection"],
            Cell[
              BoxData@ToBoxes@
                Unevaluated[
                  SystemOpen@FileNameJoin@{NotebookDirectory[],"pelicanconf.py"}
                  ],
              "Input"
              ]
            }]
          ],
        Cell[
          CellGroupData[{
            Cell["Open Publish Settings","Subsubsection"],
            Cell[
              BoxData@ToBoxes@
                Unevaluated[
                  SystemOpen@FileNameJoin@{NotebookDirectory[],"publishconf.py"}
                  ],
              "Input"
              ]
            }]
          ]
        }]
      ],
    (*Openers*)
    Cell[
      CellGroupData[{
        Cell["Pages","Subsection"],
        Cell[
          CellGroupData[{
            Cell["List Pages","Subsubsection"],
            Cell[
              BoxData@ToBoxes@
                Unevaluated[
                  FileNames[
                    "*.md",
                    FileNameJoin@{NotebookDirectory[],"content"},
                    \[Infinity]
                    ]
                  ],
              "Input"
              ]
            }]
          ],
        Cell[
          CellGroupData[{
            Cell["Open Page","Subsubsection"],
            Cell[
              BoxData@ToBoxes@
                Unevaluated[
                  BTools`Formatting`Private`openPage[BTools`Formatting`Private`page_]:=
                    SystemOpen@
                      FileNameJoin@{
                        NotebookDirectory[],
                        "content",
                        BTools`Formatting`Private`page
                        }
                  ],
              "Input"
              ]
            }]
          ],
        Cell[
          CellGroupData[{
            Cell["New Page","Subsubsection"],
            Cell[
              BoxData@ToBoxes@
                Unevaluated[
                  PelicanNewFile[
                    BTools`Formatting`Private`name,
                    BTools`Formatting`Private`ops
                    ]
                  ],
              "Input"
              ]
            }]
          ]
        }]
      ],
    Cell[
      CellGroupData[{
        Cell["Images","Subsection"],
        Cell[
          CellGroupData[{
            Cell["List Images","Subsubsection"],
            Cell[
              BoxData@ToBoxes@
                Unevaluated[
                  FileNames[
                    "*.png"|"*.gif"|"*.jpg",
                    FileNameJoin@{NotebookDirectory[],"img"},
                    \[Infinity]
                    ]
                  ],
              "Input"
              ]
            }]
          ],
        Cell[
          CellGroupData[{
            Cell["Open Image","Subsubsection"],
            Cell[
              BoxData@ToBoxes@
                Unevaluated[
                  BTools`Formatting`Private`openImage[BTools`Formatting`Private`img_]:=
                    SystemOpen@
                      FileNameJoin@{
                        NotebookDirectory[],
                        "img",
                        BTools`Formatting`Private`img
                        }
                  ],
              "Input"
              ]
            }]
          ],
        Cell[
          CellGroupData[{
            Cell["Export Image","Subsubsection"],
            Cell[
              BoxData@ToBoxes@
                Unevaluated[
                  BTools`Formatting`Private`exportImage[
                    BTools`Formatting`Private`name_,
                    BTools`Formatting`Private`img_
                    ]:=
                    Export[
                      FileNameJoin@{
                        NotebookDirectory[],
                        "img",
                        If[FileExtension[BTools`Formatting`Private`name]=="",
                          BTools`Formatting`Private`name<>".png",
                          BTools`Formatting`Private`name
                          ]
                        },
                      BTools`Formatting`Private`img
                      ]
                  ],
              "Input"
              ]
            }]
          ]
        }]
      ],
    Cell[
      CellGroupData[{
        Cell["Build","Subsection"],
        Cell[
          CellGroupData[{
            Cell["Build Site","Subsubsection"],
            Cell[
              BoxData@ToBoxes@
                Unevaluated[
                  PelicanBuild[]
                  ],
              "Input"
              ]
            }]
          ],
        Cell[
          CellGroupData[{
            Cell["Open Site","Subsubsection"],
            Cell[
              BoxData@ToBoxes@
                Unevaluated[
                  PySimpleServerOpen[
                    FileNameJoin@{NotebookDirectory[],"output"}
                    ]
                  ],
              "Input"
              ]
            }]
          ],
        Cell[
          CellGroupData[{
            Cell["Deploy Site","Subsubsection"],
            Cell[
              BoxData@ToBoxes@
                Unevaluated[
                  PelicanDeploy[]
                  ],
              "Input"
              ]
            }]
          ]
        }]
      ]
    },
    CellContext->Notebook
    ]


Options[PelicanNewSite]=
  {
    "Title"->"",
    "Author"->"",
    "URL"->"",
    "Timezone":>LocalTimeZone[Here,Today,"InternetName"],
    "PaginationNumber"->10,
    "UseRelativeURLs"->True,
    "Language":>ToLowerCase@StringTake[$Language,2],
    "PagesFolder"->True,
    "Links"->{},
    "Social"->{},
    "Theme"->"simple",
    "MarkdownExtensions"->{}
    };
PelicanNewSite[
  contentDir:_String?DirectoryQ,
  open:True|False:True,
  ops:OptionsPattern[]
  ]:=
  With[{op=
    pelicanSettingsPrep@
      Join[
        Options[PelicanNewSite],
        {
          ops
          }
        ]
    },
    If[open,
      #["Notebook"]//SystemOpen,
      #
      ]&@
    <|
      "BuildSettings"->
        Export[FileNameJoin@{contentDir,"pelicanconf.py"},
          TemplateApply[
            $pelicanconf,
            op
            ],
          "Text"
          ],
      "PublishSettings"->
        Export[FileNameJoin@{contentDir,"publishconf.py"},
          TemplateApply[
            $pelicanpublishconf,
            op
            ],
          "Text"
          ],
      "ContentDirectory"->
        (
          If[!DirectoryQ@FileNameJoin@{contentDir,"content"},
            CreateDirectory[FileNameJoin@{contentDir,"content"}]
            ];
          FileNameJoin@{contentDir,"content"}
          ),
      If[OptionValue["PagesFolder"]//TrueQ,
        "PagesDirectory"->
          (
            If[!DirectoryQ@FileNameJoin@{contentDir,"content","pages"},
              CreateDirectory[FileNameJoin@{contentDir,"content","pages"}]
              ];
            FileNameJoin@{contentDir,"content","pages"}
            ),
        Nothing
        ],
      "OutputDirectory"->
        (
          If[!DirectoryQ@FileNameJoin@{contentDir,"output"},
            CreateDirectory[FileNameJoin@{contentDir,"output"}]
            ];
          FileNameJoin@{contentDir,"output"}
          ),
      "Notebook"->
        Export[
          FileNameJoin@{contentDir,"edit.nb"},
          Block[{$Context="BTools`Formatting`Private`"},
            pelicanNewSiteTestingNB[op]
            ]
          ]
      |>
    ];
PelicanNewSite[
  s_String,
  open:True|False:True,
  ops:OptionsPattern[]
  ]:=
  PelicanNewSite[
    If[!DirectoryQ[#],
      CreateDirectory[#,CreateIntermediateDirectories->True],
      #
      ]&@FileNameJoin@{$PelicanSitesDirectory,s},
    open,
    ops
    ];


$PelicanSiteSettingsBoundary="\" ----!!!!----!!!!-----!!!!----- \"";


PelicanSiteSettings[
  site_String?DirectoryQ,
  settings:(_String|{__String}|All):All
  ]:=
  Replace[
    SetDirectory[site];
    (ResetDirectory[];#)&@
      PyVenvRun["pelican",
        {
          "python",
          "-c",
          "'"<>(
            StringRiffle[{
              "from __future__ import print_function",
              "from pelicanconf import *",
              "glob = locals()",
              "print(0, end=`boundary`)",
              If[settings === All,
                "[ print(\"-\",\"\\\"\"+s+\"\\\"\",\"->\",\"\\\"\",glob[s],\"\\\"\",\"-\", end=`boundary`, sep=\"\") if s not in (\"glob\", \"unicode_literals\", \"print_function\", \"__name__\", \"__builtins__\") else None for s in glob.keys() ]",
                "[ print(\"-\",glob[s],\"-\", end=`boundary`, sep=\"\") if s in glob else print(\"$Failed\",end=`boundary`) for s in `settings` ]"
                ],
              "print(0, end=`boundary`)"
              },
              "; "
              ]~TemplateApply~<|
                "boundary"->
                  $PelicanSiteSettingsBoundary,
                "settings"->
                  If[settings===All,
                    "",
                    "["<>StringRiffle["\""<>#<>"\""&/@Flatten@{settings},", "]<>"]"
                    ]
                |>
            )<>"'"
        }
        ],
    a_Association:>
      If[settings === All,
        Association@
          ToExpression@
            StringTrim[
              Most@Rest@
                StringSplit[
                  a["StandardOutput"],
                  StringTrim[$PelicanSiteSettingsBoundary,"\""]
                  ],
              "-"
              ],
        AssociationThread[
          settings,
          StringTrim[
            Most@Rest@
              StringSplit[
                a["StandardOutput"],
                StringTrim[$PelicanSiteSettingsBoundary,"\""]
                ],
            "- "|" -"
            ]
          ]
        ]
    ]
PelicanSiteSettings[s_String]:=
  If[DirectoryQ[FileNameJoin@{$PelicanRoot,s}],
    PelicanSiteSettings[FileNameJoin@{$PelicanRoot,s},settings],
    $Failed
    ]


Options[PelicanNewFile]=
  {
    "Title"->Automatic,
    "Date":>Now,
    "Modified":>Now,
    "Category"->None,
    "Tags"->{},
    "Slug"->Automatic,
    "Authors"->{},
    "Summary"->None,
    "Status"->None,
    "Body"->"",
    "Folder"->"posts",
    "Notebook"->True
    };
PelicanNewFile[
  site:(_String?DirectoryQ|Automatic):Automatic,
  name_String,
  open:True|False:True,
  ops:OptionsPattern[]
  ]:=
  With[{siteDir=Replace[site,Automatic:>NotebookDirectory[]]},
    If[!DirectoryQ@
      FileNameJoin@{
        siteDir,
        "content",
        Replace[OptionValue["Folder"],
          Except[_String]->Nothing
          ]
        },
      CreateDirectory[
        FileNameJoin@{
          siteDir,
          "content",
          Replace[OptionValue["Folder"],
            Except[_String]->Nothing
            ]
          },
        CreateIntermediateDirectories->True
        ]
      ];
    If[OptionValue["Notebook"]//TrueQ,
      If[open,SystemOpen,Identity]@
        Export[
          FileNameJoin@{
            siteDir,
            "content",
            Replace[OptionValue["Folder"],
              Except[_String]->Nothing
              ],
            name<>".nb"
            },
          Notebook[
            {
              Cell[
                BoxData@ToBoxes@
                  DeleteCases[None]@
                    KeyDrop[
                      Association@
                        Join[
                          Options[PelicanNewFile],
                          {
                            ops
                            }
                          ],
                      {"Body","Folder","Notebook"}
                      ],
                "Metadata"
                ],
              Cell[
                Lookup[{ops},"Body",""],
                "Text"
                ]
              },
            StyleDefinitions->
              FrontEnd`FileName[
                Evaluate@{$PackageName},
                "PelicanMarkdown.nb"
                ]
            ]
          ],
    If[open,SystemOpen,Identity]@
      Export[
        FileNameJoin@{siteDir,
          "content",
          Replace[OptionValue["Folder"],
            Except[_String]->Nothing
            ],
          name<>".md"},
        StringTrim@
          TemplateApply[
            $markdownnewmdfiletemplate,
            <|
              "headers"->
                markdownMetadataFormat[
                  name,
                  DeleteCases[None]@
                    KeyDrop[
                      Association@
                        Join[
                          Options[PelicanNewFile],
                          {
                            ops
                            }
                          ],
                      {"Body","Folder","Notebook"}
                      ]
                  ],
              "body"->OptionValue["Body"]
              |>
            ],
        "Text"
        ]
      ]
    ]


PelicanBuild[f_String?(FileExistsQ[#]&&MemberQ[FileNameSplit[#],"content"]&)]:=
  With[{path=Reverse@FileNameSplit[f]},
    PelicanBuild[
      FileNameJoin@Reverse@Flatten@#[[3;;]],
      FileNameJoin@Reverse@#[[1]]
      ]&@SplitBy[path,MatchQ["content"]]
    ];
PelicanBuild[
  site:(_String?DirectoryQ|Automatic):Automatic,
  file:_String?(Not@*FileExistsQ)|All:All
  ]:=
  With[{
    startedRunning=
      MatchQ[
        $PyVenv["Environment"],
        _String?(StringEndsQ["pelican"])
        ],
    siteDir=Replace[site,Automatic:>NotebookDirectory[]]
    },
    If[!PelicanInitializedQ[],PelicanInitialize[]];
    If[!startedRunning,PyVenvStart["pelican"]];
    PyVenvRun["pelican",
      {"cd",File@ExpandFileName[siteDir]}
      ];
    SetDirectory[siteDir];
    (ResetDirectory[];If[!startedRunning,PyVenvKill[]];#)&@
      If[file===All,
        PyVenvRun["pelican",
          "pelican",
          TimeConstraint->10
          ],
        PyVenvRun["pelican",
          {"pelican","--write-selected",File[FileNameJoin@{"output",file}]},
          TimeConstraint->10
          ]
        ]
    ];


PelicanDeploy[
  file:(_String?(FileExistsQ@#&&Not@DirectoryQ@#&)),
  uri:_String|Automatic:Automatic,
  ops:OptionsPattern[]
  ]:=
  PelicanDeploy[
    PelicanSiteBase[file],
    FileNameForms->
      FileNameJoin@{"output",PelicanOutputPath[file]},
    ops
    ]


Options[PelicanDeploy]=
  Options[WebSiteDeploy];
PelicanDeploy[
  site:(_String?DirectoryQ|Automatic),
  uri:_String|Automatic:Automatic,
  ops:OptionsPattern[]
  ]:=
  With[{
    outDir=
      PelicanSiteBase[Replace[site,Automatic:>NotebookDirectory[]]]
    },
    (*With[{
			info=
				If[FileExistsQ[FileNameJoin@{outDir,"DeploymentInfo.m"}],
					Import[FileNameJoin@{outDir,"DeploymentInfo.m"}],
					{}
					]
			},
			Export[FileNameJoin@{outDir,"DeploymentInfo.m"},
				KeyDrop[
					Association@
						Flatten@{
							Normal@info,
							ops,
							"LastDeployment"\[Rule]Now
							},
					FileNameForms
					]
				];*)
      WebSiteDeploy[
        FileNameJoin@{outDir,"output"},
        Replace[uri,Automatic:>FileBaseName[outDir]],(*
				Flatten@{*)
          ops(*,
					Normal@info
					}
				]*)
      ]
    ];
PelicanDeploy[
  s_String?(Not@*DirectoryQ),
  uri:_String|Automatic:Automatic,
  ops:OptionsPattern[]
  ]:=
  If[DirectoryQ@FileNameJoin@{$PelicanRoot,s,"output"},
    PelicanDeploy[
      FileNameJoin@{$PelicanRoot,s},
      uri,
      ops
      ],
    $Failed
    ]


PelicanThemes[Optional["List","List"],verbose:True|False:False]:=
  If[verbose,
    AssociationThread[
      FileBaseName/@#,
      #
      ]&,
    Identity
    ]@
    StringSplit[
      Lookup[
        PyVenvRun["pelican",
          {"pelican-themes","-l",If[verbose,"-v",Nothing]}
          ],
        "StandardOutput",
        ""
        ],
      "\n"
      ];


PelicanThemes["Install",f_String?FileExistsQ]:=
  PyVenvRun["pelican",
    {"pelican-themes","--install",f}
    ];
PelicanThemes["Install",f_String]:=
  With[{u=
    If[GitHubRepoQ[f],
      GitHub["Clone",f,
        FileNameJoin@{$TemporaryDirectory,StringTrim[URLParse[f,"Path"][[-1]],"pelican-"]}
        ],
      If[FileExtension[#]==="zip",
        First@
          MinimalBy[Select[ExtractArchive[#],DirectoryQ],FileNameDepth],
        #
        ]&@
        URLDownload[f,StringTrim[URLParse[f,"Path"][[-1]],"pelican-"]]
      ]
    },
    PelicanThemes["Install",u]
    ]


PelicanOpenTheme[s_String]:=
  Replace[PelicanSiteSettings[s],
    a_Association:>
      SystemOpen@
        Lookup[
          PelicanThemes[True],
          StringTrim[Lookup[a,"THEME"],"'"|"\""]
          ]
    ]


PelicanNotebookToMarkdown[a___]:=
  Block[{
    $MarkdownSiteRoot=
      $PelicanRoot
    },
    NotebookToMarkdown[a]
    ]


PelicanNotebookSave[e___]:=
  Block[{
    $MarkdownSiteRoot=
      $PelicanRoot
    },
    NotebookMarkdownSave[e]
    ]


End[];



