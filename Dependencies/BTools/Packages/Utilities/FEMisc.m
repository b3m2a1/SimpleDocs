(* ::Package:: *)

(* Autogenerated Package *)

(* ::Subsubsection::Closed:: *)
(*Tokens / Packets / Values/Resources*)



$FETokenList::usage="The loaded lists of FETokens";
RefreshFETokens::usage="Loads the current FETokens";
FETokens::usage="The FE tokens matching a pattern";
FETokenBrowser::usage="A formatter on FETokens";


$FEPacketList::usage="The list of FE packets";
FEPackets::usage="The FE packets matching a pattern";
FEPacketBrowser::"A formatter on FEPackets";
FEPacketExecute::usage="Analagous to FrontEndTokenExecute";


$FEValueList::usage=
  "The list of things known by CurrentValue";
FEValues::usage=
  "The FE values matching a pattern";
FEValueBrowser::usage=
  "The FE values matching a pattern";


$FrontEndDirectory::usage=
  "The root internal front end directory";


$FEResourceGroups::usage="The resource sets I know about";
FEResourceKeys::usage=
  "Extracts keys from resource file";
FEResourceFind::usage=
  "Tries to find resources by that name in the known resources sets";
FEResourceGroup::usage=
  "Goes from a resource name to the groups that include it";
FEResourceBrowse::usage="Browses front end resources found by FEResourceFind";
FEFormatResource::usage="Applies standard formatting rules to a resource";


(* ::Subsubsection::Closed:: *)
(*Files*)



FEImport::usage=
  "Attempts to generalize the FE import process";
FEToFileName::usage=
  "Attemps to resolve a file name using FrontEndFiles and InternalFiles";


InternalFiles::usage=
  "Gets internal files matching a pattern";
InternalSystemFiles::usage=
  "Finds SystemFiles that match a pattern";
InternalDocumentationFiles::usage=
  "Finds documentations files";
FrontEndFiles::usage="Tries to find a front end file by a name pattern";
FrontEndFile::usage="Legacy binding to FrontEndFiles";


FrontEndImageFiles::usage="Selects images from FrontEndFiles";
FrontEndImage::usage="Uses FrontEndFile to find image files";
FrontEndImageBrowser::usage="Opens a browser to all the possible FrontEndImages";


FrontEndBlobIcon::usage=
  "Pulls the blob icon for an expression (if it has one)";


(* ::Subsubsection::Closed:: *)
(*Chars*)



FEUnicodeCharBrowser::usage=
  "A little unicode character browser";


(* ::Subsubsection::Closed:: *)
(*FindFileOnPath*)



FEFindFileOnPath::usage=
  "Safe version of FrontEnd`FindFileOnPath"


(* ::Subsubsection::Closed:: *)
(*UserBaseFile*)



FEUserBaseFile::usage=
  "Locates or copies a system file in $UserBaseDirectory";


Begin["`Private`"];


(* ::Subsubsection::Closed:: *)
(*FETokens/FEPackets*)



{
{
{$FESettings,$FESeeminglyRandom,
$FEDataForms,$FEPacketList},
{$FEBoxForms,$FEInterfaceStuff}
},
$FEData
}=FrontEndExecute@FrontEnd`NeedCurrentFrontEndSymbolsPacket[];
$knownUselessPackets={"","Null"};
FEPackets[pat_:""]:=
  DeleteCases[
    DeleteDuplicates@
      Sort@
        Select[$FEPacketList,StringMatchQ[___~~pat~~___]],
    Alternatives@@$knownUselessPackets
    ];


FEPacketBrowser[pat:_String:"",ops___]:=
  Interpretation[
    DynamicModule[{packetArgs=RowBox@{"EvaluationNotebook","[","]"}},
      Column@{
        PaneColumn[
          Button[
            Mouseover[
                Style[#,"Input",FontWeight->Plain],
                  Style[#,Purple,"Input",FontWeight->"DemiBold"]
                ],
            Replace[
              FrontEndExecute@
                Block[{$Context="FrontEnd`"},
                  ToExpression[#][
                    Sequence@@Flatten[ToExpression@RowBox@{"{",packetArgs,"}"},1]
                    ]
                  ],
              r:Except[Null]:>(
                If[CurrentValue[NextCell@EvaluationCell[],GeneratedCell],
                  NotebookDelete@NextCell@EvaluationCell[]
                  ];
                  Print[r]
                  )
              ];
            Method->"Queued",
            Appearance->"Frameless",
            ImageSize->250,
            Alignment->Left]&/@FEPackets[pat],
          ops
          ],
        Style[
          EventHandler[
            InputField[Dynamic[packetArgs],Boxes,
              ImageSize->250],
            {
              "ReturnKeyDown":>
                NotebookWrite[EvaluationNotebook[],"\\"<>"[IndentingNewLine]"],
              {"MenuCommand","HandleShiftReturn"}:>
                Flatten[ToExpression@RowBox@{"{",cellBoxes,"}"},1]
              }
            ],
          "Input"
          ]
        }//Deploy
    ],
  FEPacketSymbol[FEPackets[pat]]
  ];
FEPacketSymbol[p:_String|{__String}]:=
  Block[{$Context="FrontEnd`"},ToExpression@p];
FEPacketExecute[
  packet:_Symbol|_String,
  obj:
    _NotebookObject|_CellObject|_BoxObject|_FrontEndObject|
    $FrontEnd|$FrontEndSession|None:$FrontEndSession,
  args___]:=
  With[{psym=If[MatchQ[packet,_String],FEPacketSymbol@packet,packet]},
    FrontEndExecute@
      If[obj===None,
        psym[args],
        psym[obj,args]
        ]
      ];


PackageAddAutocompletions[
  FEPacketExecute,
  {
    FEPackets[]  
    }
  ]


$feTokenCache=
  Get@PackageFilePath["Resources", "Data", "FrontEnd", "Tokens.wl"];
$FETokenList:=(
  Replace[$feTokenCache,
    Except[_List]:>RefreshFETokens[]
    ];
  $feTokenCache);
RefreshFETokens[]:=
  ($feTokenCache=
    DeleteDuplicates@
      StringCases[
        Import@
          URLRead["http://mathematica.stackexchange.com/questions/2572"],
  s:("\""~~Shortest[Except[WhitespaceCharacter]..]~~"\""):>StringTrim[s,"\""]]);
FETokens[pat_:""]:=
Cases[$FETokenList,
_?(StringMatchQ[#,___~~pat~~___]&)
];


FETokenBrowser[pat:_String:"",ops___]:=
  PaneColumn[
    Button[
      Mouseover[
        Style[#,"Input",FontWeight->Plain],
          Style[#,Purple,"Input",FontWeight->"DemiBold"]
        ],
      Replace[
        FrontEndTokenExecute[EvaluationNotebook[],#],
        r:Except[Null]:>(
          If[CurrentValue[NextCell@EvaluationCell[],GeneratedCell],
            NotebookDelete@NextCell@EvaluationCell[]
            ];
            Print[r]
            )
        ];
      Method->"Queued",
      Appearance->"Frameless",
      ImageSize->250,
      Alignment->Left]&/@FETokens[pat],
    ops
    ]//Deploy;





(* ::Subsubsection::Closed:: *)
(*CurrentValues*)



$FEValueList:=
  $FEValueList=
    Get@PackageFilePath["Resources", "Data", "FrontEnd", "Values.wl"];


FEValues[pat_:""]:=
  DeleteDuplicates@
    Sort@
      Select[$FEValueList,StringMatchQ[___~~pat~~___]];
FEValueBrowser[pat:_String:"",ops___]:=
  DynamicModule[{packetArgs=RowBox@{""}},
    Column@{
      PaneColumn[
        Button[
          Mouseover[
              Style[#,"Input",FontWeight->Plain],
                Style[#,Purple,"Input",FontWeight->"DemiBold"]
              ],
          Replace[
            CurrentValue@@
              Append[
                Sequence@@Flatten[
                  ToExpression@RowBox@{"{",packetArgs,"}"},
                  1],
                #
                ],
            r:Except[Null|$Failed]:>(
              If[CurrentValue[NextCell@EvaluationCell[],GeneratedCell],
                NotebookDelete@NextCell@EvaluationCell[]
                ];
                Print[r]
                )
            ];
          Method->"Queued",
          Appearance->"Frameless",
          ImageSize->250,
          Alignment->Left]&/@FEValues[pat],
        ops
        ],
      Style[
        EventHandler[
          InputField[Dynamic[packetArgs],Boxes,
            ImageSize->250],
          {
            "ReturnKeyDown":>
              NotebookWrite[EvaluationNotebook[],"\\"<>"[IndentingNewLine]"],
            {"MenuCommand","HandleShiftReturn"}:>
              Flatten[ToExpression@RowBox@{"{",packetArgs,"}"},1]
            }
          ],
        "Input"
        ]
      }//Deploy
  ];


(* ::Subsubsection::Closed:: *)
(*FEResources*)



(* ::Subsubsubsection::Closed:: *)
(*ExtractKeys*)



FEResourceKeys[tr_String?FileExistsQ]:=
  StringCases[Import[tr, "Text"],
    Shortest[StartOfLine~~"@@resource"~~r__~~EndOfLine]:>
    Replace[StringSplit[StringTrim[r]], {l_}:>l]
    ];


FEResourceKeys[s_String]:=
  With[
    {
      r=
        FEResourceKeys@
          FEFindFileOnPath[s, "TextResource"]
      },
    r/;ListQ@r
    ]


(* ::Subsubsubsection::Closed:: *)
(*Complete*)



$FEResourceCompleteListing:=
  $FEResourceCompleteListing=
    Get@
      PackageFilePath["Resources", 
        "Data", "FrontEnd", "Resources.wl"];


(* ::Subsubsubsection::Closed:: *)
(*Rules*)



$FEResourceRuleListing:=
  $FEResourceRuleListing=
    Get@
      PackageFilePath["Resources", 
        "Data", "FrontEnd", "ResourceRules.wl"];


(* ::Subsubsubsection::Closed:: *)
(*Strings*)



$FEResourceStringListing:=
  $FEResourceStringListing=
    Get@
      PackageFilePath["Resources", 
        "Data", "FrontEnd", "ResourceStrings.wl"];


(* ::Subsubsubsection::Closed:: *)
(*$FEResourceGroups*)



$FEResourceGroups:=
  $FEResourceGroups=
    Select[
      $FEResourceRuleListing,
      StringContainsQ["Expressions"|"Bitmaps"]
      ];


(* ::Subsubsubsection::Closed:: *)
(*Browser*)



FEResourceFind[resources:{__Rule},resourceChunk_]:=
  Select[resources,
    StringMatchQ[ToString@First@#, ___~~resourceChunk~~___]&
    ];
FEResourceFind[feList:{__String}, resourceChunk_]:=
FEResourceFind[
    Join@@(
      Replace[FrontEndResource[#],
        e:Except[_List]:>{#->e}]&/@feList),
    resourceChunk];
FEResourceFind[fe_String, resourceChunk_]:=
  FEResourceFind[{fe}, resourceChunk];
FEResourceFind[resourceSet_List]:=
  FEResourceFind[resourceSet, "*"];
FEResourceFind[Automatic,resourceChunk_]:=
  FEResourceFind[$FEResourceGroups, resourceChunk];
FEResourceFind[All,resourceChunk_]:=
  FEResourceFind[$FEResourceRuleListing, resourceChunk];
FEResourceFind[Full,resourceChunk_]:=
  FEResourceFind[$FEResourceCompleteListing, resourceChunk];
FEResourceFind[resourceChunk:Except[_List]]:=
  If[MemberQ[$FEResourceGroups,resourceChunk],
    FEResourceFind[resourceChunk,"*"],
    FEResourceFind[$FEResourceGroups,resourceChunk]
    ];


FEResourceGroup[g_]:=
  Replace[
    Select[$FEResourceGroups, MemberQ[First/@FrontEndResource[#], g]&],
    {}:>Select[$FEResourceRuleListing, MemberQ[First/@FrontEndResource[#],g]&]
    ];


FEFormatResource//Clear;
FEFormatResource[s_String]:=s;
FEFormatResource[r_Function]:=Mouseover["Function",r];
FEFormatResource[r:Except[_String]?BoxQ]:=
  RawBoxes@r;
FEFormatResource[f_String?FileExistsQ]:=
  Import[f];
FEFormatResource[FEImport[f_]]:=
  f;
FEFormatResource[n_->r_]:=n->FEFormatResource[r];
FEFormatResource[e:Except[_List|_String]]:=
  Quiet@
    Replace[
      ToExpression@e,
      $Failed:>
        Check[FEFormatResource@FEImport[e],e]
      ];
FEFormatResource~SetAttributes~Listable


Options[FEResourceBrowse]=
  {
    Format->Automatic,
    "ReturnGroup"->False
    };
FEResourceBrowse[
  rList:_?StringPattern`StringPatternQ|All|None|Automatic:None,
  pat:_?StringPattern`StringPatternQ,
  ops:OptionsPattern[]]:=
  With[
    {
      formatFunction=
        Replace[
          OptionValue[Format],
          {
            Automatic:>
              (Replace[FEFormatResource@#, $Failed:>#]&),
            None->Identity
            }
          ],
      resRaw=
        If[rList=!=None,
          FEResourceFind[rList, pat],
          FEResourceFind[pat]
          ],
      retG=TrueQ@OptionValue["ReturnGroup"]
      },
    With[
      {
        res=
          If[retG,
            Thread[
              Thread[{FEResourceGroup/@resRaw[[All, 1]], resRaw[[All, 1]]}]->
              resRaw[[All, 2]]
              ],
            resRaw
            ]
        },
      Interpretation[
        PaneColumn[
          Table[
            With[{r=r},
              Interpretation[
                Button[
                  Tooltip[formatFunction@Last@r, First@r],
                  Print@(First@r->formatFunction@Last@r),
                  Appearance->"Frameless"
                  ],
                First@r
                ]
              ],
            {r, res}
            ]
          ],
        res[[All, 1]]
        ]
      ]
    ];
FEResourceBrowse[
  s:Except[_Rule|_RuleDelayed],
  ops:OptionsPattern[]
  ]:=
  FEResourceBrowse[None,s,ops];


ButtonAppearanceBrowser[pat_]:=
  FEResourceBrowse["Appearance"]/.
    Tooltip[a_,l_]:>
      Button[l,Appearance->Replace[a,s_Symbol:>ToString[s],1]]


(* ::Subsubsection::Closed:: *)
(*FileOnPath*)



$FEPathMap=
  Thread/@
    {
      {"StyleSheets","StyleSheet","StyleSheetPath"}->
        "StyleSheetPath",
      {"Palettes","Palette","PalettePath"}->
        "PalettePath",
      {"TextResources","TextResource",
        "PrivatePathsTextResources"}->
        "PrivatePathsTextResources",
      {"SystemResources","SystemResource",
        "PrivatePathsSystemResources"}->
        "PrivatePathsSystemResources",
        {"AFM","PrivatePathsAFM"}->"PrivatePathsAFM",
      {
        "AutoCompletionData",
        "PrivatePathsAutoCompletionData"
        }->
          "PrivatePathsAutoCompletionData",
      {"Bitmaps","Bitmap","PrivatePathsBitmaps"}->
        "PrivatePathsBitmaps",
      {"Fonts","Font","PrivatePathsFonts"}->
        "PrivatePathsFonts",
      {"TranslationData","PrivatePathsTranslationData"}->
        "PrivatePathsTranslationData",
      "AddOnHelp"->"AddOnHelpPath",
      "Autoload"->"AutoloadPath",
      {"CharacterEncoding","CharacterEncodings"}->
        "CharacterEncodingsPath",
      "Configuration"->"ConfigurationPath",
      {"Converter","Converters"}->"ConvertersPath",
      "Notebook"->"NotebookPath",
      "Preferences"->"PreferencesPath",
      "SpellingDictionaries"->"SpellingDictionariesPath",
      "SystemHelp"->"SystemHelpPath",
      {"Trusted","TrustedPath"}->
        "NotebookSecurityOptionsTrustedPath",
      {"Untrusted","UntrustedPath"}->
        "NotebookSecurityOptionsUntrustedPath"
      }//Flatten//Association;


FEFindFileOnPath//Clear


Options[FEFindFileOnPath]=
  {
    "ReturnPath"->False,
    "SelectFirst"->True
    };
Options[iFEFindFileOnPath]=
  Options@FEFindFileOnPath;
iFEFindFileOnPath[
  file_,
  path:{__String?(KeyMemberQ[$FEPathMap,#]&)},
  ops:OptionsPattern[]
  ]:=
  Replace[{
    {_,{}}->$Failed,
    {_,{e_}}:>
      If[OptionValue@"SelectFirst"//TrueQ,
        First@e,
        e
        ]
    }]@
  Reap@
    Catch@
      Map[
        Replace[
          FrontEndExecute@
            FrontEnd`FindFileOnPath[
              Switch[file,
                _FileName|_FrontEnd`FileName,
                  ToFileName[file],
                _List,
                  FileNameJoin@file,
                _File,
                  First[file],
                _String,
                  file,
                _,
                  Throw@$Failed
                ],
              #
              ],
          s:Except[$Failed]:>
            CompoundExpression[
              Sow@
                If[OptionValue@"ReturnPath"//TrueQ,
                  #->s,
                  s
                  ],
              If[OptionValue@"SelectFirst",Throw[Break]]
              ]
          ]&,
        Flatten@Lookup[$FEPathMap,path]
        ];
FEFindFileOnPath[
  file_,
  path:{__String?(KeyMemberQ[$FEPathMap,#]&)},
  exts:
    {__String?(StringLength[#]<6&&StringMatchQ[#, WordCharacter..]&)}:
    {"nb", "tr", "m"},
  ops:OptionsPattern[]
  ]:=
  Replace[iFEFindFileOnPath[file, path, ops],
    $Failed:>
      Replace[Null->$Failed]@
        Catch@
          Scan[
            Replace[e:Except[$Failed]:>Throw[e]]@
              iFEFindFileOnPath[file<>"."<>#, path, ops]&,
            exts
            ]
    ];
FEFindFileOnPath[file_,
  path:_String|Automatic:Automatic,
  exts:
    {__String?(StringLength[#]<6&&StringMatchQ[#, WordCharacter..]&)}:
    {"nb", "tr", "m"},
  ops:OptionsPattern[]
  ]:=
  FEFindFileOnPath[
    file,
    Replace[path, 
      {
        Automatic:>Keys@DeleteDuplicates@$FEPathMap,
        s_String:>{s}
        }
      ],
    exts,
    ops
    ];


(*$FEPathMapSpecial=
	<|
		"ImportFormat"->
			Function[{
				FileNameJoin@{"SystemFiles",#,"Import.m"}
		|>;*)


(*FEFindFileOnPath[
	file_,
	"Format"
	]*)


PackageAddAutocompletions[
  "FEFindFileOnPath",
  {
    {
      "MenuSetup.tr",
      "KeyEventTranslations.tr"
      },
    StringTrim[
      StringTrim[
        DeleteDuplicates@Values@$FEPathMap,
        "PrivatePaths"|"Path"|"NotebookSecurityOptions"
        ],
      "s"
      ]}
  ];


(* ::Subsubsection::Closed:: *)
(*InternalFiles*)



InternalFiles[namePattern_,directoryExtensions___String,depth:_Integer|\[Infinity]:\[Infinity]]:=
  FileNames[namePattern,
    FileNameJoin@{
      $InstallationDirectory,
      directoryExtensions
      },
    depth];
InternalDocumentationFiles[namePattern_,args___]:=
  InternalFiles[namePattern, "Documentation",args];
InternalSystemFiles[namePattern_,args___]:=
  InternalFiles[namePattern, "SystemFiles",args];


(* ::Subsubsection::Closed:: *)
(*FrontEndFiles*)



$FrontEndDirectory=
  FileNameJoin@{
    $InstallationDirectory,
    "SystemFiles",
    "FrontEnd"
    };


FrontEndFile=FrontEndFiles;


$FEPathMap2=
  Map[
    Which[
      StringStartsQ[#, "PrivatePaths"],
        StringTrim[#, "PrivatePaths"],
      StringContainsQ[#, "Options"],
        {#[[1]]<>"Options", #[[2]]}&@
          StringSplit[#, "Options"],
      NameQ["System`"<>#],
        ToExpression[#],
      True,
        #
      ]&,
    $FEPathMap
    ]


$FEMap2BaseKeys=
  Flatten[
    Intersection[Keys[$FEPathMap2], #]&/@
      {
        StringTrim[
          DeleteDuplicates@Values@$FEPathMap,
          "PrivatePaths"|"Path"|"NotebookSecurityOptions"
          ],
        StringTrim[
          DeleteDuplicates@Values@$FEPathMap,
          "PrivatePaths"|"Path"|"NotebookSecurityOptions"
          ]~StringTrim~"s",
        StringTrim[
          DeleteDuplicates@Values@$FEPathMap,
          "PrivatePaths"|"Path"|"NotebookSecurityOptions"
          ]//Map[#<>"s"&]
        }
    ]//DeleteDuplicatesBy[#, StringTrim[#, "s"]&]&


FrontEndFiles//Clear


FrontEndFiles[
  namePattern_,
  path:{___String?(KeyExistsQ[$FEPathMap2, #]&)}, 
  n:_Integer?Positive|Infinity:1,
  ops:OptionsPattern[FileNames]
  ]:=
  With[{p=Flatten@Lookup[$FEPathMap2, path]},
    FileNames[namePattern, 
      Replace[
        Which[
          StringQ@#,
            Replace[
              AbsoluteCurrentValue[$FrontEndSession, {PrivatePaths, #}],
              f:$Failed:>
                AbsoluteCurrentValue[$FrontEndSession, #]
              ],
          MatchQ[#, _Symbol|_List],
            AbsoluteCurrentValue[$FrontEndSession, #],
          True,
            #
          ]&/@p//Flatten,
        {
          f_FrontEnd`FileName:>ToFileName[f],
          Except[_String]->Nothing
          },
        1
        ],
      n,
      ops
      ]
    ];


FrontEndFiles[
  namePattern_,
  path:_String?(KeyExistsQ[$FEPathMap2, #]&), 
  n:_Integer?Positive|Infinity:1,
  ops:OptionsPattern[FileNames]
  ]:=
  FrontEndFiles[
    namePattern,
    {path},
    n,
    ops
    ];


FrontEndFiles[
  namePattern_,
  path:Automatic:Automatic,
  n:_Integer?Positive|Infinity:1,
  ops:OptionsPattern[FileNames]
  ]:=
  FrontEndFiles[
    namePattern,
    $FEMap2BaseKeys,
    n,
    ops
    ]


(*FrontEndFiles[namePattern_, args___]:=
	InternalSystemFiles[namePattern,"FrontEnd",args];*)


PackageAddAutocompletions[
  "FrontEndFiles",
  {
    None,
    $FEMap2BaseKeys
    }
  ];


(* ::Subsubsection::Closed:: *)
(*FrontEndImage*)



FrontEndImageFiles[files_List]:=
  Select[files,feImageQ];
FrontEndImageFiles[pattern_,
  specs___String,
  function:
    InternalFiles|
    InternalSystemFiles|
    FrontEndFiles:
    FrontEndFiles
    ]:=
  FrontEndImageFiles@function[pattern,specs];


FrontEndImage[name_,which_:First]:=
With[{files=Select[FrontEndFiles[name],feImageQ]},
Switch[which,
All,Thread[files->(Import/@files)],
_Symbol,Thread[which@files->(Import@which@files)],
_,Replace[Thread[Flatten@{files[[which]]}->(Import/@Flatten@{files[[which]]})],
{img_}:>img
]
]
];


FrontEndImageBrowser[pattern_,
  args:Except[_Rule|_RuleDelayed]...,
  ops:OptionsPattern[Options@PaneColumn]]:=
  PaneColumn[
    With[{img=Quiet@Check[Import@#,$Failed]},
      Button[
      Tooltip[img,#],
      Print@(#->img),
      Appearance->"Frameless"]
      ]&/@
      FrontEndImageFiles[
        Replace[pattern,{
          Verbatim[Verbatim][p_]:>p,
          (StartOfString~~p_):>(p~~___),
          (p_~~EndOfString):>(___~~p),
          p_:>(___~~p~~___)
          }],args],
    ops]


FrontEndBlobIcon[expr_,fmt_:StandardForm]:=
  With[{boxes=MakeBoxes[expr,fmt]},
    If[
      MatchQ[boxes,
        InterpretationBox[_RowBox,___]|
        TagBox[TemplateBox[{_RowBox,___},___],___]
        ],
      ToExpression@
        FirstCase[
          boxes,
          PaneSelectorBox[{False->GridBox[{{_,e_,___},___},___],___},___]:>e,
          "None",
          \[Infinity]
          ],
      None
      ]
    ]


TRFiles[pat_]:=
  FileNames[
  "*.tr",
    FileNameJoin@{
      $InstallationDirectory,
      "SystemFiles",
      "FrontEnd",
      "TextResources"
      }
    ]


(* ::Subsubsection::Closed:: *)
(*Characters*)



$FEUnicodeChars:=
  $FEUnicodeChars=
    Select[StringContainsQ["Characters"]]@
      InternalFiles["*.nb",
        "Documentation","English",
          "System","ReferencePages",
          "Characters"]//Map[FileBaseName];


FEUnicodeCharFind[pat_:_]:=
  Select[$FEUnicodeChars,
    StringContainsQ[pat]
    ];
FEUnicodeCharBrowser[pat_:_]:=
  Replace[FEUnicodeCharFind[pat],{
    s:{__}:>HyperlinkBrowse[
      TemplateApply["\"\[``]\"",#]->
        ToExpression[TemplateApply["\"\[``]\"",#],
          StandardForm
          ]&/@s,
      Print,
      ImageSize->{250,250}
      ],
    _->None
    }];


(* ::Subsubsection::Closed:: *)
(*FEImport*)



feImageFormats=ToLowerCase/@Image`$ImportImageFormats;
feImageQ[s_String]:=
  MemberQ[feImageFormats,FileExtension@s];


FEImport[f_String?FileExistsQ]:=
  Import[f];
FEImport[f:FrontEnd`FileName[_,s_?feImageQ,ops___]]:=
  FE`Evaluate@FEPrivate`ImportImage[f]
FEImport[f:FrontEnd`FileName[_,_,ops___]]:=
  Import[FEToFileName[f],ops];
FEImport[FEPrivate`FrontEndResource[r___]]:=
  FrontEndResource[r]


FEToFileName[FrontEnd`FileName[p:{__},f_,___]]:=
  Replace[
    Select[FrontEndFiles[f],
      StringContainsQ@
        FileNameJoin@p
      ],{
      {}:>
        Replace[
          Select[InternalFiles[f],
            StringContainsQ@
              FileNameJoin@p
          ],
          {fn_}:>fn
          ],
      {fn_}:>fn
    }];
FEToFileName[FrontEnd`ToFileName[a___]]:=
  FEToFileName[FrontEnd`FileName[a]];


(* ::Subsubsection::Closed:: *)
(*UserBaseCopy*)



Options[FEUserBaseFile]=
  {
    AutoCopy->False
    };
FEUserBaseFile[
  fName_,
  fep:
    {
      __String?(KeyMemberQ[$FEPathMap,#]&)
      }|
      _String|Automatic:Automatic,
  exts:
    {__String?(StringLength[#]<6&&StringMatchQ[#, WordCharacter..]&)}:
    {"nb", "m", "tr"},
  ops:OptionsPattern[]
  ]:=
  Module[
    {
      res=FEFindFileOnPath[fName, fep, exts, "ReturnPath"->True],
      path,
      heads,
      file,
      fileNew,
      autocopy=TrueQ@OptionValue[AutoCopy]
      },
    If[res=!=$Failed,
      path=res[[1]];
      path=
        DeleteCases[{StringJoin@#[[;;2]], #[[3]]}, ""]&@
          StringSplit[path, (p:"Paths"|"Path"):>p, 2];
      heads=
        ToFileName/@
          AbsoluteCurrentValue[$FrontEndSession, path];
      file = res[[2]];
      fileNew = 
        Catch[
          Scan[
            If[StringStartsQ[file, #],
              Throw[
                StringReplace[file,
                  #->
                    StringReplace[
                      #,
                      StringSplit[#, 
                        "FrontEnd"|"Fonts"|"SpellingDictionaries"|
                          "Converters"|"Components", 2][[1]]->
                        StringRiffle[
                          {$UserBaseDirectory, "SystemFiles", ""},
                          $PathnameSeparator
                          ]
                      ]
                  ]
                ]
              ]&,
            heads
            ]
          ];
      If[StringQ@fileNew,  
        If[autocopy,
          If[!FileExistsQ@fileNew,
            If[!DirectoryQ@DirectoryName@fileNew,
              CreateDirectory[DirectoryName@fileNew,
                CreateIntermediateDirectories->True
                ]
              ]
            ]
          ];
        fileNew,
        $Failed
        ],
      $Failed
      ]
    ]


End[];



