(* ::Package:: *)

(* Autogenerated Package *)

AttachAutocompletionMenu::usage="";
AutocompleteEventHandler::usage="";


Begin["`Private`"];


(* ::Subsection:: *)
(*Menus*)



(* ::Subsubsection::Closed:: *)
(*AttachAutocompletionMenu*)



(* ::Subsubsubsection::Closed:: *)
(*acButton*)



acButton[item_, paste_,ops:OptionsPattern[]]:=
  Button[
    item,
    paste[item, ParentBox@EvaluationBox[]],
    FilterRules[
      {
        ops,
        Appearance->
          {
            "Default"->None,
            "Hover"->FrontEnd`FileName[{"Popups", "CodeCompletion"}, "row_hover.9.png"]
            },
        FrameMargins->{{20, 20}, {15, 15}},
        ImageSize->Scaled[1],
        Alignment->Left
        },
      Options[Button]
      ]
    ];


(* ::Subsubsubsection::Closed:: *)
(*acOCButton*)



acOCButton[item_, fn_]:=
  Panel[
    acButton[
      item,
      fn,
      Appearance->
        {
          "Default"->FrontEnd`FileName[{"Popups", "CodeCompletion"}, "CARectBG.9.png"],
          "Hover"->FrontEnd`FileName[{"Popups", "CodeCompletion"}, "row_hover.9.png"]
          },
      FrameMargins->{{20, 20}, {0, 0}},
      Alignment->Center
      ],
    Appearance->{"Default"->FrontEnd`FileName[{"Popups", "CodeCompletion"}, "top_left.9.png"]},
    ImageMargins->{{0, 0}, {0, -5}}
    ];


(* ::Subsubsubsection::Closed:: *)
(*acPanel*)



acPanel//Clear


acPanel[items_, selector_, paste_, truncateAt_, ops:OptionsPattern[]]:=
  DynamicModule[
    {
      displayAll,
      fullItems,
      menuItems,
      truncate=truncateAt,
      collapseBackTo=truncateAt
      },
    Panel[
      Dynamic[
        menuItems=
          Pick[fullItems, selector/@fullItems];
        Grid[
          Which[
            truncate === All,
              menuItems,
            truncate===0,
              {
                {""},
                {
                  acOCButton[
                    Style["\[DownPointer]", Gray, Large], 
                    (truncate=Length@menuItems)&
                    ]
                  }
                },
            TrueQ[Length@menuItems>truncate], 
            Append[
              menuItems[[;;truncate]],
              {acOCButton[Style["\[DownPointer]", Gray, Large], 
                If[truncate===0, 
                  truncate=Length@menuItems
                  ]&]}
              ],
            TrueQ[Length@menuItems>collapseBackTo],
              Append[
                menuItems[[;;truncate]],
                {acOCButton[Style["\[UpPointer]", Gray, Large], (truncate=collapseBackTo)&]}
                ],
            True,
              Append[
                menuItems,
                {acOCButton[Style["\[UpPointer]", Gray, Large], (truncate=0)&]}
                ]
            ],
          Alignment->Left
          ]
        ],
      FilterRules[
        {
          ops,
          BaseStyle->"Text",
          ImageSize->{200, Automatic},
          FrameMargins->{{-1, -3}, {-1, -2}},
          Appearance->
            {
              "Default"->
                FrontEnd`FileName[{"Popups", "CodeCompletion"}, "top_left.9.png"]
              }
          },
        Options[Panel]
        ]
      ],
    Initialization:>
      {
        fullItems=Transpose[{acButton[#, paste, ops]&/@items}]
        }
    ];


(* ::Subsubsubsection::Closed:: *)
(*attachAutocompletions*)



attachAutocompletions[
  object_, 
  autocompletions_List,
  selector_,
  pasteFunction_,
  maxItems_,
  radialAway_,
  alignment_,
  anchor_,
  closingActions_,
  ops:OptionsPattern[]
  ]:=
  Module[{menu=acPanel[autocompletions, selector, pasteFunction, maxItems, ops]},
    FEAttachCell[
      object,
      menu,
      radialAway,
      alignment,
      anchor,
      closingActions
      ]
    ]


(* ::Subsubsubsection::Closed:: *)
(*AttachAutocompletionMenu*)



Options[AttachAutocompletionMenu]=
  Join[
    Options[Panel],
    Options[Button],
    {
      "SelectionFunction"->(True&),
      "PasteFunction"->(Print[#]&),
      "MaxDisplayItems"->Infinity,
      "AttachmentOptions"->
        {
          "Position"->Automatic,
          "Alignment"->{Left, Top},
          "Offset"->0,
          "ClosingActions"->Automatic
          }
      }
    ];
AttachAutocompletionMenu[
  object:$FEObjectPatterns|Automatic:Automatic,
  items_List,
  ops:OptionsPattern[]
  ]:=
  Module[
    {
      attops=Association@OptionValue["AttachmentOptions"],
      maxItems=OptionValue["MaxDisplayItems"],
      attachedCell,
      select=OptionValue["SelectionFunction"],
      paste=OptionValue["PasteFunction"]
      },
    If[!AssociationQ@attops, attops=<||>];
    If[!IntegerQ@maxItems, maxItems=All];
    attachedCell=
      attachAutocompletions[
        object, 
        items,
        select,
        With[{res=paste[##]},
          If[res=!="NoDetach",
            FrontEndExecute@FrontEnd`DetachCell[attachedCell]
            ];
          res
          ]&,
        maxItems,
        Lookup[attops, "Offset", 0],
        Replace[
          {
            Automatic:>
              Replace[object,
                {
                  $FENotebookPatterns:>
                    {Left, Top},
                  $FECellPatterns:>
                    {Left, Bottom},
                  $FEBoxPatterns:>
                    {Right, Bottom}
                  }
                ]
            }
          ]@
        Lookup[attops, "Position", Automatic],
        Lookup[attops, "Alignment", {Left, Top}],
        Replace[
          Lookup[attops, "ClosingActions", Automatic],
          Automatic:>
            {
              If[!MatchQ[object, $FENotebookPatterns], 
                "ParentChanged", 
                Nothing
                ], 
              "EvaluatorQuit", "OutsideMouseClick"
              }
          ],
        ops
        ]
    ];


(* ::Subsubsection::Closed:: *)
(*AutocompleteEventHandler*)



Options[AutocompleteEventHandler]=
  Options[AttachAutocompletionMenu];
AutocompleteEventHandler[
  obj_,
  events_,
  ops:OptionsPattern[]
  ]:=
  DynamicModule[{cell},
    EventHandler[
      obj,
      Append[PassEventsDown->True]@
        Replace[
          Flatten@{events},
          {
            (bindPat_->l_List):>
              (
                bindPat:>
                  (
                    Quiet@NotebookDelete[cell];
                    cell=AttachAutocompletionMenu[EvaluationBox[], l, ops]
                    )
                  ),
            (bindPat_->fn_):>
              (
                bindPat:>
                  With[{l=fn[]},
                    Quiet@NotebookDelete[cell];
                    If[Length@l>0,
                      cell=AttachAutocompletionMenu[EvaluationBox[], l, ops]
                      ]
                    ]
                ),
            fn:Except[_RuleDelayed]:>
              (
                {"KeyDown", #}:>
                  With[{l=fn[]},
                    Quiet@NotebookDelete[cell];
                    If[Length@l>0, 
                      cell=AttachAutocompletionMenu[EvaluationBox[], l, ops]
                      ]
                    ]&/@Join[Alphabet[], ToUpperCase@Alphabet[]]
                )
            },
          1
          ]//Flatten
      ]
  ]


End[];



